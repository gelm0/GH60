
gh60_lufa.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  00005382  00005416  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00005382  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000a4  00800132  00800132  00005448  2**0
                  ALLOC
  3 .noinit       00000004  008001d6  008001d6  00005448  2**0
                  ALLOC
  4 .stab         000008b8  00000000  00000000  00005448  2**2
                  CONTENTS, READONLY, DEBUGGING
  5 .stabstr      00000073  00000000  00000000  00005d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .comment      00000011  00000000  00000000  00005d73  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005d84  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000958  00000000  00000000  00005dc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000f653  00000000  00000000  0000671c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003a04  00000000  00000000  00015d6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00004c0f  00000000  00000000  00019773  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001a0c  00000000  00000000  0001e384  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003e24  00000000  00000000  0001fd90  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00007b05  00000000  00000000  00023bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a50  00000000  00000000  0002b6b9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
       0:	0c 94 b5 05 	jmp	0xb6a	; 0xb6a <__ctors_end>
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState == DEVICE_STATE_Unattached)
       4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
       8:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
       c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
      10:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      14:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      18:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
      1c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      20:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
      24:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
	uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	if (Endpoint_IsSETUPReceived())
	  USB_Device_ProcessControlRequest();
      28:	0c 94 f3 0d 	jmp	0x1be6	; 0x1be6 <__vector_10>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
      2c:	0c 94 c5 0e 	jmp	0x1d8a	; 0x1d8a <__vector_11>
      30:	0c 94 a1 1c 	jmp	0x3942	; 0x3942 <__vector_12>
	#elif defined(USB_CAN_BE_HOST)
		USB_HostTask();
	#elif defined(USB_CAN_BE_DEVICE)
		USB_DeviceTask();
	#endif
}
      34:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      38:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      3c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      40:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      44:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      48:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      4c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      50:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      54:	0c 94 15 1d 	jmp	0x3a2a	; 0x3a2a <__vector_21>
      58:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      5c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      60:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      64:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      68:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      6c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      70:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      74:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      78:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      7c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      80:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      84:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      88:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      8c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      90:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      94:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      98:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      9c:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      a0:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      a4:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      a8:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__bad_interrupt>
      ac:	32 0f       	add	r19, r18
      ae:	54 0f       	add	r21, r20
      b0:	42 10       	cpse	r4, r2
      b2:	54 0f       	add	r21, r20
      b4:	42 10       	cpse	r4, r2
      b6:	99 0f       	add	r25, r25
      b8:	bc 0f       	add	r27, r28
      ba:	42 10       	cpse	r4, r2
      bc:	11 10       	cpse	r1, r1
      be:	24 10       	cpse	r2, r4
      c0:	74 13       	cpse	r23, r20
      c2:	74 13       	cpse	r23, r20
      c4:	a1 13       	cpse	r26, r17
      c6:	a1 13       	cpse	r26, r17
      c8:	fc 13       	cpse	r31, r28
      ca:	38 14       	cp	r3, r8
      cc:	30 16       	cp	r3, r16
      ce:	30 16       	cp	r3, r16
      d0:	50 14       	cp	r5, r0
      d2:	30 16       	cp	r3, r16
      d4:	4b 15       	cp	r20, r11
      d6:	4b 15       	cp	r20, r11
      d8:	06 16       	cp	r0, r22
      da:	30 16       	cp	r3, r16
      dc:	30 16       	cp	r3, r16
      de:	1c 16       	cp	r1, r28

000000e0 <__trampolines_end>:
      e0:	f1 a1       	ldd	r31, Z+33	; 0x21

000000e2 <keymaps>:
      e2:	29 3a 3b 3c 3d 3e 3f 40 41 42 43 44 45 49 4a 4b     ):;<=>?@ABCDEIJK
      f2:	35 1e 1f 20 21 22 23 24 25 26 27 2d 2e 2a 00 4c     5.. !"#$%&'-.*.L
     102:	2b 00 14 1a 08 15 17 1c 18 0c 12 13 2f 30 28 4e     +.........../0(N
     112:	c0 00 04 16 07 09 0a 0b 0d 0e 0f 33 34 32 00 4d     ...........342.M
     122:	e1 00 64 1d 1b 06 19 05 11 10 36 37 38 e5 00 52     ..d.......678..R
     132:	e0 00 e3 e2 00 00 00 2c 00 00 00 e6 39 50 4f 51     .......,....9POQ
     142:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 01 ab     ................
     152:	01 01 01 01 01 01 01 01 01 01 01 01 01 01 00 ac     ................
     162:	01 00 4b 52 4e 01 01 01 01 01 01 01 01 01 01 b0     ..KRN...........
     172:	01 00 50 51 4f 01 01 01 01 01 01 01 01 01 00 a8     ..PQO...........
     182:	01 00 01 01 01 01 01 01 01 01 01 01 01 01 00 a9     ................
     192:	01 00 01 01 00 00 00 01 00 00 00 01 01 01 01 aa     ................

000001a2 <__c.1942>:
     1a2:	0a 00                                               ..

000001a4 <__c.1940>:
     1a4:	25 30 31 36 62 00                                   %016b.

000001aa <__c.1938>:
     1aa:	3a 20 00                                            : .

000001ad <__c.1936>:
     1ad:	25 30 32 58 00                                      %02X.

000001b2 <__c.1933>:
     1b2:	0a 72 2f 63 20 30 31 32 33 34 35 36 37 38 39 41     .r/c 0123456789A
     1c2:	42 43 44 45 46 0a 00                                BCDEF..

000001c9 <__c.1911>:
     1c9:	0a 00                                               ..

000001cb <__c.1909>:
     1cb:	25 30 32 58 00                                      %02X.

000001d0 <__c.1907>:
     1d0:	62 6f 75 6e 63 65 21 3a 20 00                       bounce!: .

000001da <__c.4821>:
     1da:	5b 73 5d 00                                         [s].

000001de <__c.4819>:
     1de:	4b 65 79 62 6f 61 72 64 20 73 74 61 72 74 2e 0a     Keyboard start..
     1ee:	00                                                  .

000001ef <__c.4817>:
     1ef:	55 53 42 20 63 6f 6e 66 69 67 75 72 65 64 2e 0a     USB configured..
     1ff:	00                                                  .

00000200 <__c.4719>:
     200:	5b 57 5d 00                                         [W].

00000204 <__c.4715>:
     204:	5b 53 5d 00                                         [S].

00000208 <__c.4711>:
     208:	5b 52 5d 00                                         [R].

0000020c <__c.4706>:
     20c:	5b 44 5d 00                                         [D].

00000210 <__c.4701>:
     210:	5b 43 5d 00                                         [C].

00000214 <ProductString>:
     214:	24 03 5a 00 65 00 61 00 6c 00 69 00 6f 00 73 00     $.Z.e.a.l.i.o.s.
     224:	4d 00 61 00 73 00 74 00 65 00 72 00 72 00 61 00     M.a.s.t.e.r.r.a.
     234:	63 00 65 00 00 00                                   c.e...

0000023a <ManufacturerString>:
     23a:	12 03 47 00 75 00 73 00 74 00 61 00 76 00 45 00     ..G.u.s.t.a.v.E.
     24a:	6b 00 00 00                                         k...

0000024e <LanguageString>:
     24e:	04 03 09 04                                         ....

00000252 <ConfigurationDescriptor>:
     252:	09 02 74 00 04 01 00 a0 32 09 04 00 00 01 03 01     ..t.....2.......
     262:	01 00 09 21 11 01 00 01 22 40 00 07 05 81 03 08     ...!...."@......
     272:	00 0a 09 04 01 00 01 03 01 02 00 09 21 11 01 00     ............!...
     282:	01 22 4d 00 07 05 82 03 08 00 0a 09 04 02 00 01     ."M.............
     292:	03 00 00 00 09 21 11 01 00 01 22 36 00 07 05 83     .....!...."6....
     2a2:	03 08 00 0a 09 04 03 00 02 03 00 00 00 09 21 11     ..............!.
     2b2:	01 00 01 22 22 00 07 05 84 03 20 00 01 07 05 04     ...""..... .....
     2c2:	03 20 00 01                                         . ..

000002c6 <DeviceDescriptor>:
     2c6:	12 01 10 01 00 00 00 08 ed fe 60 60 01 00 01 02     ..........``....
     2d6:	00 01                                               ..

000002d8 <ConsoleReport>:
     2d8:	06 31 ff 09 74 a1 01 09 75 15 00 26 ff 00 95 20     .1..t...u..&... 
     2e8:	75 08 81 02 09 76 15 00 26 ff 00 95 20 75 08 91     u....v..&... u..
     2f8:	02 c0                                               ..

000002fa <ExtrakeyReport>:
     2fa:	05 01 09 80 a1 01 85 02 16 01 00 26 b7 00 1a 01     ...........&....
     30a:	00 2a b7 00 75 10 95 01 81 00 c0 05 0c 09 01 a1     .*..u...........
     31a:	01 85 03 16 01 00 26 9c 02 1a 01 00 2a 9c 02 75     ......&.....*..u
     32a:	10 95 01 81 00 c0                                   ......

00000330 <MouseReport>:
     330:	05 01 09 02 a1 01 09 01 a1 00 05 09 19 01 29 05     ..............).
     340:	15 00 25 01 95 05 75 01 81 02 95 01 75 03 81 01     ..%...u.....u...
     350:	05 01 09 30 09 31 15 81 25 7f 95 02 75 08 81 06     ...0.1..%...u...
     360:	09 38 15 81 25 7f 95 01 75 08 81 06 05 0c 0a 38     .8..%...u......8
     370:	02 15 81 25 7f 95 01 75 08 81 06 c0 c0              ...%...u.....

0000037d <KeyboardReport>:
     37d:	05 01 09 06 a1 01 05 07 19 e0 29 e7 15 00 25 01     ..........)...%.
     38d:	95 08 75 01 81 02 95 01 75 08 81 01 05 08 19 01     ..u.....u.......
     39d:	29 05 95 05 75 01 91 02 95 01 75 03 91 01 05 07     )...u.....u.....
     3ad:	19 00 29 ff 15 00 26 ff 00 95 06 75 08 81 00 c0     ..)...&....u....

000003bd <__c.2045>:
     3bd:	0a 00                                               ..

000003bf <__c.2040>:
     3bf:	25 30 32 58 20 00                                   %02X .

000003c5 <__c.2037>:
     3c5:	6b 65 79 62 6f 61 72 64 5f 72 65 70 6f 72 74 3a     keyboard_report:
     3d5:	20 00                                                .

000003d7 <__c.2401>:
     3d7:	4c 45 44 3a 20 25 30 32 58 0a 00                    LED: %02X..

000003e2 <__c.2478>:
     3e2:	64 6f 6e 65 2e 0a 00                                done...

000003e9 <__c.2472>:
     3e9:	62 6f 6f 74 6d 61 67 69 63 20 73 63 61 6e 3a 20     bootmagic scan: 
     3f9:	2e 2e 2e 20 00                                      ... .

000003fe <__c.2118>:
     3fe:	29 0a 00                                            )..

00000401 <__c.2116>:
     401:	25 75 00                                            %u.

00000404 <__c.2114>:
     404:	2f 00                                               /.

00000406 <__c.2112>:
     406:	25 75 00                                            %u.

00000409 <__c.2110>:
     409:	5d 28 00                                            ](.

0000040c <__c.2108>:
     40c:	25 64 00                                            %d.

0000040f <__c.2106>:
     40f:	20 00                                                .

00000411 <__c.2104>:
     411:	25 64 00                                            %d.

00000414 <__c.2102>:
     414:	20 00                                                .

00000416 <__c.2100>:
     416:	25 64 00                                            %d.

00000419 <__c.2098>:
     419:	20 00                                                .

0000041b <__c.2096>:
     41b:	25 64 00                                            %d.

0000041e <__c.2094>:
     41e:	7c 00                                               |.

00000420 <__c.2092>:
     420:	25 30 32 58 00                                      %02X.

00000425 <__c.2090>:
     425:	6d 6f 75 73 65 6b 65 79 20 5b 62 74 6e 7c 78 20     mousekey [btn|x 
     435:	79 20 76 20 68 5d 28 72 65 70 2f 61 63 6c 29 3a     y v h](rep/acl):
     445:	20 5b 00                                             [.

00000448 <__c.2835>:
     448:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     458:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

00000463 <__c.2832>:
     463:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     473:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

0000047c <__c.2829>:
     47c:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     48c:	20 25 64 0a 00                                       %d..

00000491 <__c.2826>:
     491:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     4a1:	64 0a 00                                            d..

000004a4 <__c.2823>:
     4a4:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     4b4:	0a 00                                               ..

000004b6 <__c.2819>:
     4b6:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

000004c5 <__c.2812>:
     4c5:	6d 6b 5f 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     mk_wheel_time_to
     4d5:	5f 6d 61 78 20 3d 20 25 64 0a 00                    _max = %d..

000004e0 <__c.2809>:
     4e0:	6d 6b 5f 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     mk_wheel_max_spe
     4f0:	65 64 20 3d 20 25 64 0a 00                          ed = %d..

000004f9 <__c.2806>:
     4f9:	6d 6b 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 20 3d     mk_time_to_max =
     509:	20 25 64 0a 00                                       %d..

0000050e <__c.2803>:
     50e:	6d 6b 5f 6d 61 78 5f 73 70 65 65 64 20 3d 20 25     mk_max_speed = %
     51e:	64 0a 00                                            d..

00000521 <__c.2800>:
     521:	6d 6b 5f 69 6e 74 65 72 76 61 6c 20 3d 20 25 64     mk_interval = %d
     531:	0a 00                                               ..

00000533 <__c.2796>:
     533:	6d 6b 5f 64 65 6c 61 79 20 3d 20 25 64 0a 00        mk_delay = %d..

00000542 <__c.2789>:
     542:	0a 00                                               ..

00000544 <__c.2787>:
     544:	25 75 00                                            %u.

00000547 <__c.2785>:
     547:	36 3a 20 77 68 65 65 6c 5f 74 69 6d 65 5f 74 6f     6: wheel_time_to
     557:	5f 6d 61 78 3a 20 00                                _max: .

0000055e <__c.2783>:
     55e:	0a 00                                               ..

00000560 <__c.2781>:
     560:	25 75 00                                            %u.

00000563 <__c.2779>:
     563:	35 3a 20 77 68 65 65 6c 5f 6d 61 78 5f 73 70 65     5: wheel_max_spe
     573:	65 64 3a 20 00                                      ed: .

00000578 <__c.2777>:
     578:	0a 00                                               ..

0000057a <__c.2775>:
     57a:	25 75 00                                            %u.

0000057d <__c.2773>:
     57d:	34 3a 20 74 69 6d 65 5f 74 6f 5f 6d 61 78 3a 20     4: time_to_max: 
     58d:	00                                                  .

0000058e <__c.2771>:
     58e:	0a 00                                               ..

00000590 <__c.2769>:
     590:	25 75 00                                            %u.

00000593 <__c.2767>:
     593:	33 3a 20 6d 61 78 5f 73 70 65 65 64 3a 20 00        3: max_speed: .

000005a2 <__c.2765>:
     5a2:	0a 00                                               ..

000005a4 <__c.2763>:
     5a4:	25 75 00                                            %u.

000005a7 <__c.2761>:
     5a7:	32 3a 20 69 6e 74 65 72 76 61 6c 28 6d 73 29 3a     2: interval(ms):
     5b7:	20 00                                                .

000005b9 <__c.2759>:
     5b9:	0a 00                                               ..

000005bb <__c.2757>:
     5bb:	25 75 00                                            %u.

000005be <__c.2755>:
     5be:	31 3a 20 64 65 6c 61 79 28 2a 31 30 6d 73 29 3a     1: delay(*10ms):
     5ce:	20 00                                                .

000005d0 <__c.2753>:
     5d0:	0a 09 2d 20 56 61 6c 75 65 73 20 2d 0a 00           ..- Values -..

000005de <__c.2873>:
     5de:	4d 3e 00                                            M>.

000005e1 <__c.2871>:
     5e1:	4d 25 64 3e 20 00                                   M%d> .

000005e7 <__c.2869>:
     5e7:	3f 00                                               ?.

000005e9 <__c.2866>:
     5e9:	73 65 74 20 64 65 66 61 75 6c 74 0a 00              set default..

000005f6 <__c.2852>:
     5f6:	43 3e 20 00                                         C> .

000005fa <__c.2842>:
     5fa:	77 68 65 72 65 20 64 65 6c 74 61 3a 20 63 75 72     where delta: cur
     60a:	73 6f 72 3d 25 64 2c 20 77 68 65 65 6c 3d 25 64     sor=%d, wheel=%d
     61a:	0a 53 65 65 20 68 74 74 70 3a 2f 2f 65 6e 2e 77     .See http://en.w
     62a:	69 6b 69 70 65 64 69 61 2e 6f 72 67 2f 77 69 6b     ikipedia.org/wik
     63a:	69 2f 4d 6f 75 73 65 5f 6b 65 79 73 0a 00           i/Mouse_keys..

00000648 <__c.2840>:
     648:	0a 09 2d 20 4d 6f 75 73 65 6b 65 79 20 2d 0a 45     ..- Mousekey -.E
     658:	53 43 2f 71 3a 09 71 75 69 74 0a 31 3a 09 64 65     SC/q:.quit.1:.de
     668:	6c 61 79 28 2a 31 30 6d 73 29 0a 32 3a 09 69 6e     lay(*10ms).2:.in
     678:	74 65 72 76 61 6c 28 6d 73 29 0a 33 3a 09 6d 61     terval(ms).3:.ma
     688:	78 5f 73 70 65 65 64 0a 34 3a 09 74 69 6d 65 5f     x_speed.4:.time_
     698:	74 6f 5f 6d 61 78 0a 35 3a 09 77 68 65 65 6c 5f     to_max.5:.wheel_
     6a8:	6d 61 78 5f 73 70 65 65 64 0a 36 3a 09 77 68 65     max_speed.6:.whe
     6b8:	65 6c 5f 74 69 6d 65 5f 74 6f 5f 6d 61 78 0a 0a     el_time_to_max..
     6c8:	70 3a 09 70 72 69 6e 74 20 76 61 6c 75 65 73 0a     p:.print values.
     6d8:	64 3a 09 73 65 74 20 64 65 66 61 75 6c 74 73 0a     d:.set defaults.
     6e8:	75 70 3a 09 2b 31 0a 64 6f 77 6e 3a 09 2d 31 0a     up:.+1.down:.-1.
     6f8:	70 67 75 70 3a 09 2b 31 30 0a 70 67 64 6f 77 6e     pgup:.+10.pgdown
     708:	3a 09 2d 31 30 0a 0a 73 70 65 65 64 20 3d 20 64     :.-10..speed = d
     718:	65 6c 74 61 20 2a 20 6d 61 78 5f 73 70 65 65 64     elta * max_speed
     728:	20 2a 20 28 72 65 70 65 61 74 20 2f 20 74 69 6d      * (repeat / tim
     738:	65 5f 74 6f 5f 6d 61 78 29 0a 00                    e_to_max)..

00000743 <__c.2745>:
     743:	3f 00                                               ?.

00000745 <__c.2742>:
     745:	4d 3e 20 00                                         M> .

00000749 <__c.2747>:
     749:	43 3e 20 00                                         C> .

0000074d <__c.2891>:
     74d:	4c 25 64 0a 00                                      L%d..

00000752 <__c.2731>:
     752:	0a 09 2d 20 43 6f 6e 73 6f 6c 65 20 2d 0a 45 53     ..- Console -.ES
     762:	43 2f 71 3a 09 71 75 69 74 0a 6d 3a 09 6d 6f 75     C/q:.quit.m:.mou
     772:	73 65 6b 65 79 0a 00                                sekey..

00000779 <__c.2563>:
     779:	0a 09 2d 20 4d 61 67 69 63 20 2d 0a 64 3a 09 64     ..- Magic -.d:.d
     789:	65 62 75 67 0a 78 3a 09 64 65 62 75 67 20 6d 61     ebug.x:.debug ma
     799:	74 72 69 78 0a 6b 3a 09 64 65 62 75 67 20 6b 65     trix.k:.debug ke
     7a9:	79 62 6f 61 72 64 0a 6d 3a 09 64 65 62 75 67 20     yboard.m:.debug 
     7b9:	6d 6f 75 73 65 0a 76 3a 09 76 65 72 73 69 6f 6e     mouse.v:.version
     7c9:	0a 73 3a 09 73 74 61 74 75 73 0a 63 3a 09 63 6f     .s:.status.c:.co
     7d9:	6e 73 6f 6c 65 20 6d 6f 64 65 0a 30 2d 34 3a 09     nsole mode.0-4:.
     7e9:	6c 61 79 65 72 30 2d 34 28 46 31 30 2d 46 34 29     layer0-4(F10-F4)
     7f9:	0a 50 61 75 73 3a 09 62 6f 6f 74 6c 6f 61 64 65     .Paus:.bootloade
     809:	72 0a 65 3a 09 65 65 70 72 6f 6d 0a 00              r.e:.eeprom..

00000816 <__c.2658>:
     816:	0a 00                                               ..

00000818 <__c.2656>:
     818:	25 75 00                                            %u.

0000081b <__c.2654>:
     81b:	2e 6e 6b 72 6f 3a 20 00                             .nkro: .

00000823 <__c.2652>:
     823:	0a 00                                               ..

00000825 <__c.2650>:
     825:	25 75 00                                            %u.

00000828 <__c.2648>:
     828:	2e 73 77 61 70 5f 62 61 63 6b 73 6c 61 73 68 5f     .swap_backslash_
     838:	62 61 63 6b 73 70 61 63 65 3a 20 00                 backspace: .

00000844 <__c.2646>:
     844:	0a 00                                               ..

00000846 <__c.2644>:
     846:	25 75 00                                            %u.

00000849 <__c.2642>:
     849:	2e 73 77 61 70 5f 67 72 61 76 65 5f 65 73 63 3a     .swap_grave_esc:
     859:	20 00                                                .

0000085b <__c.2640>:
     85b:	0a 00                                               ..

0000085d <__c.2638>:
     85d:	25 75 00                                            %u.

00000860 <__c.2636>:
     860:	2e 6e 6f 5f 67 75 69 3a 20 00                       .no_gui: .

0000086a <__c.2634>:
     86a:	0a 00                                               ..

0000086c <__c.2632>:
     86c:	25 75 00                                            %u.

0000086f <__c.2630>:
     86f:	2e 73 77 61 70 5f 72 61 6c 74 5f 72 67 75 69 3a     .swap_ralt_rgui:
     87f:	20 00                                                .

00000881 <__c.2628>:
     881:	0a 00                                               ..

00000883 <__c.2626>:
     883:	25 75 00                                            %u.

00000886 <__c.2624>:
     886:	2e 73 77 61 70 5f 6c 61 6c 74 5f 6c 67 75 69 3a     .swap_lalt_lgui:
     896:	20 00                                                .

00000898 <__c.2622>:
     898:	0a 00                                               ..

0000089a <__c.2620>:
     89a:	25 75 00                                            %u.

0000089d <__c.2618>:
     89d:	2e 63 61 70 73 6c 6f 63 6b 5f 74 6f 5f 63 6f 6e     .capslock_to_con
     8ad:	74 72 6f 6c 3a 20 00                                trol: .

000008b4 <__c.2616>:
     8b4:	0a 00                                               ..

000008b6 <__c.2614>:
     8b6:	25 75 00                                            %u.

000008b9 <__c.2612>:
     8b9:	2e 73 77 61 70 5f 63 6f 6e 74 72 6f 6c 5f 63 61     .swap_control_ca
     8c9:	70 73 6c 6f 63 6b 3a 20 00                          pslock: .

000008d2 <__c.2610>:
     8d2:	0a 00                                               ..

000008d4 <__c.2608>:
     8d4:	25 30 32 58 00                                      %02X.

000008d9 <__c.2606>:
     8d9:	6b 65 79 6d 61 70 5f 63 6f 6e 66 69 67 2e 72 61     keymap_config.ra
     8e9:	77 3a 20 00                                         w: .

000008ed <__c.2603>:
     8ed:	0a 00                                               ..

000008ef <__c.2601>:
     8ef:	25 75 00                                            %u.

000008f2 <__c.2599>:
     8f2:	2e 6d 6f 75 73 65 3a 20 00                          .mouse: .

000008fb <__c.2597>:
     8fb:	0a 00                                               ..

000008fd <__c.2595>:
     8fd:	25 75 00                                            %u.

00000900 <__c.2593>:
     900:	2e 6b 65 79 62 6f 61 72 64 3a 20 00                 .keyboard: .

0000090c <__c.2591>:
     90c:	0a 00                                               ..

0000090e <__c.2589>:
     90e:	25 75 00                                            %u.

00000911 <__c.2587>:
     911:	2e 6d 61 74 72 69 78 3a 20 00                       .matrix: .

0000091b <__c.2585>:
     91b:	0a 00                                               ..

0000091d <__c.2583>:
     91d:	25 75 00                                            %u.

00000920 <__c.2581>:
     920:	2e 65 6e 61 62 6c 65 3a 20 00                       .enable: .

0000092a <__c.2579>:
     92a:	0a 00                                               ..

0000092c <__c.2577>:
     92c:	25 30 32 58 00                                      %02X.

00000931 <__c.2575>:
     931:	64 65 62 75 67 5f 63 6f 6e 66 69 67 2e 72 61 77     debug_config.raw
     941:	3a 20 00                                            : .

00000944 <__c.2572>:
     944:	0a 00                                               ..

00000946 <__c.2570>:
     946:	25 75 00                                            %u.

00000949 <__c.2568>:
     949:	64 65 66 61 75 6c 74 5f 6c 61 79 65 72 3a 20 00     default_layer: .

00000959 <__c.2726>:
     959:	3f 00                                               ?.

0000095b <__c.2717>:
     95b:	74 69 6d 65 72 5f 72 65 61 64 33 32 28 29 3a 20     timer_read32(): 
     96b:	25 30 34 6c 58 0a 00                                %04lX..

00000972 <__c.2715>:
     972:	6b 65 79 62 6f 61 72 64 5f 69 64 6c 65 3a 20 25     keyboard_idle: %
     982:	58 0a 00                                            X..

00000985 <__c.2713>:
     985:	6b 65 79 62 6f 61 72 64 5f 70 72 6f 74 6f 63 6f     keyboard_protoco
     995:	6c 3a 20 25 58 0a 00                                l: %X..

0000099c <__c.2711>:
     99c:	68 6f 73 74 5f 6b 65 79 62 6f 61 72 64 5f 6c 65     host_keyboard_le
     9ac:	64 73 28 29 3a 20 25 58 0a 00                       ds(): %X..

000009b6 <__c.2709>:
     9b6:	0a 09 2d 20 53 74 61 74 75 73 20 2d 0a 00           ..- Status -..

000009c4 <__c.2706>:
     9c4:	47 43 43 3a 20 34 2e 39 2e 32 20 41 56 52 2d 4c     GCC: 4.9.2 AVR-L
     9d4:	49 42 43 3a 20 31 2e 38 2e 30 73 76 6e 20 41 56     IBC: 1.8.0svn AV
     9e4:	52 5f 41 52 43 48 3a 20 61 76 72 35 0a 00           R_ARCH: avr5..

000009f2 <__c.2704>:
     9f2:	4f 50 54 49 4f 4e 53 3a 20 4c 55 46 41 20 42 4f     OPTIONS: LUFA BO
     a02:	4f 54 4d 41 47 49 43 20 4d 4f 55 53 45 4b 45 59     OTMAGIC MOUSEKEY
     a12:	20 45 58 54 52 41 4b 45 59 20 43 4f 4e 53 4f 4c      EXTRAKEY CONSOL
     a22:	45 20 43 4f 4d 4d 41 4e 44 20 34 30 39 36 0a 00     E COMMAND 4096..

00000a32 <__c.2702>:
     a32:	42 55 49 4c 44 3a 20 75 6e 6b 6e 6f 77 6e 20 28     BUILD: unknown (
     a42:	32 33 3a 34 34 3a 30 34 20 4a 75 6c 20 31 32 20     23:44:04 Jul 12 
     a52:	32 30 31 36 29 0a 00                                2016)..

00000a59 <__c.2700>:
     a59:	56 49 44 3a 20 30 78 46 45 45 44 28 47 75 73 74     VID: 0xFEED(Gust
     a69:	61 76 45 6b 29 20 50 49 44 3a 20 30 78 36 30 36     avEk) PID: 0x606
     a79:	30 28 5a 65 61 6c 69 6f 73 4d 61 73 74 65 72 72     0(ZealiosMasterr
     a89:	61 63 65 29 20 56 45 52 3a 20 30 78 30 30 30 31     ace) VER: 0x0001
     a99:	0a 00                                               ..

00000a9b <__c.2698>:
     a9b:	44 45 53 43 3a 20 74 2e 6d 2e 6b 2e 20 6b 65 79     DESC: t.m.k. key
     aab:	62 6f 61 72 64 20 66 69 72 6d 77 61 72 65 20 66     board firmware f
     abb:	6f 72 20 63 75 73 74 6f 6d 6b 65 79 62 6f 61 72     or customkeyboar
     acb:	64 0a 00                                            d..

00000ace <__c.2696>:
     ace:	0a 09 2d 20 56 65 72 73 69 6f 6e 20 2d 0a 00        ..- Version -..

00000add <__c.2693>:
     add:	0a 6d 6f 75 73 65 3a 20 6f 66 66 0a 00              .mouse: off..

00000aea <__c.2691>:
     aea:	0a 6d 6f 75 73 65 3a 20 6f 6e 0a 00                 .mouse: on..

00000af6 <__c.2688>:
     af6:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 66 66 0a 00     .keyboard: off..

00000b06 <__c.2686>:
     b06:	0a 6b 65 79 62 6f 61 72 64 3a 20 6f 6e 0a 00        .keyboard: on..

00000b15 <__c.2683>:
     b15:	0a 6d 61 74 72 69 78 3a 20 6f 66 66 0a 00           .matrix: off..

00000b23 <__c.2681>:
     b23:	0a 6d 61 74 72 69 78 3a 20 6f 6e 0a 00              .matrix: on..

00000b30 <__c.2678>:
     b30:	0a 64 65 62 75 67 3a 20 6f 6e 0a 00                 .debug: on..

00000b3c <__c.2676>:
     b3c:	0a 64 65 62 75 67 3a 20 6f 66 66 0a 00              .debug: off..

00000b49 <__c.2673>:
     b49:	0a 0a 62 6f 6f 74 6c 6f 61 64 65 72 2e 2e 2e 20     ..bootloader... 
     b59:	00                                                  .

00000b5a <__c.2670>:
     b5a:	43 3e 20 00                                         C> .

00000b5e <__c.2664>:
     b5e:	65 65 63 6f 6e 66 69 67 3a 0a 00 00                 eeconfig:...

00000b6a <__ctors_end>:
     b6a:	11 24       	eor	r1, r1
     b6c:	1f be       	out	0x3f, r1	; 63
     b6e:	cf ef       	ldi	r28, 0xFF	; 255
     b70:	da e0       	ldi	r29, 0x0A	; 10
     b72:	de bf       	out	0x3e, r29	; 62
     b74:	cd bf       	out	0x3d, r28	; 61

00000b76 <bootloader_jump_after_watchdog_reset>:

/* this runs before main() */
void bootloader_jump_after_watchdog_reset(void) __attribute__ ((used, naked, section (".init3")));
void bootloader_jump_after_watchdog_reset(void)
{
    if ((MCUSR & (1<<WDRF)) && reset_key == BOOTLOADER_RESET_KEY) {
     b76:	04 b6       	in	r0, 0x34	; 52
     b78:	03 fe       	sbrs	r0, 3
     b7a:	27 c0       	rjmp	.+78     	; 0xbca <__do_copy_data>
     b7c:	80 91 d6 01 	lds	r24, 0x01D6
     b80:	90 91 d7 01 	lds	r25, 0x01D7
     b84:	a0 91 d8 01 	lds	r26, 0x01D8
     b88:	b0 91 d9 01 	lds	r27, 0x01D9
     b8c:	87 30       	cpi	r24, 0x07	; 7
     b8e:	90 4b       	sbci	r25, 0xB0	; 176
     b90:	a7 40       	sbci	r26, 0x07	; 7
     b92:	b0 4b       	sbci	r27, 0xB0	; 176
     b94:	d1 f4       	brne	.+52     	; 0xbca <__do_copy_data>
        reset_key = 0;
     b96:	10 92 d6 01 	sts	0x01D6, r1
     b9a:	10 92 d7 01 	sts	0x01D7, r1
     b9e:	10 92 d8 01 	sts	0x01D8, r1
     ba2:	10 92 d9 01 	sts	0x01D9, r1

        // My custom USBasploader requires this to come up.
        MCUSR = 0;
     ba6:	14 be       	out	0x34, r1	; 52

        // Seems like Teensy halfkay loader requires clearing WDRF and disabling watchdog.
        MCUSR &= ~(1<<WDRF);
     ba8:	84 b7       	in	r24, 0x34	; 52
     baa:	87 7f       	andi	r24, 0xF7	; 247
     bac:	84 bf       	out	0x34, r24	; 52
		);
	}
	else
	{
        uint8_t register temp_reg;
		__asm__ __volatile__ (
     bae:	0f b6       	in	r0, 0x3f	; 63
     bb0:	f8 94       	cli
     bb2:	a8 95       	wdr
     bb4:	80 91 60 00 	lds	r24, 0x0060
     bb8:	88 61       	ori	r24, 0x18	; 24
     bba:	80 93 60 00 	sts	0x0060, r24
     bbe:	10 92 60 00 	sts	0x0060, r1
     bc2:	0f be       	out	0x3f, r0	; 63
        wdt_disable();

        // This is compled into 'icall', address should be in word unit, not byte.
        ((void (*)(void))(BOOTLOADER_START/2))();
     bc4:	e0 e0       	ldi	r30, 0x00	; 0
     bc6:	f8 e3       	ldi	r31, 0x38	; 56
     bc8:	09 95       	icall

00000bca <__do_copy_data>:
     bca:	11 e0       	ldi	r17, 0x01	; 1
     bcc:	a0 e0       	ldi	r26, 0x00	; 0
     bce:	b1 e0       	ldi	r27, 0x01	; 1
     bd0:	e2 e8       	ldi	r30, 0x82	; 130
     bd2:	f3 e5       	ldi	r31, 0x53	; 83
     bd4:	02 c0       	rjmp	.+4      	; 0xbda <__do_copy_data+0x10>
     bd6:	05 90       	lpm	r0, Z+
     bd8:	0d 92       	st	X+, r0
     bda:	a2 33       	cpi	r26, 0x32	; 50
     bdc:	b1 07       	cpc	r27, r17
     bde:	d9 f7       	brne	.-10     	; 0xbd6 <__do_copy_data+0xc>

00000be0 <__do_clear_bss>:
     be0:	21 e0       	ldi	r18, 0x01	; 1
     be2:	a2 e3       	ldi	r26, 0x32	; 50
     be4:	b1 e0       	ldi	r27, 0x01	; 1
     be6:	01 c0       	rjmp	.+2      	; 0xbea <.do_clear_bss_start>

00000be8 <.do_clear_bss_loop>:
     be8:	1d 92       	st	X+, r1

00000bea <.do_clear_bss_start>:
     bea:	a6 3d       	cpi	r26, 0xD6	; 214
     bec:	b2 07       	cpc	r27, r18
     bee:	e1 f7       	brne	.-8      	; 0xbe8 <.do_clear_bss_loop>
     bf0:	0e 94 22 0b 	call	0x1644	; 0x1644 <main>
     bf4:	0c 94 bf 29 	jmp	0x537e	; 0x537e <_exit>

00000bf8 <__bad_interrupt>:
     bf8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000bfc <xputc>:
	ldi	r24, 13		;
	rcall	1f		;
	ldi	r24, 10		;/
1:
#endif
	push	ZH
     bfc:	ff 93       	push	r31
	push	ZL
     bfe:	ef 93       	push	r30
	lds	ZL, xfunc_out+0	;Pointer to the registered output function.
     c00:	e0 91 32 01 	lds	r30, 0x0132
	lds	ZH, xfunc_out+1	;/
     c04:	f0 91 33 01 	lds	r31, 0x0133
	sbiw	ZL, 0		;Skip if null
     c08:	30 97       	sbiw	r30, 0x00	; 0
	breq	2f		;/
     c0a:	09 f0       	breq	.+2      	; 0xc0e <xputc+0x12>
	icall
     c0c:	09 95       	icall
2:	pop	ZL
     c0e:	ef 91       	pop	r30
	pop	ZH
     c10:	ff 91       	pop	r31
	ret
     c12:	08 95       	ret

00000c14 <xputs>:
;			);

.func xputs
.global xputs
xputs:
	_MOVW	ZH,ZL, r25,r24	; Z = pointer to rom string
     c14:	fc 01       	movw	r30, r24
1:	_LPMI	r24
     c16:	85 91       	lpm	r24, Z+
	cpi	r24, 0
     c18:	80 30       	cpi	r24, 0x00	; 0
	breq	2f
     c1a:	11 f0       	breq	.+4      	; 0xc20 <xputs+0xc>
	rcall	xputc
     c1c:	ef df       	rcall	.-34     	; 0xbfc <xputc>
	rjmp	1b
     c1e:	fb cf       	rjmp	.-10     	; 0xc16 <xputs+0x2>
2:	ret
     c20:	08 95       	ret

00000c22 <xitoa>:

.func xitoa
.global xitoa
xitoa:
				;r25:r22 = value, r20 = base, r18 = digits
	clr	r31		;r31 = stack level
     c22:	ff 27       	eor	r31, r31
	ldi	r30, ' '	;r30 = sign
     c24:	e0 e2       	ldi	r30, 0x20	; 32
	ldi	r19, ' '	;r19 = filler
     c26:	30 e2       	ldi	r19, 0x20	; 32
	sbrs	r20, 7		;When base indicates signd format and the value
     c28:	47 ff       	sbrs	r20, 7
	rjmp	0f		;is minus, add a '-'.
     c2a:	0c c0       	rjmp	.+24     	; 0xc44 <xitoa+0x22>
	neg	r20		;
     c2c:	41 95       	neg	r20
	sbrs	r25, 7		;
     c2e:	97 ff       	sbrs	r25, 7
	rjmp	0f		;
     c30:	09 c0       	rjmp	.+18     	; 0xc44 <xitoa+0x22>
	ldi	r30, '-'	;
     c32:	ed e2       	ldi	r30, 0x2D	; 45
	com	r22		;
     c34:	60 95       	com	r22
	com	r23		;
     c36:	70 95       	com	r23
	com	r24		;
     c38:	80 95       	com	r24
	com	r25		;
     c3a:	90 95       	com	r25
	adc	r22, r1		;
     c3c:	61 1d       	adc	r22, r1
	adc	r23, r1		;
     c3e:	71 1d       	adc	r23, r1
	adc	r24, r1		;
     c40:	81 1d       	adc	r24, r1
	adc	r25, r1		;/
     c42:	91 1d       	adc	r25, r1
0:	sbrs	r18, 7		;When digits indicates zero filled,
     c44:	27 ff       	sbrs	r18, 7
	rjmp	1f		;filler is '0'.
     c46:	02 c0       	rjmp	.+4      	; 0xc4c <xitoa+0x2a>
	neg	r18		;
     c48:	21 95       	neg	r18
	ldi	r19, '0'	;/
     c4a:	30 e3       	ldi	r19, 0x30	; 48
				;----- string conversion loop
1:	ldi	r21, 32		;r26 = r25:r22 % r20
     c4c:	50 e2       	ldi	r21, 0x20	; 32
	clr	r26		;r25:r22 /= r20
     c4e:	aa 27       	eor	r26, r26
2:	lsl	r22		;
     c50:	66 0f       	add	r22, r22
	rol	r23		;
     c52:	77 1f       	adc	r23, r23
	rol	r24		;
     c54:	88 1f       	adc	r24, r24
	rol	r25		;
     c56:	99 1f       	adc	r25, r25
	rol	r26		;
     c58:	aa 1f       	adc	r26, r26
	cp	r26, r20	;
     c5a:	a4 17       	cp	r26, r20
	brcs	3f		;
     c5c:	10 f0       	brcs	.+4      	; 0xc62 <xitoa+0x40>
	sub	r26, r20	;
     c5e:	a4 1b       	sub	r26, r20
	inc	r22		;
     c60:	63 95       	inc	r22
3:	dec	r21		;
     c62:	5a 95       	dec	r21
	brne	2b		;/
     c64:	a9 f7       	brne	.-22     	; 0xc50 <xitoa+0x2e>
	cpi	r26, 10		;r26 is a numeral digit '0'-'F'
     c66:	aa 30       	cpi	r26, 0x0A	; 10
	brcs	4f		;
     c68:	08 f0       	brcs	.+2      	; 0xc6c <xitoa+0x4a>
	subi	r26, -7		;
     c6a:	a9 5f       	subi	r26, 0xF9	; 249
4:	subi	r26, -'0'	;/
     c6c:	a0 5d       	subi	r26, 0xD0	; 208
	push	r26		;Stack it
     c6e:	af 93       	push	r26
	inc	r31		;/
     c70:	f3 95       	inc	r31
	cp	r22, r1		;Repeat until r25:r22 gets zero
     c72:	61 15       	cp	r22, r1
	cpc	r23, r1		;
     c74:	71 05       	cpc	r23, r1
	cpc	r24, r1		;
     c76:	81 05       	cpc	r24, r1
	cpc	r25, r1		;
     c78:	91 05       	cpc	r25, r1
	brne	1b		;/
     c7a:	41 f7       	brne	.-48     	; 0xc4c <xitoa+0x2a>

	cpi	r30, '-'	;Minus sign if needed
     c7c:	ed 32       	cpi	r30, 0x2D	; 45
	brne	5f		;
     c7e:	11 f4       	brne	.+4      	; 0xc84 <xitoa+0x62>
	push	r30		;
     c80:	ef 93       	push	r30
	inc	r31		;/
     c82:	f3 95       	inc	r31
5:	cp	r31, r18	;Filler
     c84:	f2 17       	cp	r31, r18
	brcc	6f		;
     c86:	18 f4       	brcc	.+6      	; 0xc8e <xitoa+0x6c>
	push	r19		;
     c88:	3f 93       	push	r19
	inc	r31		;
     c8a:	f3 95       	inc	r31
	rjmp	5b		;/
     c8c:	fb cf       	rjmp	.-10     	; 0xc84 <xitoa+0x62>

6:	pop	r24		;Flush stacked digits and exit
     c8e:	8f 91       	pop	r24
	rcall	xputc		;
     c90:	b5 df       	rcall	.-150    	; 0xbfc <xputc>
	dec	r31		;
     c92:	fa 95       	dec	r31
	brne	6b		;/
     c94:	e1 f7       	brne	.-8      	; 0xc8e <xitoa+0x6c>

	ret
     c96:	08 95       	ret

00000c98 <xvprintf>:

#if USE_XPRINTF

.func xvprintf
xvprintf:
	ld	ZL, Y+		;Z = pointer to format string
     c98:	e9 91       	ld	r30, Y+
	ld	ZH, Y+		;/
     c9a:	f9 91       	ld	r31, Y+

0:	_LPMI	r24		;Get a format char
     c9c:	85 91       	lpm	r24, Z+
	cpi	r24, 0		;End of format string?
     c9e:	80 30       	cpi	r24, 0x00	; 0
	breq	90f		;/
     ca0:	21 f0       	breq	.+8      	; 0xcaa <xvprintf+0x12>
	cpi	r24, '%'	;Is format?
     ca2:	85 32       	cpi	r24, 0x25	; 37
	breq	20f		;/
     ca4:	19 f0       	breq	.+6      	; 0xcac <xvprintf+0x14>
1:	rcall	xputc		;Put a normal character
     ca6:	aa df       	rcall	.-172    	; 0xbfc <xputc>
	rjmp	0b		;/
     ca8:	f9 cf       	rjmp	.-14     	; 0xc9c <xvprintf+0x4>
90:	ret
     caa:	08 95       	ret

20:	ldi	r18, 0		;r18: digits
     cac:	20 e0       	ldi	r18, 0x00	; 0
	clt			;T: filler
     cae:	e8 94       	clt
	_LPMI	r21		;Get flags
     cb0:	55 91       	lpm	r21, Z+
	cpi	r21, '%'	;Is a %?
     cb2:	55 32       	cpi	r21, 0x25	; 37
	breq	1b		;/
     cb4:	c1 f3       	breq	.-16     	; 0xca6 <xvprintf+0xe>
	cpi	r21, '0'	;Zero filled?
     cb6:	50 33       	cpi	r21, 0x30	; 48
	brne	23f		;
     cb8:	11 f4       	brne	.+4      	; 0xcbe <xvprintf+0x26>
	set			;/
     cba:	68 94       	set
22:	_LPMI	r21		;Get width
     cbc:	55 91       	lpm	r21, Z+
23:	cpi	r21, '9'+1	;
     cbe:	5a 33       	cpi	r21, 0x3A	; 58
	brcc	24f		;
     cc0:	48 f4       	brcc	.+18     	; 0xcd4 <xvprintf+0x3c>
	subi	r21, '0'	;
     cc2:	50 53       	subi	r21, 0x30	; 48
	brcs	90b		;
     cc4:	90 f3       	brcs	.-28     	; 0xcaa <xvprintf+0x12>
	lsl	r18		;
     cc6:	22 0f       	add	r18, r18
	mov	r0, r18		;
     cc8:	02 2e       	mov	r0, r18
	lsl	r18		;
     cca:	22 0f       	add	r18, r18
	lsl	r18		;
     ccc:	22 0f       	add	r18, r18
	add	r18, r0		;
     cce:	20 0d       	add	r18, r0
	add	r18, r21	;
     cd0:	25 0f       	add	r18, r21
	rjmp	22b		;/
     cd2:	f4 cf       	rjmp	.-24     	; 0xcbc <xvprintf+0x24>

24:	brtc	25f		;get value (low word)
     cd4:	0e f4       	brtc	.+2      	; 0xcd8 <xvprintf+0x40>
	neg	r18		;
     cd6:	21 95       	neg	r18
25:	ld	r24, Y+		;
     cd8:	89 91       	ld	r24, Y+
	ld	r25, Y+		;/
     cda:	99 91       	ld	r25, Y+
	cpi	r21, 'c'	;Is type character?
     cdc:	53 36       	cpi	r21, 0x63	; 99
	breq	1b		;/
     cde:	19 f3       	breq	.-58     	; 0xca6 <xvprintf+0xe>
	cpi	r21, 's'	;Is type RAM string?
     ce0:	53 37       	cpi	r21, 0x73	; 115
	breq	50f		;/
     ce2:	29 f1       	breq	.+74     	; 0xd2e <xvprintf+0x96>
	cpi	r21, 'S'	;Is type ROM string?
     ce4:	53 35       	cpi	r21, 0x53	; 83
	breq	60f		;/
     ce6:	59 f1       	breq	.+86     	; 0xd3e <xvprintf+0xa6>
	_MOVW	r23,r22,r25,r24	;r25:r22 = value
     ce8:	bc 01       	movw	r22, r24
	clr	r24		;
     cea:	88 27       	eor	r24, r24
	clr	r25		;
     cec:	99 27       	eor	r25, r25
	clt			;/
     cee:	e8 94       	clt
	cpi	r21, 'l'	;Is long int?
     cf0:	5c 36       	cpi	r21, 0x6C	; 108
	brne	26f		;
     cf2:	21 f4       	brne	.+8      	; 0xcfc <xvprintf+0x64>
	ld	r24, Y+		;get value (high word)
     cf4:	89 91       	ld	r24, Y+
	ld	r25, Y+		;
     cf6:	99 91       	ld	r25, Y+
	set			;
     cf8:	68 94       	set
	_LPMI	r21		;/
     cfa:	55 91       	lpm	r21, Z+
26:	cpi	r21, 'd'	;Is type signed decimal?
     cfc:	54 36       	cpi	r21, 0x64	; 100
	brne	27f		;/
     cfe:	39 f4       	brne	.+14     	; 0xd0e <xvprintf+0x76>
	ldi	r20, -10	;
     d00:	46 ef       	ldi	r20, 0xF6	; 246
	brts	40f		;
     d02:	7e f0       	brts	.+30     	; 0xd22 <xvprintf+0x8a>
	sbrs	r23, 7		;
     d04:	77 ff       	sbrs	r23, 7
	rjmp	40f		;
     d06:	0d c0       	rjmp	.+26     	; 0xd22 <xvprintf+0x8a>
	ldi	r24, -1		;
     d08:	8f ef       	ldi	r24, 0xFF	; 255
	ldi	r25, -1		;
     d0a:	9f ef       	ldi	r25, 0xFF	; 255
	rjmp	40f		;/
     d0c:	0a c0       	rjmp	.+20     	; 0xd22 <xvprintf+0x8a>
27:	cpi	r21, 'u'	;Is type unsigned decimal?
     d0e:	55 37       	cpi	r21, 0x75	; 117
	ldi	r20, 10		;
     d10:	4a e0       	ldi	r20, 0x0A	; 10
	breq	40f		;/
     d12:	39 f0       	breq	.+14     	; 0xd22 <xvprintf+0x8a>
	cpi	r21, 'X'	;Is type hexdecimal?
     d14:	58 35       	cpi	r21, 0x58	; 88
	ldi	r20, 16		;
     d16:	40 e1       	ldi	r20, 0x10	; 16
	breq	40f		;/
     d18:	21 f0       	breq	.+8      	; 0xd22 <xvprintf+0x8a>
	cpi	r21, 'b'	;Is type binary?
     d1a:	52 36       	cpi	r21, 0x62	; 98
	ldi	r20, 2		;
     d1c:	42 e0       	ldi	r20, 0x02	; 2
	breq	40f		;/
     d1e:	09 f0       	breq	.+2      	; 0xd22 <xvprintf+0x8a>
	ret			;abort
     d20:	08 95       	ret
40:	push	ZH		;Output the value
     d22:	ff 93       	push	r31
	push	ZL		;
     d24:	ef 93       	push	r30
	rcall	xitoa		;
     d26:	7d df       	rcall	.-262    	; 0xc22 <xitoa>
42:	pop	ZL		;
     d28:	ef 91       	pop	r30
	pop	ZH		;
     d2a:	ff 91       	pop	r31
	rjmp	0b		;/
     d2c:	b7 cf       	rjmp	.-146    	; 0xc9c <xvprintf+0x4>

50:	push	ZH		;Put a string on the RAM
     d2e:	ff 93       	push	r31
	push	ZL
     d30:	ef 93       	push	r30
	_MOVW	ZH,ZL, r25,r24
     d32:	fc 01       	movw	r30, r24
51:	ld	r24, Z+
     d34:	81 91       	ld	r24, Z+
	cpi	r24, 0
     d36:	80 30       	cpi	r24, 0x00	; 0
	breq	42b
     d38:	b9 f3       	breq	.-18     	; 0xd28 <xvprintf+0x90>
	rcall	xputc
     d3a:	60 df       	rcall	.-320    	; 0xbfc <xputc>
	rjmp	51b
     d3c:	fb cf       	rjmp	.-10     	; 0xd34 <xvprintf+0x9c>

60:	push	ZH		;Put a string on the ROM
     d3e:	ff 93       	push	r31
	push	ZL
     d40:	ef 93       	push	r30
	rcall	xputs
     d42:	68 df       	rcall	.-304    	; 0xc14 <xputs>
	rjmp	42b
     d44:	f1 cf       	rjmp	.-30     	; 0xd28 <xvprintf+0x90>

00000d46 <__xprintf>:


.func __xprintf
.global __xprintf
__xprintf:
	push	YH
     d46:	df 93       	push	r29
	push	YL
     d48:	cf 93       	push	r28
	in	YL, _SFR_IO_ADDR(SPL)
     d4a:	cd b7       	in	r28, 0x3d	; 61
#ifdef SPH
	in	YH, _SFR_IO_ADDR(SPH)
     d4c:	de b7       	in	r29, 0x3e	; 62
#else
	clr	YH
#endif
	adiw	YL, 5		;Y = pointer to arguments
     d4e:	25 96       	adiw	r28, 0x05	; 5
	rcall	xvprintf
     d50:	a3 df       	rcall	.-186    	; 0xc98 <xvprintf>
	pop	YL
     d52:	cf 91       	pop	r28
	pop	YH
     d54:	df 91       	pop	r29
	ret
     d56:	08 95       	ret

00000d58 <keymap_key_to_keycode>:


/* translates key to keycode */
uint8_t keymap_key_to_keycode(uint8_t layer, keypos_t key)
{
    return pgm_read_byte(&keymaps[(layer)][(key.row)][(key.col)]);
     d58:	e7 2f       	mov	r30, r23
     d5a:	f0 e0       	ldi	r31, 0x00	; 0
     d5c:	96 e0       	ldi	r25, 0x06	; 6
     d5e:	89 9f       	mul	r24, r25
     d60:	e0 0d       	add	r30, r0
     d62:	f1 1d       	adc	r31, r1
     d64:	11 24       	eor	r1, r1
     d66:	84 e0       	ldi	r24, 0x04	; 4
     d68:	ee 0f       	add	r30, r30
     d6a:	ff 1f       	adc	r31, r31
     d6c:	8a 95       	dec	r24
     d6e:	e1 f7       	brne	.-8      	; 0xd68 <keymap_key_to_keycode+0x10>
     d70:	e6 0f       	add	r30, r22
     d72:	f1 1d       	adc	r31, r1
     d74:	ee 51       	subi	r30, 0x1E	; 30
     d76:	ff 4f       	sbci	r31, 0xFF	; 255
     d78:	84 91       	lpm	r24, Z
}
     d7a:	08 95       	ret

00000d7c <keymap_fn_to_action>:

/* translates Fn keycode to action */
action_t keymap_fn_to_action(uint8_t keycode)
{
    return (action_t){ .code = pgm_read_word(&fn_actions[FN_INDEX(keycode)]) };
     d7c:	e8 2f       	mov	r30, r24
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	ee 0f       	add	r30, r30
     d82:	ff 1f       	adc	r31, r31
     d84:	e0 5a       	subi	r30, 0xA0	; 160
     d86:	f0 40       	sbci	r31, 0x00	; 0
}
     d88:	85 91       	lpm	r24, Z+
     d8a:	94 91       	lpm	r25, Z
     d8c:	08 95       	ret

00000d8e <unselect_rows>:
 * pin: D0  D1  D2  D3  D5
 */
static void unselect_rows(void)
{
    // Hi-Z(DDR:0, PORT:0) to unselect
    DDRF  &= ~0b11110011;
     d8e:	80 b3       	in	r24, 0x10	; 16
     d90:	8c 70       	andi	r24, 0x0C	; 12
     d92:	80 bb       	out	0x10, r24	; 16
    PORTF &= ~0b11110011;
     d94:	81 b3       	in	r24, 0x11	; 17
     d96:	8c 70       	andi	r24, 0x0C	; 12
     d98:	81 bb       	out	0x11, r24	; 17
     d9a:	08 95       	ret

00000d9c <matrix_init>:
    return MATRIX_COLS;
}

void matrix_init(void)
{
    MCUCR |= (1<<JTD);
     d9c:	85 b7       	in	r24, 0x35	; 53
     d9e:	80 68       	ori	r24, 0x80	; 128
     da0:	85 bf       	out	0x35, r24	; 53
    MCUCR |= (1<<JTD);
     da2:	85 b7       	in	r24, 0x35	; 53
     da4:	80 68       	ori	r24, 0x80	; 128
     da6:	85 bf       	out	0x35, r24	; 53
    debug_enable = true;
     da8:	80 91 b7 01 	lds	r24, 0x01B7
    debug_matrix = true; 
     dac:	81 60       	ori	r24, 0x01	; 1
     dae:	82 60       	ori	r24, 0x02	; 2
     db0:	80 93 b7 01 	sts	0x01B7, r24
    // initialize row and col
    unselect_rows();
     db4:	0e 94 c7 06 	call	0xd8e	; 0xd8e <unselect_rows>
 * pin:                                 B7                      (Rev.B)
 */
static void  init_cols(void)
{
    // Input with pull-up(DDR:0, PORT:1)
    DDRD  &= ~(1<<7 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     db8:	8a b1       	in	r24, 0x0a	; 10
     dba:	80 74       	andi	r24, 0x40	; 64
     dbc:	8a b9       	out	0x0a, r24	; 10
    PORTD |=  (1<<7 | 1<<5 | 1<<4 | 1<<3 | 1<<2 | 1<<1 | 1<<0);
     dbe:	8b b1       	in	r24, 0x0b	; 11
     dc0:	8f 6b       	ori	r24, 0xBF	; 191
     dc2:	8b b9       	out	0x0b, r24	; 11
    DDRC  &= ~(1<<7 | 1<<6);
     dc4:	87 b1       	in	r24, 0x07	; 7
     dc6:	8f 73       	andi	r24, 0x3F	; 63
     dc8:	87 b9       	out	0x07, r24	; 7
    PORTC |=  (1<<7 | 1<<6);
     dca:	88 b1       	in	r24, 0x08	; 8
     dcc:	80 6c       	ori	r24, 0xC0	; 192
     dce:	88 b9       	out	0x08, r24	; 8
    DDRE  &= ~(1<<6);
     dd0:	6e 98       	cbi	0x0d, 6	; 13
    PORTE |=  (1<<6);
     dd2:	76 9a       	sbi	0x0e, 6	; 14
    DDRB  &= ~(1<<7 | 1<<5 | 1<<4 | 1<<3 |1<<2 | 1<<1);
     dd4:	84 b1       	in	r24, 0x04	; 4
     dd6:	81 74       	andi	r24, 0x41	; 65
     dd8:	84 b9       	out	0x04, r24	; 4
    PORTB |=  (1<<7 | 1<<5 | 1<<4 | 1<<3 |1<<2 | 1<<1);
     dda:	85 b1       	in	r24, 0x05	; 5
     ddc:	8e 6b       	ori	r24, 0xBE	; 190
     dde:	85 b9       	out	0x05, r24	; 5
     de0:	e0 e4       	ldi	r30, 0x40	; 64
     de2:	f1 e0       	ldi	r31, 0x01	; 1
     de4:	a4 e3       	ldi	r26, 0x34	; 52
     de6:	b1 e0       	ldi	r27, 0x01	; 1
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
        matrix[i] = 0;
     de8:	11 92       	st	Z+, r1
     dea:	11 92       	st	Z+, r1
        matrix_debouncing[i] = 0;
     dec:	1d 92       	st	X+, r1
     dee:	1d 92       	st	X+, r1
    // initialize row and col
    unselect_rows();
    init_cols();

    // initialize matrix state: all keys off
    for (uint8_t i=0; i < MATRIX_ROWS; i++) {
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	ec 34       	cpi	r30, 0x4C	; 76
     df4:	f8 07       	cpc	r31, r24
     df6:	c1 f7       	brne	.-16     	; 0xde8 <matrix_init+0x4c>
        matrix[i] = 0;
        matrix_debouncing[i] = 0;
    }
}
     df8:	08 95       	ret

00000dfa <matrix_scan>:

uint8_t matrix_scan(void)
{
     dfa:	3f 92       	push	r3
     dfc:	4f 92       	push	r4
     dfe:	5f 92       	push	r5
     e00:	6f 92       	push	r6
     e02:	7f 92       	push	r7
     e04:	8f 92       	push	r8
     e06:	9f 92       	push	r9
     e08:	af 92       	push	r10
     e0a:	bf 92       	push	r11
     e0c:	cf 92       	push	r12
     e0e:	df 92       	push	r13
     e10:	ef 92       	push	r14
     e12:	ff 92       	push	r15
     e14:	0f 93       	push	r16
     e16:	1f 93       	push	r17
     e18:	cf 93       	push	r28
     e1a:	df 93       	push	r29
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	2e 97       	sbiw	r28, 0x0e	; 14
     e22:	0f b6       	in	r0, 0x3f	; 63
     e24:	f8 94       	cli
     e26:	de bf       	out	0x3e, r29	; 62
     e28:	0f be       	out	0x3f, r0	; 63
     e2a:	cd bf       	out	0x3d, r28	; 61
     e2c:	24 e3       	ldi	r18, 0x34	; 52
     e2e:	31 e0       	ldi	r19, 0x01	; 1
     e30:	3a 83       	std	Y+2, r19	; 0x02
     e32:	29 83       	std	Y+1, r18	; 0x01
     e34:	3c 87       	std	Y+12, r19	; 0x0c
     e36:	2b 87       	std	Y+11, r18	; 0x0b
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
     e38:	10 e0       	ldi	r17, 0x00	; 0
           (PIND&(1<<1) ? 0 : (1<<5))  |
           (PIND&(1<<0) ? 0 : (1<<4))  |
	   (PINB&(1<<7) ? 0 : (1<<3))  |
	   (PINB&(1<<3) ? 0 : (1<<2))  |
	   (PINB&(1<<2) ? 0 : (1<<1))  |
	   (PINE&(1<<6) ? 0 : (1<<0));
     e3a:	01 e0       	ldi	r16, 0x01	; 1
}

static void select_row(uint8_t row)
{
    // Output low(DDR:1, PORT:0) to select
    switch (row) {
     e3c:	13 30       	cpi	r17, 0x03	; 3
     e3e:	99 f0       	breq	.+38     	; 0xe66 <matrix_scan+0x6c>
     e40:	28 f4       	brcc	.+10     	; 0xe4c <matrix_scan+0x52>
     e42:	11 30       	cpi	r17, 0x01	; 1
     e44:	51 f0       	breq	.+20     	; 0xe5a <matrix_scan+0x60>
     e46:	12 30       	cpi	r17, 0x02	; 2
     e48:	59 f0       	breq	.+22     	; 0xe60 <matrix_scan+0x66>
     e4a:	04 c0       	rjmp	.+8      	; 0xe54 <matrix_scan+0x5a>
     e4c:	14 30       	cpi	r17, 0x04	; 4
     e4e:	71 f0       	breq	.+28     	; 0xe6c <matrix_scan+0x72>
     e50:	15 30       	cpi	r17, 0x05	; 5
     e52:	79 f0       	breq	.+30     	; 0xe72 <matrix_scan+0x78>
        case 0:
            DDRF  |= (1<<0);
     e54:	80 9a       	sbi	0x10, 0	; 16
            PORTF &= ~(1<<0);
     e56:	88 98       	cbi	0x11, 0	; 17
     e58:	0e c0       	rjmp	.+28     	; 0xe76 <matrix_scan+0x7c>
            break;
        case 1:
            DDRF  |= (1<<1);
     e5a:	81 9a       	sbi	0x10, 1	; 16
            PORTF &= ~(1<<1);
     e5c:	89 98       	cbi	0x11, 1	; 17
     e5e:	0b c0       	rjmp	.+22     	; 0xe76 <matrix_scan+0x7c>
            break;
        case 2:
            DDRF  |= (1<<4);
     e60:	84 9a       	sbi	0x10, 4	; 16
            PORTF &= ~(1<<4);
     e62:	8c 98       	cbi	0x11, 4	; 17
     e64:	08 c0       	rjmp	.+16     	; 0xe76 <matrix_scan+0x7c>
            break;
        case 3:
            DDRF  |= (1<<5);
     e66:	85 9a       	sbi	0x10, 5	; 16
            PORTF &= ~(1<<5);
     e68:	8d 98       	cbi	0x11, 5	; 17
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <matrix_scan+0x7c>
            break;
        case 4:
            DDRF  |= (1<<6);
     e6c:	86 9a       	sbi	0x10, 6	; 16
            PORTF &= ~(1<<6);
     e6e:	8e 98       	cbi	0x11, 6	; 17
     e70:	02 c0       	rjmp	.+4      	; 0xe76 <matrix_scan+0x7c>
            break;
        case 5:
            DDRF  |= (1<<7);
     e72:	87 9a       	sbi	0x10, 7	; 16
            PORTF &= ~(1<<7);
     e74:	8f 98       	cbi	0x11, 7	; 17
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e76:	30 ea       	ldi	r19, 0xA0	; 160
     e78:	3a 95       	dec	r19
     e7a:	f1 f7       	brne	.-4      	; 0xe78 <matrix_scan+0x7e>
  B: 7   3 2 1

*/
static matrix_row_t read_cols(void)
{
    return (PINB&(1<<5) ? 0 : (1<<15)) |
     e7c:	1d 99       	sbic	0x03, 5	; 3
     e7e:	04 c0       	rjmp	.+8      	; 0xe88 <matrix_scan+0x8e>
     e80:	c1 2c       	mov	r12, r1
     e82:	40 e8       	ldi	r20, 0x80	; 128
     e84:	d4 2e       	mov	r13, r20
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <matrix_scan+0x92>
     e88:	c1 2c       	mov	r12, r1
     e8a:	d1 2c       	mov	r13, r1
           (PINB&(1<<4) ? 0 : (1<<14)) |
     e8c:	1c 99       	sbic	0x03, 4	; 3
     e8e:	04 c0       	rjmp	.+8      	; 0xe98 <matrix_scan+0x9e>
     e90:	a1 2c       	mov	r10, r1
     e92:	30 e4       	ldi	r19, 0x40	; 64
     e94:	b3 2e       	mov	r11, r19
     e96:	02 c0       	rjmp	.+4      	; 0xe9c <matrix_scan+0xa2>
     e98:	a1 2c       	mov	r10, r1
     e9a:	b1 2c       	mov	r11, r1
           (PIND&(1<<7) ? 0 : (1<<13)) |
     e9c:	49 b1       	in	r20, 0x09	; 9
     e9e:	04 2e       	mov	r0, r20
     ea0:	00 0c       	add	r0, r0
     ea2:	55 0b       	sbc	r21, r21
     ea4:	40 95       	com	r20
     ea6:	50 95       	com	r21
     ea8:	44 27       	eor	r20, r20
     eaa:	55 0f       	add	r21, r21
     eac:	44 1f       	adc	r20, r20
     eae:	55 27       	eor	r21, r21
     eb0:	54 2f       	mov	r21, r20
     eb2:	44 27       	eor	r20, r20
     eb4:	52 95       	swap	r21
     eb6:	55 0f       	add	r21, r21
     eb8:	50 7e       	andi	r21, 0xE0	; 224
           (PIND&(1<<4) ? 0 : (1<<12)) |
     eba:	4c 99       	sbic	0x09, 4	; 9
     ebc:	04 c0       	rjmp	.+8      	; 0xec6 <matrix_scan+0xcc>
     ebe:	81 2c       	mov	r8, r1
     ec0:	80 e1       	ldi	r24, 0x10	; 16
     ec2:	98 2e       	mov	r9, r24
     ec4:	02 c0       	rjmp	.+4      	; 0xeca <matrix_scan+0xd0>
     ec6:	81 2c       	mov	r8, r1
     ec8:	91 2c       	mov	r9, r1
           (PINB&(1<<1) ? 0 : (1<<11)) |
     eca:	19 99       	sbic	0x03, 1	; 3
     ecc:	04 c0       	rjmp	.+8      	; 0xed6 <matrix_scan+0xdc>
     ece:	61 2c       	mov	r6, r1
     ed0:	b8 e0       	ldi	r27, 0x08	; 8
     ed2:	7b 2e       	mov	r7, r27
     ed4:	02 c0       	rjmp	.+4      	; 0xeda <matrix_scan+0xe0>
     ed6:	61 2c       	mov	r6, r1
     ed8:	71 2c       	mov	r7, r1
           (PIND&(1<<5) ? 0 : (1<<10)) |
     eda:	4d 99       	sbic	0x09, 5	; 9
     edc:	04 c0       	rjmp	.+8      	; 0xee6 <matrix_scan+0xec>
     ede:	41 2c       	mov	r4, r1
     ee0:	a4 e0       	ldi	r26, 0x04	; 4
     ee2:	5a 2e       	mov	r5, r26
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <matrix_scan+0xf0>
     ee6:	41 2c       	mov	r4, r1
     ee8:	51 2c       	mov	r5, r1
           (PINC&(1<<7) ? 0 : (1<<9))  |
     eea:	26 b1       	in	r18, 0x06	; 6
     eec:	02 2e       	mov	r0, r18
     eee:	00 0c       	add	r0, r0
     ef0:	33 0b       	sbc	r19, r19
     ef2:	20 95       	com	r18
     ef4:	30 95       	com	r19
     ef6:	22 27       	eor	r18, r18
     ef8:	33 0f       	add	r19, r19
     efa:	22 1f       	adc	r18, r18
     efc:	33 27       	eor	r19, r19
     efe:	32 2f       	mov	r19, r18
     f00:	22 27       	eor	r18, r18
     f02:	33 0f       	add	r19, r19
           (PINC&(1<<6) ? 0 : (1<<8))  |
     f04:	36 99       	sbic	0x06, 6	; 6
     f06:	05 c0       	rjmp	.+10     	; 0xf12 <matrix_scan+0x118>
     f08:	80 e0       	ldi	r24, 0x00	; 0
     f0a:	91 e0       	ldi	r25, 0x01	; 1
     f0c:	9c 83       	std	Y+4, r25	; 0x04
     f0e:	8b 83       	std	Y+3, r24	; 0x03
     f10:	02 c0       	rjmp	.+4      	; 0xf16 <matrix_scan+0x11c>
     f12:	1c 82       	std	Y+4, r1	; 0x04
     f14:	1b 82       	std	Y+3, r1	; 0x03
 	   (PIND&(1<<3) ? 0 : (1<<7))  |
     f16:	4b 99       	sbic	0x09, 3	; 9
     f18:	05 c0       	rjmp	.+10     	; 0xf24 <matrix_scan+0x12a>
     f1a:	a0 e8       	ldi	r26, 0x80	; 128
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
     f1e:	be 83       	std	Y+6, r27	; 0x06
     f20:	ad 83       	std	Y+5, r26	; 0x05
     f22:	02 c0       	rjmp	.+4      	; 0xf28 <matrix_scan+0x12e>
     f24:	1e 82       	std	Y+6, r1	; 0x06
     f26:	1d 82       	std	Y+5, r1	; 0x05
           (PIND&(1<<2) ? 0 : (1<<6))  |
     f28:	4a 99       	sbic	0x09, 2	; 9
     f2a:	05 c0       	rjmp	.+10     	; 0xf36 <matrix_scan+0x13c>
     f2c:	e0 e4       	ldi	r30, 0x40	; 64
     f2e:	f0 e0       	ldi	r31, 0x00	; 0
     f30:	f8 87       	std	Y+8, r31	; 0x08
     f32:	ef 83       	std	Y+7, r30	; 0x07
     f34:	02 c0       	rjmp	.+4      	; 0xf3a <matrix_scan+0x140>
     f36:	18 86       	std	Y+8, r1	; 0x08
     f38:	1f 82       	std	Y+7, r1	; 0x07
           (PIND&(1<<1) ? 0 : (1<<5))  |
     f3a:	49 99       	sbic	0x09, 1	; 9
     f3c:	04 c0       	rjmp	.+8      	; 0xf46 <matrix_scan+0x14c>
     f3e:	70 e2       	ldi	r23, 0x20	; 32
     f40:	e7 2e       	mov	r14, r23
     f42:	f1 2c       	mov	r15, r1
     f44:	02 c0       	rjmp	.+4      	; 0xf4a <matrix_scan+0x150>
     f46:	e1 2c       	mov	r14, r1
     f48:	f1 2c       	mov	r15, r1
           (PIND&(1<<0) ? 0 : (1<<4))  |
     f4a:	48 99       	sbic	0x09, 0	; 9
     f4c:	05 c0       	rjmp	.+10     	; 0xf58 <matrix_scan+0x15e>
     f4e:	80 e1       	ldi	r24, 0x10	; 16
     f50:	90 e0       	ldi	r25, 0x00	; 0
     f52:	9e 87       	std	Y+14, r25	; 0x0e
     f54:	8d 87       	std	Y+13, r24	; 0x0d
     f56:	02 c0       	rjmp	.+4      	; 0xf5c <matrix_scan+0x162>
     f58:	1e 86       	std	Y+14, r1	; 0x0e
     f5a:	1d 86       	std	Y+13, r1	; 0x0d
	   (PINB&(1<<7) ? 0 : (1<<3))  |
     f5c:	83 b1       	in	r24, 0x03	; 3
     f5e:	08 2e       	mov	r0, r24
     f60:	00 0c       	add	r0, r0
     f62:	99 0b       	sbc	r25, r25
     f64:	80 95       	com	r24
     f66:	90 95       	com	r25
     f68:	88 27       	eor	r24, r24
     f6a:	99 0f       	add	r25, r25
     f6c:	88 1f       	adc	r24, r24
     f6e:	99 27       	eor	r25, r25
     f70:	63 e0       	ldi	r22, 0x03	; 3
     f72:	88 0f       	add	r24, r24
     f74:	99 1f       	adc	r25, r25
     f76:	6a 95       	dec	r22
     f78:	e1 f7       	brne	.-8      	; 0xf72 <matrix_scan+0x178>
	   (PINB&(1<<3) ? 0 : (1<<2))  |
     f7a:	1b 99       	sbic	0x03, 3	; 3
     f7c:	03 c0       	rjmp	.+6      	; 0xf84 <matrix_scan+0x18a>
     f7e:	e4 e0       	ldi	r30, 0x04	; 4
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	02 c0       	rjmp	.+4      	; 0xf88 <matrix_scan+0x18e>
     f84:	e0 e0       	ldi	r30, 0x00	; 0
     f86:	f0 e0       	ldi	r31, 0x00	; 0
	   (PINB&(1<<2) ? 0 : (1<<1))  |
     f88:	1a 99       	sbic	0x03, 2	; 3
     f8a:	03 c0       	rjmp	.+6      	; 0xf92 <matrix_scan+0x198>
     f8c:	62 e0       	ldi	r22, 0x02	; 2
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	02 c0       	rjmp	.+4      	; 0xf96 <matrix_scan+0x19c>
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	70 e0       	ldi	r23, 0x00	; 0
	   (PINE&(1<<6) ? 0 : (1<<0));
     f96:	3c b0       	in	r3, 0x0c	; 12
     f98:	32 94       	swap	r3
     f9a:	36 94       	lsr	r3
     f9c:	36 94       	lsr	r3
     f9e:	a3 e0       	ldi	r26, 0x03	; 3
     fa0:	3a 22       	and	r3, r26
     fa2:	30 26       	eor	r3, r16
     fa4:	a3 2d       	mov	r26, r3
     fa6:	a1 70       	andi	r26, 0x01	; 1
     fa8:	a9 87       	std	Y+9, r26	; 0x09
     faa:	1a 86       	std	Y+10, r1	; 0x0a
     fac:	a9 85       	ldd	r26, Y+9	; 0x09
     fae:	ba 85       	ldd	r27, Y+10	; 0x0a
     fb0:	ca 2a       	or	r12, r26
     fb2:	db 2a       	or	r13, r27
     fb4:	ca 28       	or	r12, r10
     fb6:	db 28       	or	r13, r11
     fb8:	c4 2a       	or	r12, r20
     fba:	d5 2a       	or	r13, r21
     fbc:	c8 28       	or	r12, r8
     fbe:	d9 28       	or	r13, r9
     fc0:	c6 28       	or	r12, r6
     fc2:	d7 28       	or	r13, r7
     fc4:	c4 28       	or	r12, r4
     fc6:	d5 28       	or	r13, r5
     fc8:	c2 2a       	or	r12, r18
     fca:	d3 2a       	or	r13, r19
     fcc:	2b 81       	ldd	r18, Y+3	; 0x03
     fce:	3c 81       	ldd	r19, Y+4	; 0x04
     fd0:	c2 2a       	or	r12, r18
     fd2:	d3 2a       	or	r13, r19
     fd4:	ad 81       	ldd	r26, Y+5	; 0x05
     fd6:	be 81       	ldd	r27, Y+6	; 0x06
     fd8:	ca 2a       	or	r12, r26
     fda:	db 2a       	or	r13, r27
     fdc:	2f 81       	ldd	r18, Y+7	; 0x07
     fde:	38 85       	ldd	r19, Y+8	; 0x08
     fe0:	c2 2a       	or	r12, r18
     fe2:	d3 2a       	or	r13, r19
     fe4:	ce 28       	or	r12, r14
     fe6:	df 28       	or	r13, r15
     fe8:	ad 85       	ldd	r26, Y+13	; 0x0d
     fea:	be 85       	ldd	r27, Y+14	; 0x0e
     fec:	ac 29       	or	r26, r12
     fee:	bd 29       	or	r27, r13
     ff0:	8a 2b       	or	r24, r26
     ff2:	9b 2b       	or	r25, r27
     ff4:	8e 2b       	or	r24, r30
     ff6:	9f 2b       	or	r25, r31
           (PIND&(1<<2) ? 0 : (1<<6))  |
           (PIND&(1<<1) ? 0 : (1<<5))  |
           (PIND&(1<<0) ? 0 : (1<<4))  |
	   (PINB&(1<<7) ? 0 : (1<<3))  |
	   (PINB&(1<<3) ? 0 : (1<<2))  |
	   (PINB&(1<<2) ? 0 : (1<<1))  |
     ff8:	68 2b       	or	r22, r24
     ffa:	79 2b       	or	r23, r25
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
        select_row(i);
        _delay_us(30);  // without this wait read unstable value.
        matrix_row_t cols = read_cols();
        if (matrix_debouncing[i] != cols) {
     ffc:	ab 85       	ldd	r26, Y+11	; 0x0b
     ffe:	bc 85       	ldd	r27, Y+12	; 0x0c
    1000:	8d 91       	ld	r24, X+
    1002:	9c 91       	ld	r25, X
    1004:	11 97       	sbiw	r26, 0x01	; 1
    1006:	86 17       	cp	r24, r22
    1008:	97 07       	cpc	r25, r23
    100a:	59 f1       	breq	.+86     	; 0x1062 <matrix_scan+0x268>
            matrix_debouncing[i] = cols;
    100c:	6d 93       	st	X+, r22
    100e:	7c 93       	st	X, r23
            if (debouncing) {
    1010:	80 91 00 01 	lds	r24, 0x0100
    1014:	88 23       	and	r24, r24
    1016:	11 f1       	breq	.+68     	; 0x105c <matrix_scan+0x262>
                debug("bounce!: "); debug_hex(debouncing); debug("\n");
    1018:	80 91 b7 01 	lds	r24, 0x01B7
    101c:	80 ff       	sbrs	r24, 0
    101e:	04 c0       	rjmp	.+8      	; 0x1028 <matrix_scan+0x22e>
    1020:	80 ed       	ldi	r24, 0xD0	; 208
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    1028:	80 91 b7 01 	lds	r24, 0x01B7
    102c:	80 ff       	sbrs	r24, 0
    102e:	0e c0       	rjmp	.+28     	; 0x104c <matrix_scan+0x252>
    1030:	80 91 00 01 	lds	r24, 0x0100
    1034:	1f 92       	push	r1
    1036:	8f 93       	push	r24
    1038:	ab ec       	ldi	r26, 0xCB	; 203
    103a:	b1 e0       	ldi	r27, 0x01	; 1
    103c:	bf 93       	push	r27
    103e:	af 93       	push	r26
    1040:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    1044:	0f 90       	pop	r0
    1046:	0f 90       	pop	r0
    1048:	0f 90       	pop	r0
    104a:	0f 90       	pop	r0
    104c:	80 91 b7 01 	lds	r24, 0x01B7
    1050:	80 ff       	sbrs	r24, 0
    1052:	04 c0       	rjmp	.+8      	; 0x105c <matrix_scan+0x262>
    1054:	89 ec       	ldi	r24, 0xC9	; 201
    1056:	91 e0       	ldi	r25, 0x01	; 1
    1058:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            }
            debouncing = DEBOUNCE;
    105c:	85 e0       	ldi	r24, 0x05	; 5
    105e:	80 93 00 01 	sts	0x0100, r24
        }
        unselect_rows();
    1062:	0e 94 c7 06 	call	0xd8e	; 0xd8e <unselect_rows>
    }
}

uint8_t matrix_scan(void)
{
    for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    1066:	1f 5f       	subi	r17, 0xFF	; 255
    1068:	2b 85       	ldd	r18, Y+11	; 0x0b
    106a:	3c 85       	ldd	r19, Y+12	; 0x0c
    106c:	2e 5f       	subi	r18, 0xFE	; 254
    106e:	3f 4f       	sbci	r19, 0xFF	; 255
    1070:	3c 87       	std	Y+12, r19	; 0x0c
    1072:	2b 87       	std	Y+11, r18	; 0x0b
    1074:	16 30       	cpi	r17, 0x06	; 6
    1076:	09 f0       	breq	.+2      	; 0x107a <matrix_scan+0x280>
    1078:	e1 ce       	rjmp	.-574    	; 0xe3c <matrix_scan+0x42>
            debouncing = DEBOUNCE;
        }
        unselect_rows();
    }

    if (debouncing) {
    107a:	80 91 00 01 	lds	r24, 0x0100
    107e:	88 23       	and	r24, r24
    1080:	c9 f0       	breq	.+50     	; 0x10b4 <matrix_scan+0x2ba>
        if (--debouncing) {
    1082:	81 50       	subi	r24, 0x01	; 1
    1084:	80 93 00 01 	sts	0x0100, r24
    1088:	88 23       	and	r24, r24
    108a:	39 f0       	breq	.+14     	; 0x109a <matrix_scan+0x2a0>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    108c:	8f e9       	ldi	r24, 0x9F	; 159
    108e:	9f e0       	ldi	r25, 0x0F	; 15
    1090:	01 97       	sbiw	r24, 0x01	; 1
    1092:	f1 f7       	brne	.-4      	; 0x1090 <matrix_scan+0x296>
    1094:	00 c0       	rjmp	.+0      	; 0x1096 <matrix_scan+0x29c>
    1096:	00 00       	nop
    1098:	0d c0       	rjmp	.+26     	; 0x10b4 <matrix_scan+0x2ba>
    109a:	e0 e4       	ldi	r30, 0x40	; 64
    109c:	f1 e0       	ldi	r31, 0x01	; 1
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
                matrix[i] = matrix_debouncing[i];
    109e:	a9 81       	ldd	r26, Y+1	; 0x01
    10a0:	ba 81       	ldd	r27, Y+2	; 0x02
    10a2:	8d 91       	ld	r24, X+
    10a4:	9d 91       	ld	r25, X+
    10a6:	ba 83       	std	Y+2, r27	; 0x02
    10a8:	a9 83       	std	Y+1, r26	; 0x01
    10aa:	81 93       	st	Z+, r24
    10ac:	91 93       	st	Z+, r25

    if (debouncing) {
        if (--debouncing) {
            _delay_ms(1);
        } else {
            for (uint8_t i = 0; i < MATRIX_ROWS; i++) {
    10ae:	a0 54       	subi	r26, 0x40	; 64
    10b0:	b1 40       	sbci	r27, 0x01	; 1
    10b2:	a9 f7       	brne	.-22     	; 0x109e <matrix_scan+0x2a4>
            }
        }
    }

    return 1;
}
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	2e 96       	adiw	r28, 0x0e	; 14
    10b8:	0f b6       	in	r0, 0x3f	; 63
    10ba:	f8 94       	cli
    10bc:	de bf       	out	0x3e, r29	; 62
    10be:	0f be       	out	0x3f, r0	; 63
    10c0:	cd bf       	out	0x3d, r28	; 61
    10c2:	df 91       	pop	r29
    10c4:	cf 91       	pop	r28
    10c6:	1f 91       	pop	r17
    10c8:	0f 91       	pop	r16
    10ca:	ff 90       	pop	r15
    10cc:	ef 90       	pop	r14
    10ce:	df 90       	pop	r13
    10d0:	cf 90       	pop	r12
    10d2:	bf 90       	pop	r11
    10d4:	af 90       	pop	r10
    10d6:	9f 90       	pop	r9
    10d8:	8f 90       	pop	r8
    10da:	7f 90       	pop	r7
    10dc:	6f 90       	pop	r6
    10de:	5f 90       	pop	r5
    10e0:	4f 90       	pop	r4
    10e2:	3f 90       	pop	r3
    10e4:	08 95       	ret

000010e6 <matrix_get_row>:
}

inline
matrix_row_t matrix_get_row(uint8_t row)
{
    return matrix[row];
    10e6:	e8 2f       	mov	r30, r24
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	e0 5c       	subi	r30, 0xC0	; 192
    10f0:	fe 4f       	sbci	r31, 0xFE	; 254
}
    10f2:	80 81       	ld	r24, Z
    10f4:	91 81       	ldd	r25, Z+1	; 0x01
    10f6:	08 95       	ret

000010f8 <matrix_print>:

void matrix_print(void)
{
    10f8:	cf 92       	push	r12
    10fa:	df 92       	push	r13
    10fc:	ef 92       	push	r14
    10fe:	ff 92       	push	r15
    1100:	0f 93       	push	r16
    1102:	1f 93       	push	r17
    1104:	cf 93       	push	r28
    1106:	df 93       	push	r29
    print("\nr/c 0123456789ABCDEF\n");
    1108:	82 eb       	ldi	r24, 0xB2	; 178
    110a:	91 e0       	ldi	r25, 0x01	; 1
    110c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    1110:	80 e4       	ldi	r24, 0x40	; 64
    1112:	e8 2e       	mov	r14, r24
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	f8 2e       	mov	r15, r24
    1118:	c0 e0       	ldi	r28, 0x00	; 0
    111a:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    111c:	9d ea       	ldi	r25, 0xAD	; 173
    111e:	c9 2e       	mov	r12, r25
    1120:	91 e0       	ldi	r25, 0x01	; 1
    1122:	d9 2e       	mov	r13, r25
        pbin_reverse16(matrix_get_row(row));
    1124:	04 ea       	ldi	r16, 0xA4	; 164
    1126:	11 e0       	ldi	r17, 0x01	; 1

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
        phex(row); print(": ");
    1128:	df 93       	push	r29
    112a:	cf 93       	push	r28
    112c:	df 92       	push	r13
    112e:	cf 92       	push	r12
    1130:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    1134:	8a ea       	ldi	r24, 0xAA	; 170
    1136:	91 e0       	ldi	r25, 0x01	; 1
    1138:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
        pbin_reverse16(matrix_get_row(row));
    113c:	f7 01       	movw	r30, r14
    113e:	81 91       	ld	r24, Z+
    1140:	91 91       	ld	r25, Z+
    1142:	7f 01       	movw	r14, r30
    1144:	0e 94 30 1c 	call	0x3860	; 0x3860 <bitrev16>
    1148:	9f 93       	push	r25
    114a:	8f 93       	push	r24
    114c:	1f 93       	push	r17
    114e:	0f 93       	push	r16
    1150:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
        print("\n");
    1154:	82 ea       	ldi	r24, 0xA2	; 162
    1156:	91 e0       	ldi	r25, 0x01	; 1
    1158:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    115c:	21 96       	adiw	r28, 0x01	; 1
}

void matrix_print(void)
{
    print("\nr/c 0123456789ABCDEF\n");
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
    115e:	8d b7       	in	r24, 0x3d	; 61
    1160:	9e b7       	in	r25, 0x3e	; 62
    1162:	08 96       	adiw	r24, 0x08	; 8
    1164:	0f b6       	in	r0, 0x3f	; 63
    1166:	f8 94       	cli
    1168:	9e bf       	out	0x3e, r25	; 62
    116a:	0f be       	out	0x3f, r0	; 63
    116c:	8d bf       	out	0x3d, r24	; 61
    116e:	c6 30       	cpi	r28, 0x06	; 6
    1170:	d1 05       	cpc	r29, r1
    1172:	d1 f6       	brne	.-76     	; 0x1128 <matrix_print+0x30>
        phex(row); print(": ");
        pbin_reverse16(matrix_get_row(row));
        print("\n");
    }
}
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	1f 91       	pop	r17
    117a:	0f 91       	pop	r16
    117c:	ff 90       	pop	r15
    117e:	ef 90       	pop	r14
    1180:	df 90       	pop	r13
    1182:	cf 90       	pop	r12
    1184:	08 95       	ret

00001186 <led_set>:
#include "led.h"


void led_set(uint8_t usb_led)
{
    if (usb_led & (1<<USB_LED_CAPS_LOCK)) {
    1186:	81 ff       	sbrs	r24, 1
    1188:	02 c0       	rjmp	.+4      	; 0x118e <led_set+0x8>
        // output low
        DDRD |= (1<<6);
    118a:	56 9a       	sbi	0x0a, 6	; 10
    118c:	01 c0       	rjmp	.+2      	; 0x1190 <led_set+0xa>
        PORTD &= ~(1<<6);
    } else {
        // Hi-Z
        DDRD &= ~(1<<6);
    118e:	56 98       	cbi	0x0a, 6	; 10
        PORTD &= ~(1<<6);
    1190:	5e 98       	cbi	0x0b, 6	; 11
    1192:	08 95       	ret

00001194 <keyboard_leds>:
 * Host driver 
 ******************************************************************************/
static uint8_t keyboard_leds(void)
{
    return keyboard_led_stats;
}
    1194:	80 91 57 01 	lds	r24, 0x0157
    1198:	08 95       	ret

0000119a <sendchar>:
    // Because sendchar() is called so many times, waiting each call causes big lag.
    static bool timeouted = false;

    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);
    119a:	9f b7       	in	r25, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	10 92 4e 01 	sts	0x014E, r1
    11a2:	9f bf       	out	0x3f, r25	; 63

    if (USB_DeviceState != DEVICE_STATE_Configured)
    11a4:	90 91 cc 01 	lds	r25, 0x01CC
    11a8:	94 30       	cpi	r25, 0x04	; 4
    11aa:	09 f0       	breq	.+2      	; 0x11ae <sendchar+0x14>
    11ac:	57 c0       	rjmp	.+174    	; 0x125c <sendchar+0xc2>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11ae:	90 91 e9 00 	lds	r25, 0x00E9
    11b2:	9f 70       	andi	r25, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    11b4:	30 91 ec 00 	lds	r19, 0x00EC
    11b8:	23 2f       	mov	r18, r19
    11ba:	21 70       	andi	r18, 0x01	; 1
    11bc:	30 fd       	sbrc	r19, 0
    11be:	20 e8       	ldi	r18, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    11c0:	92 2b       	or	r25, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    11c2:	24 e0       	ldi	r18, 0x04	; 4
    11c4:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    11c8:	20 91 eb 00 	lds	r18, 0x00EB
        return -1;

    uint8_t ep = Endpoint_GetCurrentEndpoint();
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    11cc:	20 ff       	sbrs	r18, 0
    11ce:	43 c0       	rjmp	.+134    	; 0x1256 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    11d0:	20 91 ee 00 	lds	r18, 0x00EE
    11d4:	27 ff       	sbrs	r18, 7
    11d6:	3f c0       	rjmp	.+126    	; 0x1256 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    if (timeouted && !Endpoint_IsReadWriteAllowed()) {
    11d8:	20 91 4c 01 	lds	r18, 0x014C
    11dc:	22 23       	and	r18, r18
    11de:	21 f0       	breq	.+8      	; 0x11e8 <sendchar+0x4e>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    11e0:	20 91 e8 00 	lds	r18, 0x00E8
    11e4:	25 ff       	sbrs	r18, 5
    11e6:	37 c0       	rjmp	.+110    	; 0x1256 <sendchar+0xbc>
        goto ERROR_EXIT;
    }

    timeouted = false;
    11e8:	10 92 4c 01 	sts	0x014C, r1

    uint8_t timeout = SEND_TIMEOUT;
    while (!Endpoint_IsReadWriteAllowed()) {
    11ec:	26 e0       	ldi	r18, 0x06	; 6
    11ee:	30 91 e8 00 	lds	r19, 0x00E8
    11f2:	35 fd       	sbrc	r19, 5
    11f4:	15 c0       	rjmp	.+42     	; 0x1220 <sendchar+0x86>
        if (USB_DeviceState != DEVICE_STATE_Configured) {
    11f6:	30 91 cc 01 	lds	r19, 0x01CC
    11fa:	34 30       	cpi	r19, 0x04	; 4
    11fc:	61 f5       	brne	.+88     	; 0x1256 <sendchar+0xbc>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    11fe:	30 91 eb 00 	lds	r19, 0x00EB
            goto ERROR_EXIT;
        }
        if (Endpoint_IsStalled()) {
    1202:	35 fd       	sbrc	r19, 5
    1204:	28 c0       	rjmp	.+80     	; 0x1256 <sendchar+0xbc>
    1206:	21 50       	subi	r18, 0x01	; 1
            goto ERROR_EXIT;
        }
        if (!(timeout--)) {
    1208:	21 f4       	brne	.+8      	; 0x1212 <sendchar+0x78>
            timeouted = true;
    120a:	81 e0       	ldi	r24, 0x01	; 1
    120c:	80 93 4c 01 	sts	0x014C, r24
            goto ERROR_EXIT;
    1210:	22 c0       	rjmp	.+68     	; 0x1256 <sendchar+0xbc>
    1212:	ef e9       	ldi	r30, 0x9F	; 159
    1214:	ff e0       	ldi	r31, 0x0F	; 15
    1216:	31 97       	sbiw	r30, 0x01	; 1
    1218:	f1 f7       	brne	.-4      	; 0x1216 <sendchar+0x7c>
    121a:	00 c0       	rjmp	.+0      	; 0x121c <sendchar+0x82>
    121c:	00 00       	nop
    121e:	e7 cf       	rjmp	.-50     	; 0x11ee <sendchar+0x54>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1220:	80 93 f1 00 	sts	0x00F1, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1224:	80 91 e8 00 	lds	r24, 0x00E8
    }

    Endpoint_Write_8(c);

    // send when bank is full
    if (!Endpoint_IsReadWriteAllowed()) {
    1228:	85 fd       	sbrc	r24, 5
    122a:	0a c0       	rjmp	.+20     	; 0x1240 <sendchar+0xa6>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    122c:	80 91 e8 00 	lds	r24, 0x00E8
        while (!(Endpoint_IsINReady()));
    1230:	80 ff       	sbrs	r24, 0
    1232:	fc cf       	rjmp	.-8      	; 0x122c <sendchar+0x92>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1234:	80 91 e8 00 	lds	r24, 0x00E8
    1238:	8e 77       	andi	r24, 0x7E	; 126
    123a:	80 93 e8 00 	sts	0x00E8, r24
    123e:	06 c0       	rjmp	.+12     	; 0x124c <sendchar+0xb2>
        Endpoint_ClearIN();
    } else {
        CONSOLE_FLUSH_SET(true);
    1240:	8f b7       	in	r24, 0x3f	; 63
    1242:	f8 94       	cli
    1244:	21 e0       	ldi	r18, 0x01	; 1
    1246:	20 93 4e 01 	sts	0x014E, r18
    124a:	8f bf       	out	0x3f, r24	; 63
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    124c:	9f 70       	andi	r25, 0x0F	; 15
    124e:	90 93 e9 00 	sts	0x00E9, r25
    }

    Endpoint_SelectEndpoint(ep);
    return 0;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	08 95       	ret
    1256:	9f 70       	andi	r25, 0x0F	; 15
    1258:	90 93 e9 00 	sts	0x00E9, r25
    // prevents Console_Task() from running during sendchar() runs.
    // or char will be lost. These two function is mutually exclusive.
    CONSOLE_FLUSH_SET(false);

    if (USB_DeviceState != DEVICE_STATE_Configured)
        return -1;
    125c:	8f ef       	ldi	r24, 0xFF	; 255
    Endpoint_SelectEndpoint(ep);
    return 0;
ERROR_EXIT:
    Endpoint_SelectEndpoint(ep);
    return -1;
}
    125e:	08 95       	ret

00001260 <send_consumer>:
    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    Endpoint_ClearIN();
}

static void send_consumer(uint16_t data)
{
    1260:	cf 93       	push	r28
    1262:	df 93       	push	r29
    1264:	00 d0       	rcall	.+0      	; 0x1266 <send_consumer+0x6>
    1266:	1f 92       	push	r1
    1268:	cd b7       	in	r28, 0x3d	; 61
    126a:	de b7       	in	r29, 0x3e	; 62
    126c:	9c 01       	movw	r18, r24
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    126e:	80 91 cc 01 	lds	r24, 0x01CC
    1272:	84 30       	cpi	r24, 0x04	; 4
    1274:	19 f5       	brne	.+70     	; 0x12bc <send_consumer+0x5c>
        return;

    report_extra_t r = {
    1276:	93 e0       	ldi	r25, 0x03	; 3
    1278:	99 83       	std	Y+1, r25	; 0x01
    127a:	3b 83       	std	Y+3, r19	; 0x03
    127c:	2a 83       	std	Y+2, r18	; 0x02
    127e:	90 93 e9 00 	sts	0x00E9, r25
    1282:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1284:	90 91 e8 00 	lds	r25, 0x00E8
    1288:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    128a:	95 fd       	sbrc	r25, 5
    128c:	06 c0       	rjmp	.+12     	; 0x129a <send_consumer+0x3a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    128e:	95 ed       	ldi	r25, 0xD5	; 213
    1290:	9a 95       	dec	r25
    1292:	f1 f7       	brne	.-4      	; 0x1290 <send_consumer+0x30>
    1294:	00 00       	nop
    1296:	81 11       	cpse	r24, r1
    1298:	f5 cf       	rjmp	.-22     	; 0x1284 <send_consumer+0x24>
    129a:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    129e:	85 ff       	sbrs	r24, 5
    12a0:	0d c0       	rjmp	.+26     	; 0x12bc <send_consumer+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    12a2:	40 e0       	ldi	r20, 0x00	; 0
    12a4:	50 e0       	ldi	r21, 0x00	; 0
    12a6:	63 e0       	ldi	r22, 0x03	; 3
    12a8:	70 e0       	ldi	r23, 0x00	; 0
    12aa:	ce 01       	movw	r24, r28
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    12b2:	80 91 e8 00 	lds	r24, 0x00E8
    12b6:	8e 77       	andi	r24, 0x7E	; 126
    12b8:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    12bc:	0f 90       	pop	r0
    12be:	0f 90       	pop	r0
    12c0:	0f 90       	pop	r0
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	08 95       	ret

000012c8 <send_system>:
    Endpoint_ClearIN();
#endif
}

static void send_system(uint16_t data)
{
    12c8:	cf 93       	push	r28
    12ca:	df 93       	push	r29
    12cc:	00 d0       	rcall	.+0      	; 0x12ce <send_system+0x6>
    12ce:	1f 92       	push	r1
    12d0:	cd b7       	in	r28, 0x3d	; 61
    12d2:	de b7       	in	r29, 0x3e	; 62
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    12d4:	20 91 cc 01 	lds	r18, 0x01CC
    12d8:	24 30       	cpi	r18, 0x04	; 4
    12da:	21 f5       	brne	.+72     	; 0x1324 <send_system+0x5c>
        return;

    report_extra_t r = {
    12dc:	22 e0       	ldi	r18, 0x02	; 2
    12de:	29 83       	std	Y+1, r18	; 0x01
    12e0:	9b 83       	std	Y+3, r25	; 0x03
    12e2:	8a 83       	std	Y+2, r24	; 0x02
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    12e4:	83 e0       	ldi	r24, 0x03	; 3
    12e6:	80 93 e9 00 	sts	0x00E9, r24
    12ea:	8f ef       	ldi	r24, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    12ec:	90 91 e8 00 	lds	r25, 0x00E8
    12f0:	81 50       	subi	r24, 0x01	; 1
        .usage = data
    };
    Endpoint_SelectEndpoint(EXTRAKEY_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    12f2:	95 fd       	sbrc	r25, 5
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <send_system+0x3a>
    12f6:	95 ed       	ldi	r25, 0xD5	; 213
    12f8:	9a 95       	dec	r25
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <send_system+0x30>
    12fc:	00 00       	nop
    12fe:	81 11       	cpse	r24, r1
    1300:	f5 cf       	rjmp	.-22     	; 0x12ec <send_system+0x24>
    1302:	80 91 e8 00 	lds	r24, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    1306:	85 ff       	sbrs	r24, 5
    1308:	0d c0       	rjmp	.+26     	; 0x1324 <send_system+0x5c>

    Endpoint_Write_Stream_LE(&r, sizeof(report_extra_t), NULL);
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	ce 01       	movw	r24, r28
    1314:	01 96       	adiw	r24, 0x01	; 1
    1316:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    131a:	80 91 e8 00 	lds	r24, 0x00E8
    131e:	8e 77       	andi	r24, 0x7E	; 126
    1320:	80 93 e8 00 	sts	0x00E8, r24
    Endpoint_ClearIN();
}
    1324:	0f 90       	pop	r0
    1326:	0f 90       	pop	r0
    1328:	0f 90       	pop	r0
    132a:	df 91       	pop	r29
    132c:	cf 91       	pop	r28
    132e:	08 95       	ret

00001330 <send_mouse>:
static void send_mouse(report_mouse_t *report)
{
#ifdef MOUSE_ENABLE
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    1330:	20 91 cc 01 	lds	r18, 0x01CC
    1334:	24 30       	cpi	r18, 0x04	; 4
    1336:	f1 f4       	brne	.+60     	; 0x1374 <send_mouse+0x44>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1338:	22 e0       	ldi	r18, 0x02	; 2
    133a:	20 93 e9 00 	sts	0x00E9, r18
    133e:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1340:	30 91 e8 00 	lds	r19, 0x00E8
    1344:	21 50       	subi	r18, 0x01	; 1

    /* Select the Mouse Report Endpoint */
    Endpoint_SelectEndpoint(MOUSE_IN_EPNUM);

    /* Check if write ready for a polling interval around 10ms */
    while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1346:	35 fd       	sbrc	r19, 5
    1348:	06 c0       	rjmp	.+12     	; 0x1356 <send_mouse+0x26>
    134a:	35 ed       	ldi	r19, 0xD5	; 213
    134c:	3a 95       	dec	r19
    134e:	f1 f7       	brne	.-4      	; 0x134c <send_mouse+0x1c>
    1350:	00 00       	nop
    1352:	21 11       	cpse	r18, r1
    1354:	f5 cf       	rjmp	.-22     	; 0x1340 <send_mouse+0x10>
    1356:	20 91 e8 00 	lds	r18, 0x00E8
    if (!Endpoint_IsReadWriteAllowed()) return;
    135a:	25 ff       	sbrs	r18, 5
    135c:	0b c0       	rjmp	.+22     	; 0x1374 <send_mouse+0x44>

    /* Write Mouse Report Data */
    Endpoint_Write_Stream_LE(report, sizeof(report_mouse_t), NULL);
    135e:	40 e0       	ldi	r20, 0x00	; 0
    1360:	50 e0       	ldi	r21, 0x00	; 0
    1362:	65 e0       	ldi	r22, 0x05	; 5
    1364:	70 e0       	ldi	r23, 0x00	; 0
    1366:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    136a:	80 91 e8 00 	lds	r24, 0x00E8
    136e:	8e 77       	andi	r24, 0x7E	; 126
    1370:	80 93 e8 00 	sts	0x00E8, r24
    1374:	08 95       	ret

00001376 <send_keyboard>:
{
    return keyboard_led_stats;
}

static void send_keyboard(report_keyboard_t *report)
{
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    uint8_t timeout = 255;

    if (USB_DeviceState != DEVICE_STATE_Configured)
    137a:	20 91 cc 01 	lds	r18, 0x01CC
    137e:	24 30       	cpi	r18, 0x04	; 4
    1380:	39 f5       	brne	.+78     	; 0x13d0 <send_keyboard+0x5a>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1382:	21 e0       	ldi	r18, 0x01	; 1
    1384:	20 93 e9 00 	sts	0x00E9, r18
    1388:	2f ef       	ldi	r18, 0xFF	; 255
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    138a:	30 91 e8 00 	lds	r19, 0x00E8
    138e:	21 50       	subi	r18, 0x01	; 1
    {
        /* Boot protocol */
        Endpoint_SelectEndpoint(KEYBOARD_IN_EPNUM);

        /* Check if write ready for a polling interval around 10ms */
        while (timeout-- && !Endpoint_IsReadWriteAllowed()) _delay_us(40);
    1390:	35 fd       	sbrc	r19, 5
    1392:	06 c0       	rjmp	.+12     	; 0x13a0 <send_keyboard+0x2a>
    1394:	35 ed       	ldi	r19, 0xD5	; 213
    1396:	3a 95       	dec	r19
    1398:	f1 f7       	brne	.-4      	; 0x1396 <send_keyboard+0x20>
    139a:	00 00       	nop
    139c:	21 11       	cpse	r18, r1
    139e:	f5 cf       	rjmp	.-22     	; 0x138a <send_keyboard+0x14>
    13a0:	20 91 e8 00 	lds	r18, 0x00E8
        if (!Endpoint_IsReadWriteAllowed()) return;
    13a4:	25 ff       	sbrs	r18, 5
    13a6:	14 c0       	rjmp	.+40     	; 0x13d0 <send_keyboard+0x5a>
    13a8:	ec 01       	movw	r28, r24

        /* Write Keyboard Report Data */
        Endpoint_Write_Stream_LE(report, KEYBOARD_EPSIZE, NULL);
    13aa:	40 e0       	ldi	r20, 0x00	; 0
    13ac:	50 e0       	ldi	r21, 0x00	; 0
    13ae:	68 e0       	ldi	r22, 0x08	; 8
    13b0:	70 e0       	ldi	r23, 0x00	; 0
    13b2:	0e 94 e3 0b 	call	0x17c6	; 0x17c6 <Endpoint_Write_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    13b6:	80 91 e8 00 	lds	r24, 0x00E8
    13ba:	8e 77       	andi	r24, 0x7E	; 126
    13bc:	80 93 e8 00 	sts	0x00E8, r24
    }

    /* Finalize the stream transfer to send the last packet */
    Endpoint_ClearIN();

    keyboard_report_sent = *report;
    13c0:	88 e0       	ldi	r24, 0x08	; 8
    13c2:	fe 01       	movw	r30, r28
    13c4:	af e4       	ldi	r26, 0x4F	; 79
    13c6:	b1 e0       	ldi	r27, 0x01	; 1
    13c8:	01 90       	ld	r0, Z+
    13ca:	0d 92       	st	X+, r0
    13cc:	8a 95       	dec	r24
    13ce:	e1 f7       	brne	.-8      	; 0x13c8 <send_keyboard+0x52>
}
    13d0:	df 91       	pop	r29
    13d2:	cf 91       	pop	r28
    13d4:	08 95       	ret

000013d6 <EVENT_USB_Device_Connect>:
 * 2) EVENT_USB_Device_Reset
 * 3) EVENT_USB_Device_Wake
*/
void EVENT_USB_Device_Connect(void)
{
    print("[C]");
    13d6:	80 e1       	ldi	r24, 0x10	; 16
    13d8:	92 e0       	ldi	r25, 0x02	; 2
    13da:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    /* For battery powered device */
    if (!USB_IsInitialized) {
    13de:	80 91 cb 01 	lds	r24, 0x01CB
    13e2:	81 11       	cpse	r24, r1
    13e4:	09 c0       	rjmp	.+18     	; 0x13f8 <EVENT_USB_Device_Connect+0x22>
        USB_Disable();
    13e6:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_Disable>
        USB_Init();
    13ea:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <USB_Init>
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
    13ee:	80 91 e2 00 	lds	r24, 0x00E2
    13f2:	84 60       	ori	r24, 0x04	; 4
    13f4:	80 93 e2 00 	sts	0x00E2, r24
    13f8:	08 95       	ret

000013fa <EVENT_USB_Device_Disconnect>:
    }
}

void EVENT_USB_Device_Disconnect(void)
{
    print("[D]");
    13fa:	8c e0       	ldi	r24, 0x0C	; 12
    13fc:	92 e0       	ldi	r25, 0x02	; 2
    13fe:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    /* For battery powered device */
    USB_IsInitialized = false;
    1402:	10 92 cb 01 	sts	0x01CB, r1
    1406:	08 95       	ret

00001408 <EVENT_USB_Device_Reset>:
*/
}

void EVENT_USB_Device_Reset(void)
{
    print("[R]");
    1408:	88 e0       	ldi	r24, 0x08	; 8
    140a:	92 e0       	ldi	r25, 0x02	; 2
    140c:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <xputs>

00001410 <EVENT_USB_Device_StartOfFrame>:

// called every 1ms
void EVENT_USB_Device_StartOfFrame(void)
{
    static uint8_t count;
    if (++count % 50) return;
    1410:	20 91 4d 01 	lds	r18, 0x014D
    1414:	2f 5f       	subi	r18, 0xFF	; 255
    1416:	82 2f       	mov	r24, r18
    1418:	62 e3       	ldi	r22, 0x32	; 50
    141a:	0e 94 54 29 	call	0x52a8	; 0x52a8 <__udivmodqi4>
    141e:	99 23       	and	r25, r25
    1420:	19 f0       	breq	.+6      	; 0x1428 <EVENT_USB_Device_StartOfFrame+0x18>
    1422:	20 93 4d 01 	sts	0x014D, r18
    1426:	08 95       	ret
    count = 0;
    1428:	10 92 4d 01 	sts	0x014D, r1

    if (!console_flush) return;
    142c:	80 91 4e 01 	lds	r24, 0x014E
    1430:	88 23       	and	r24, r24
    1432:	71 f1       	breq	.+92     	; 0x1490 <EVENT_USB_Device_StartOfFrame+0x80>
 ******************************************************************************/
#ifdef CONSOLE_ENABLE
static void Console_Task(void)
{
    /* Device must be connected and configured for the task to run */
    if (USB_DeviceState != DEVICE_STATE_Configured)
    1434:	80 91 cc 01 	lds	r24, 0x01CC
    1438:	84 30       	cpi	r24, 0x04	; 4
    143a:	41 f5       	brne	.+80     	; 0x148c <EVENT_USB_Device_StartOfFrame+0x7c>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    143c:	80 91 e9 00 	lds	r24, 0x00E9
    1440:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1442:	20 91 ec 00 	lds	r18, 0x00EC
    1446:	92 2f       	mov	r25, r18
    1448:	91 70       	andi	r25, 0x01	; 1
    144a:	20 fd       	sbrc	r18, 0
    144c:	90 e8       	ldi	r25, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    144e:	89 2b       	or	r24, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1450:	94 e0       	ldi	r25, 0x04	; 4
    1452:	90 93 e9 00 	sts	0x00E9, r25
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1456:	90 91 eb 00 	lds	r25, 0x00EB
    }
#endif

    /* IN packet */
    Endpoint_SelectEndpoint(CONSOLE_IN_EPNUM);
    if (!Endpoint_IsEnabled() || !Endpoint_IsConfigured()) {
    145a:	90 ff       	sbrs	r25, 0
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <EVENT_USB_Device_StartOfFrame+0x76>
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    145e:	90 91 ee 00 	lds	r25, 0x00EE
    1462:	97 ff       	sbrs	r25, 7
    1464:	10 c0       	rjmp	.+32     	; 0x1486 <EVENT_USB_Device_StartOfFrame+0x76>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1466:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_SelectEndpoint(ep);
        return;
    }

    // fill empty bank
    while (Endpoint_IsReadWriteAllowed())
    146a:	95 ff       	sbrs	r25, 5
    146c:	03 c0       	rjmp	.+6      	; 0x1474 <EVENT_USB_Device_StartOfFrame+0x64>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    146e:	10 92 f1 00 	sts	0x00F1, r1
    1472:	f9 cf       	rjmp	.-14     	; 0x1466 <EVENT_USB_Device_StartOfFrame+0x56>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1474:	90 91 e8 00 	lds	r25, 0x00E8
        Endpoint_Write_8(0);

    // flash senchar packet
    if (Endpoint_IsINReady()) {
    1478:	90 ff       	sbrs	r25, 0
    147a:	05 c0       	rjmp	.+10     	; 0x1486 <EVENT_USB_Device_StartOfFrame+0x76>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    147c:	90 91 e8 00 	lds	r25, 0x00E8
    1480:	9e 77       	andi	r25, 0x7E	; 126
    1482:	90 93 e8 00 	sts	0x00E8, r25
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1486:	8f 70       	andi	r24, 0x0F	; 15
    1488:	80 93 e9 00 	sts	0x00E9, r24
    if (++count % 50) return;
    count = 0;

    if (!console_flush) return;
    Console_Task();
    console_flush = false;
    148c:	10 92 4e 01 	sts	0x014E, r1
    1490:	08 95       	ret

00001492 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1492:	42 e0       	ldi	r20, 0x02	; 2
    1494:	61 ec       	ldi	r22, 0xC1	; 193
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>
    149c:	42 e0       	ldi	r20, 0x02	; 2
    149e:	61 ec       	ldi	r22, 0xC1	; 193
    14a0:	82 e0       	ldi	r24, 0x02	; 2
    14a2:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>
    14a6:	42 e0       	ldi	r20, 0x02	; 2
    14a8:	61 ec       	ldi	r22, 0xC1	; 193
    14aa:	83 e0       	ldi	r24, 0x03	; 3
    14ac:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>
    14b0:	42 e2       	ldi	r20, 0x22	; 34
    14b2:	61 ec       	ldi	r22, 0xC1	; 193
    14b4:	84 e0       	ldi	r24, 0x04	; 4
    14b6:	0c 94 f2 0c 	jmp	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>

000014ba <EVENT_USB_Device_ControlRequest>:
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;

    /* Handle HID Class specific requests */
    switch (USB_ControlRequest.bRequest)
    14ba:	80 91 ce 01 	lds	r24, 0x01CE
    14be:	83 30       	cpi	r24, 0x03	; 3
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <EVENT_USB_Device_ControlRequest+0xa>
    14c2:	53 c0       	rjmp	.+166    	; 0x156a <EVENT_USB_Device_ControlRequest+0xb0>
    14c4:	30 f4       	brcc	.+12     	; 0x14d2 <EVENT_USB_Device_ControlRequest+0x18>
    14c6:	81 30       	cpi	r24, 0x01	; 1
    14c8:	71 f0       	breq	.+28     	; 0x14e6 <EVENT_USB_Device_ControlRequest+0x2c>
    14ca:	82 30       	cpi	r24, 0x02	; 2
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <EVENT_USB_Device_ControlRequest+0x16>
    14ce:	8c c0       	rjmp	.+280    	; 0x15e8 <EVENT_USB_Device_ControlRequest+0x12e>
    14d0:	08 95       	ret
    14d2:	8a 30       	cpi	r24, 0x0A	; 10
    14d4:	09 f4       	brne	.+2      	; 0x14d8 <EVENT_USB_Device_ControlRequest+0x1e>
    14d6:	78 c0       	rjmp	.+240    	; 0x15c8 <EVENT_USB_Device_ControlRequest+0x10e>
    14d8:	8b 30       	cpi	r24, 0x0B	; 11
    14da:	09 f4       	brne	.+2      	; 0x14de <EVENT_USB_Device_ControlRequest+0x24>
    14dc:	5e c0       	rjmp	.+188    	; 0x159a <EVENT_USB_Device_ControlRequest+0xe0>
    14de:	89 30       	cpi	r24, 0x09	; 9
    14e0:	09 f0       	breq	.+2      	; 0x14e4 <EVENT_USB_Device_ControlRequest+0x2a>
    14e2:	9a c0       	rjmp	.+308    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
    14e4:	20 c0       	rjmp	.+64     	; 0x1526 <EVENT_USB_Device_ControlRequest+0x6c>
    {
        case HID_REQ_GetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    14e6:	80 91 cd 01 	lds	r24, 0x01CD
    14ea:	81 3a       	cpi	r24, 0xA1	; 161
    14ec:	09 f0       	breq	.+2      	; 0x14f0 <EVENT_USB_Device_ControlRequest+0x36>
    14ee:	94 c0       	rjmp	.+296    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    14f0:	80 91 e8 00 	lds	r24, 0x00E8
    14f4:	87 7f       	andi	r24, 0xF7	; 247
    14f6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();

                // Interface
                switch (USB_ControlRequest.wIndex) {
    14fa:	80 91 d1 01 	lds	r24, 0x01D1
    14fe:	90 91 d2 01 	lds	r25, 0x01D2
    1502:	89 2b       	or	r24, r25
    1504:	21 f4       	brne	.+8      	; 0x150e <EVENT_USB_Device_ControlRequest+0x54>
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
                    ReportSize = sizeof(keyboard_report_sent);
    1506:	68 e0       	ldi	r22, 0x08	; 8

                // Interface
                switch (USB_ControlRequest.wIndex) {
                case KEYBOARD_INTERFACE:
                    // TODO: test/check
                    ReportData = (uint8_t*)&keyboard_report_sent;
    1508:	8f e4       	ldi	r24, 0x4F	; 79
    150a:	91 e0       	ldi	r25, 0x01	; 1
    150c:	03 c0       	rjmp	.+6      	; 0x1514 <EVENT_USB_Device_ControlRequest+0x5a>
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    uint8_t  ReportSize = 0;
    150e:	60 e0       	ldi	r22, 0x00	; 0
/** Event handler for the USB_ControlRequest event.
 *  This is fired before passing along unhandled control requests to the library for processing internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
    uint8_t* ReportData = NULL;
    1510:	80 e0       	ldi	r24, 0x00	; 0
    1512:	90 e0       	ldi	r25, 0x00	; 0
                    ReportSize = sizeof(keyboard_report_sent);
                    break;
                }

                /* Write the report data to the control endpoint */
                Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
    1514:	70 e0       	ldi	r23, 0x00	; 0
    1516:	0e 94 2e 0c 	call	0x185c	; 0x185c <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    151a:	80 91 e8 00 	lds	r24, 0x00E8
    151e:	8b 77       	andi	r24, 0x7B	; 123
    1520:	80 93 e8 00 	sts	0x00E8, r24
    1524:	08 95       	ret
                Endpoint_ClearOUT();
            }

            break;
        case HID_REQ_SetReport:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    1526:	80 91 cd 01 	lds	r24, 0x01CD
    152a:	81 32       	cpi	r24, 0x21	; 33
    152c:	09 f0       	breq	.+2      	; 0x1530 <EVENT_USB_Device_ControlRequest+0x76>
    152e:	74 c0       	rjmp	.+232    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
            {

                // Interface
                switch (USB_ControlRequest.wIndex) {
    1530:	80 91 d1 01 	lds	r24, 0x01D1
    1534:	90 91 d2 01 	lds	r25, 0x01D2
    1538:	89 2b       	or	r24, r25
    153a:	09 f0       	breq	.+2      	; 0x153e <EVENT_USB_Device_ControlRequest+0x84>
    153c:	6d c0       	rjmp	.+218    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    153e:	80 91 e8 00 	lds	r24, 0x00E8
    1542:	87 7f       	andi	r24, 0xF7	; 247
    1544:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1548:	80 91 e8 00 	lds	r24, 0x00E8
#ifdef NKRO_ENABLE
                case NKRO_INTERFACE:
#endif
                    Endpoint_ClearSETUP();

                    while (!(Endpoint_IsOUTReceived())) {
    154c:	82 fd       	sbrc	r24, 2
    154e:	05 c0       	rjmp	.+10     	; 0x155a <EVENT_USB_Device_ControlRequest+0xa0>
                        if (USB_DeviceState == DEVICE_STATE_Unattached)
    1550:	80 91 cc 01 	lds	r24, 0x01CC
    1554:	81 11       	cpse	r24, r1
    1556:	f8 cf       	rjmp	.-16     	; 0x1548 <EVENT_USB_Device_ControlRequest+0x8e>
    1558:	5f c0       	rjmp	.+190    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    155a:	80 91 f1 00 	lds	r24, 0x00F1
                          return;
                    }
                    keyboard_led_stats = Endpoint_Read_8();
    155e:	80 93 57 01 	sts	0x0157, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1562:	80 91 e8 00 	lds	r24, 0x00E8
    1566:	8b 77       	andi	r24, 0x7B	; 123
    1568:	53 c0       	rjmp	.+166    	; 0x1610 <EVENT_USB_Device_ControlRequest+0x156>
            }

            break;

        case HID_REQ_GetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    156a:	80 91 cd 01 	lds	r24, 0x01CD
    156e:	81 3a       	cpi	r24, 0xA1	; 161
    1570:	09 f0       	breq	.+2      	; 0x1574 <EVENT_USB_Device_ControlRequest+0xba>
    1572:	52 c0       	rjmp	.+164    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    1574:	80 91 d1 01 	lds	r24, 0x01D1
    1578:	90 91 d2 01 	lds	r25, 0x01D2
    157c:	89 2b       	or	r24, r25
    157e:	09 f0       	breq	.+2      	; 0x1582 <EVENT_USB_Device_ControlRequest+0xc8>
    1580:	4b c0       	rjmp	.+150    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1582:	80 91 e8 00 	lds	r24, 0x00E8
    1586:	87 7f       	andi	r24, 0xF7	; 247
    1588:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    158c:	80 91 e8 00 	lds	r24, 0x00E8
                    Endpoint_ClearSETUP();
                    while (!(Endpoint_IsINReady()));
    1590:	80 ff       	sbrs	r24, 0
    1592:	fc cf       	rjmp	.-8      	; 0x158c <EVENT_USB_Device_ControlRequest+0xd2>
                    Endpoint_Write_8(keyboard_protocol);
    1594:	80 91 0b 01 	lds	r24, 0x010B
    1598:	36 c0       	rjmp	.+108    	; 0x1606 <EVENT_USB_Device_ControlRequest+0x14c>
                }
            }

            break;
        case HID_REQ_SetProtocol:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    159a:	80 91 cd 01 	lds	r24, 0x01CD
    159e:	81 32       	cpi	r24, 0x21	; 33
    15a0:	d9 f5       	brne	.+118    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
            {
                if (USB_ControlRequest.wIndex == KEYBOARD_INTERFACE) {
    15a2:	80 91 d1 01 	lds	r24, 0x01D1
    15a6:	90 91 d2 01 	lds	r25, 0x01D2
    15aa:	89 2b       	or	r24, r25
    15ac:	a9 f5       	brne	.+106    	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    15ae:	80 91 e8 00 	lds	r24, 0x00E8
    15b2:	87 7f       	andi	r24, 0xF7	; 247
    15b4:	80 93 e8 00 	sts	0x00E8, r24
                    Endpoint_ClearSETUP();
                    Endpoint_ClearStatusStage();
    15b8:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>

                    keyboard_protocol = (USB_ControlRequest.wValue & 0xFF);
    15bc:	80 91 cf 01 	lds	r24, 0x01CF
    15c0:	80 93 0b 01 	sts	0x010B, r24
                    clear_keyboard();
    15c4:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <clear_keyboard>
                }
            }

            break;
        case HID_REQ_SetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    15c8:	80 91 cd 01 	lds	r24, 0x01CD
    15cc:	81 32       	cpi	r24, 0x21	; 33
    15ce:	21 f5       	brne	.+72     	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
    15d0:	80 91 e8 00 	lds	r24, 0x00E8
    15d4:	87 7f       	andi	r24, 0xF7	; 247
    15d6:	80 93 e8 00 	sts	0x00E8, r24
            {
                Endpoint_ClearSETUP();
                Endpoint_ClearStatusStage();
    15da:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>

                keyboard_idle = ((USB_ControlRequest.wValue & 0xFF00) >> 8);
    15de:	80 91 d0 01 	lds	r24, 0x01D0
    15e2:	80 93 58 01 	sts	0x0158, r24
    15e6:	08 95       	ret
            }

            break;
        case HID_REQ_GetIdle:
            if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
    15e8:	80 91 cd 01 	lds	r24, 0x01CD
    15ec:	81 3a       	cpi	r24, 0xA1	; 161
    15ee:	a1 f4       	brne	.+40     	; 0x1618 <EVENT_USB_Device_ControlRequest+0x15e>
    15f0:	80 91 e8 00 	lds	r24, 0x00E8
    15f4:	87 7f       	andi	r24, 0xF7	; 247
    15f6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    15fa:	80 91 e8 00 	lds	r24, 0x00E8
            {
                Endpoint_ClearSETUP();
                while (!(Endpoint_IsINReady()));
    15fe:	80 ff       	sbrs	r24, 0
    1600:	fc cf       	rjmp	.-8      	; 0x15fa <EVENT_USB_Device_ControlRequest+0x140>
                Endpoint_Write_8(keyboard_idle);
    1602:	80 91 58 01 	lds	r24, 0x0158
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1606:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    160a:	80 91 e8 00 	lds	r24, 0x00E8
    160e:	8e 77       	andi	r24, 0x7E	; 126
    1610:	80 93 e8 00 	sts	0x00E8, r24
                Endpoint_ClearIN();
                Endpoint_ClearStatusStage();
    1614:	0c 94 27 0d 	jmp	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>
    1618:	08 95       	ret

0000161a <hook_early_init>:
}


/* hooks */
__attribute__((weak))
void hook_early_init(void) {}
    161a:	08 95       	ret

0000161c <hook_late_init>:

__attribute__((weak))
void hook_late_init(void) {}
    161c:	08 95       	ret

0000161e <hook_usb_suspend_entry>:

 __attribute__((weak))
void hook_usb_suspend_entry(void)
{
    161e:	08 95       	ret

00001620 <EVENT_USB_Device_Suspend>:
    print("[R]");
}

void EVENT_USB_Device_Suspend()
{
    print("[S]");
    1620:	84 e0       	ldi	r24, 0x04	; 4
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    hook_usb_suspend_entry();
    1628:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <hook_usb_suspend_entry>

0000162c <hook_usb_suspend_loop>:
}

__attribute__((weak))
void hook_usb_suspend_loop(void)
{
    suspend_power_down();
    162c:	0e 94 5f 1c 	call	0x38be	; 0x38be <suspend_power_down>
    if (USB_Device_RemoteWakeupEnabled && suspend_wakeup_condition()) {
    1630:	80 91 ca 01 	lds	r24, 0x01CA
    1634:	88 23       	and	r24, r24
    1636:	29 f0       	breq	.+10     	; 0x1642 <hook_usb_suspend_loop+0x16>
    1638:	0e 94 8a 1c 	call	0x3914	; 0x3914 <suspend_wakeup_condition>
    163c:	81 11       	cpse	r24, r1
            USB_Device_SendRemoteWakeup();
    163e:	0c 94 cd 0b 	jmp	0x179a	; 0x179a <USB_Device_SendRemoteWakeup>
    1642:	08 95       	ret

00001644 <main>:
 * main
 ******************************************************************************/
static void setup_mcu(void)
{
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
    1644:	84 b7       	in	r24, 0x34	; 52
    1646:	87 7f       	andi	r24, 0xF7	; 247
    1648:	84 bf       	out	0x34, r24	; 52
    164a:	0f b6       	in	r0, 0x3f	; 63
    164c:	f8 94       	cli
    164e:	a8 95       	wdr
    1650:	80 91 60 00 	lds	r24, 0x0060
    1654:	88 61       	ori	r24, 0x18	; 24
    1656:	80 93 60 00 	sts	0x0060, r24
    165a:	10 92 60 00 	sts	0x0060, r1
    165e:	0f be       	out	0x3f, r0	; 63
from 1 to 129. Thus, one does not need to use \c clock_div_t type as argument.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    1660:	90 e0       	ldi	r25, 0x00	; 0
    1662:	80 e8       	ldi	r24, 0x80	; 128
    1664:	0f b6       	in	r0, 0x3f	; 63
    1666:	f8 94       	cli
    1668:	80 93 61 00 	sts	0x0061, r24
    166c:	90 93 61 00 	sts	0x0061, r25
    1670:	0f be       	out	0x3f, r0	; 63

int main(void)  __attribute__ ((weak));
int main(void)
{
    setup_mcu();
    hook_early_init();
    1672:	0e 94 0d 0b 	call	0x161a	; 0x161a <hook_early_init>
    keyboard_setup();
    1676:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <keyboard_setup>
}

static void setup_usb(void)
{
    // Leonardo needs. Without this USB device is not recognized.
    USB_Disable();
    167a:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_Disable>

    USB_Init();
    167e:	0e 94 d5 0d 	call	0x1baa	; 0x1baa <USB_Init>
    1682:	80 91 e2 00 	lds	r24, 0x00E2
    1686:	84 60       	ori	r24, 0x04	; 4
    1688:	80 93 e2 00 	sts	0x00E2, r24

    // for Console_Task
    USB_Device_EnableSOFEvents();
    print_set_sendchar(sendchar);
    168c:	8d ec       	ldi	r24, 0xCD	; 205
    168e:	98 e0       	ldi	r25, 0x08	; 8
    1690:	0e 94 15 1c 	call	0x382a	; 0x382a <print_set_sendchar>
{
    setup_mcu();
    hook_early_init();
    keyboard_setup();
    setup_usb();
    sei();
    1694:	78 94       	sei

    /* wait for USB startup & debug output */
    while (USB_DeviceState != DEVICE_STATE_Configured) {
    1696:	80 91 cc 01 	lds	r24, 0x01CC
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	e1 f7       	brne	.-8      	; 0x1696 <main+0x52>
        ;
#else
        USB_USBTask();
#endif
    }
    print("USB configured.\n");
    169e:	8f ee       	ldi	r24, 0xEF	; 239
    16a0:	91 e0       	ldi	r25, 0x01	; 1
    16a2:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>

    /* init modules */
    keyboard_init();
    16a6:	0e 94 ee 10 	call	0x21dc	; 0x21dc <keyboard_init>
    host_set_driver(&lufa_driver);
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	91 e0       	ldi	r25, 0x01	; 1
    16ae:	0e 94 5a 10 	call	0x20b4	; 0x20b4 <host_set_driver>
#ifdef SLEEP_LED_ENABLE
    sleep_led_init();
#endif

    print("Keyboard start.\n");
    16b2:	8e ed       	ldi	r24, 0xDE	; 222
    16b4:	91 e0       	ldi	r25, 0x01	; 1
    16b6:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    hook_late_init();
    16ba:	0e 94 0e 0b 	call	0x161c	; 0x161c <hook_late_init>
    while (1) {
        while (USB_DeviceState == DEVICE_STATE_Suspended) {
    16be:	80 91 cc 01 	lds	r24, 0x01CC
    16c2:	85 30       	cpi	r24, 0x05	; 5
    16c4:	39 f4       	brne	.+14     	; 0x16d4 <main+0x90>
            print("[s]");
    16c6:	8a ed       	ldi	r24, 0xDA	; 218
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            hook_usb_suspend_loop();
    16ce:	0e 94 16 0b 	call	0x162c	; 0x162c <hook_usb_suspend_loop>
    16d2:	f5 cf       	rjmp	.-22     	; 0x16be <main+0x7a>
        }

        keyboard_task();
    16d4:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <keyboard_task>

#if !defined(INTERRUPT_CONTROL_ENDPOINT)
        USB_USBTask();
#endif
    }
    16d8:	f2 cf       	rjmp	.-28     	; 0x16be <main+0x7a>

000016da <hook_usb_wakeup>:
}

__attribute__((weak))
void hook_usb_wakeup(void)
{
    suspend_wakeup_init();
    16da:	0c 94 9f 1c 	jmp	0x393e	; 0x393e <suspend_wakeup_init>

000016de <EVENT_USB_Device_WakeUp>:
    hook_usb_suspend_entry();
}

void EVENT_USB_Device_WakeUp()
{
    print("[W]");
    16de:	80 e0       	ldi	r24, 0x00	; 0
    16e0:	92 e0       	ldi	r25, 0x02	; 2
    16e2:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    hook_usb_wakeup();
    16e6:	0c 94 6d 0b 	jmp	0x16da	; 0x16da <hook_usb_wakeup>

000016ea <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
    const uint8_t  DescriptorType   = (wValue >> 8);
    16ea:	29 2f       	mov	r18, r25
    16ec:	33 27       	eor	r19, r19
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    16ee:	23 30       	cpi	r18, 0x03	; 3
    16f0:	31 05       	cpc	r19, r1
    16f2:	c9 f0       	breq	.+50     	; 0x1726 <CALLBACK_USB_GetDescriptor+0x3c>
    16f4:	64 f4       	brge	.+24     	; 0x170e <CALLBACK_USB_GetDescriptor+0x24>
    16f6:	21 30       	cpi	r18, 0x01	; 1
    16f8:	31 05       	cpc	r19, r1
    16fa:	81 f0       	breq	.+32     	; 0x171c <CALLBACK_USB_GetDescriptor+0x32>
    16fc:	22 30       	cpi	r18, 0x02	; 2
    16fe:	31 05       	cpc	r19, r1
    1700:	09 f0       	breq	.+2      	; 0x1704 <CALLBACK_USB_GetDescriptor+0x1a>
    1702:	43 c0       	rjmp	.+134    	; 0x178a <CALLBACK_USB_GetDescriptor+0xa0>
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
    1704:	84 e7       	ldi	r24, 0x74	; 116
    1706:	90 e0       	ldi	r25, 0x00	; 0
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
            break;
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
    1708:	22 e5       	ldi	r18, 0x52	; 82
    170a:	32 e0       	ldi	r19, 0x02	; 2
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
    170c:	42 c0       	rjmp	.+132    	; 0x1792 <CALLBACK_USB_GetDescriptor+0xa8>
    const uint8_t  DescriptorIndex  = (wValue & 0xFF);

    const void* Address = NULL;
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    170e:	21 32       	cpi	r18, 0x21	; 33
    1710:	31 05       	cpc	r19, r1
    1712:	f1 f0       	breq	.+60     	; 0x1750 <CALLBACK_USB_GetDescriptor+0x66>
    1714:	22 32       	cpi	r18, 0x22	; 34
    1716:	31 05       	cpc	r19, r1
    1718:	41 f1       	breq	.+80     	; 0x176a <CALLBACK_USB_GetDescriptor+0x80>
    171a:	37 c0       	rjmp	.+110    	; 0x178a <CALLBACK_USB_GetDescriptor+0xa0>
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
            Size    = sizeof(USB_Descriptor_Device_t);
    171c:	82 e1       	ldi	r24, 0x12	; 18
    171e:	90 e0       	ldi	r25, 0x00	; 0
    uint16_t    Size    = NO_DESCRIPTOR;

    switch (DescriptorType)
    {
        case DTYPE_Device:
            Address = &DeviceDescriptor;
    1720:	26 ec       	ldi	r18, 0xC6	; 198
    1722:	32 e0       	ldi	r19, 0x02	; 2
    1724:	36 c0       	rjmp	.+108    	; 0x1792 <CALLBACK_USB_GetDescriptor+0xa8>
    1726:	99 27       	eor	r25, r25
        case DTYPE_Configuration:
            Address = &ConfigurationDescriptor;
            Size    = sizeof(USB_Descriptor_Configuration_t);
            break;
        case DTYPE_String:
            switch (DescriptorIndex )
    1728:	81 30       	cpi	r24, 0x01	; 1
    172a:	91 05       	cpc	r25, r1
    172c:	41 f0       	breq	.+16     	; 0x173e <CALLBACK_USB_GetDescriptor+0x54>
    172e:	82 30       	cpi	r24, 0x02	; 2
    1730:	91 05       	cpc	r25, r1
    1732:	41 f0       	breq	.+16     	; 0x1744 <CALLBACK_USB_GetDescriptor+0x5a>
    1734:	89 2b       	or	r24, r25
    1736:	49 f5       	brne	.+82     	; 0x178a <CALLBACK_USB_GetDescriptor+0xa0>
            {
                case 0x00:
                    Address = &LanguageString;
                    Size    = pgm_read_byte(&LanguageString.Header.Size);
    1738:	ee e4       	ldi	r30, 0x4E	; 78
    173a:	f2 e0       	ldi	r31, 0x02	; 2
    173c:	05 c0       	rjmp	.+10     	; 0x1748 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    173e:	ea e3       	ldi	r30, 0x3A	; 58
    1740:	f2 e0       	ldi	r31, 0x02	; 2
    1742:	02 c0       	rjmp	.+4      	; 0x1748 <CALLBACK_USB_GetDescriptor+0x5e>
                    break;
                case 0x02:
                    Address = &ProductString;
                    Size    = pgm_read_byte(&ProductString.Header.Size);
    1744:	e4 e1       	ldi	r30, 0x14	; 20
    1746:	f2 e0       	ldi	r31, 0x02	; 2
    1748:	84 91       	lpm	r24, Z
    174a:	90 e0       	ldi	r25, 0x00	; 0
                case 0x01:
                    Address = &ManufacturerString;
                    Size    = pgm_read_byte(&ManufacturerString.Header.Size);
                    break;
                case 0x02:
                    Address = &ProductString;
    174c:	9f 01       	movw	r18, r30
                    Size    = pgm_read_byte(&ProductString.Header.Size);
                    break;
    174e:	21 c0       	rjmp	.+66     	; 0x1792 <CALLBACK_USB_GetDescriptor+0xa8>
    1750:	64 30       	cpi	r22, 0x04	; 4
    1752:	d8 f4       	brcc	.+54     	; 0x178a <CALLBACK_USB_GetDescriptor+0xa0>
    1754:	e6 2f       	mov	r30, r22
    1756:	f0 e0       	ldi	r31, 0x00	; 0
    1758:	ee 0f       	add	r30, r30
    175a:	ff 1f       	adc	r31, r31
    175c:	e0 5e       	subi	r30, 0xE0	; 224
    175e:	fe 4f       	sbci	r31, 0xFE	; 254
    1760:	20 81       	ld	r18, Z
    1762:	31 81       	ldd	r19, Z+1	; 0x01
    1764:	89 e0       	ldi	r24, 0x09	; 9
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	14 c0       	rjmp	.+40     	; 0x1792 <CALLBACK_USB_GetDescriptor+0xa8>
    176a:	64 30       	cpi	r22, 0x04	; 4
    176c:	70 f4       	brcc	.+28     	; 0x178a <CALLBACK_USB_GetDescriptor+0xa0>
    176e:	70 e0       	ldi	r23, 0x00	; 0
    1770:	fb 01       	movw	r30, r22
    1772:	ee 0f       	add	r30, r30
    1774:	ff 1f       	adc	r31, r31
    1776:	e8 5e       	subi	r30, 0xE8	; 232
    1778:	fe 4f       	sbci	r31, 0xFE	; 254
    177a:	20 81       	ld	r18, Z
    177c:	31 81       	ldd	r19, Z+1	; 0x01
    177e:	fb 01       	movw	r30, r22
    1780:	ec 5e       	subi	r30, 0xEC	; 236
    1782:	fe 4f       	sbci	r31, 0xFE	; 254
    1784:	80 81       	ld	r24, Z
    1786:	90 e0       	ldi	r25, 0x00	; 0
    1788:	04 c0       	rjmp	.+8      	; 0x1792 <CALLBACK_USB_GetDescriptor+0xa8>
    178a:	80 e0       	ldi	r24, 0x00	; 0
    178c:	90 e0       	ldi	r25, 0x00	; 0
    178e:	20 e0       	ldi	r18, 0x00	; 0
    1790:	30 e0       	ldi	r19, 0x00	; 0
#endif
            }
            break;
    }

    *DescriptorAddress = Address;
    1792:	fa 01       	movw	r30, r20
    1794:	31 83       	std	Z+1, r19	; 0x01
    1796:	20 83       	st	Z, r18
    return Size;
}
    1798:	08 95       	ret

0000179a <USB_Device_SendRemoteWakeup>:

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    179a:	80 e1       	ldi	r24, 0x10	; 16
    179c:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    179e:	82 e1       	ldi	r24, 0x12	; 18
    17a0:	89 bd       	out	0x29, r24	; 41
void USB_Device_SendRemoteWakeup(void)
{
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
    17a2:	09 b4       	in	r0, 0x29	; 41
    17a4:	00 fe       	sbrs	r0, 0
    17a6:	fd cf       	rjmp	.-6      	; 0x17a2 <USB_Device_SendRemoteWakeup+0x8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    17a8:	80 91 d8 00 	lds	r24, 0x00D8
    17ac:	8f 7d       	andi	r24, 0xDF	; 223
    17ae:	80 93 d8 00 	sts	0x00D8, r24
	}

	USB_CLK_Unfreeze();

	UDCON |= (1 << RMWKUP);
    17b2:	80 91 e0 00 	lds	r24, 0x00E0
    17b6:	82 60       	ori	r24, 0x02	; 2
    17b8:	80 93 e0 00 	sts	0x00E0, r24
	while (UDCON & (1 << RMWKUP));
    17bc:	80 91 e0 00 	lds	r24, 0x00E0
    17c0:	81 fd       	sbrc	r24, 1
    17c2:	fc cf       	rjmp	.-8      	; 0x17bc <USB_Device_SendRemoteWakeup+0x22>
}
    17c4:	08 95       	ret

000017c6 <Endpoint_Write_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
    17c6:	cf 92       	push	r12
    17c8:	df 92       	push	r13
    17ca:	ef 92       	push	r14
    17cc:	ff 92       	push	r15
    17ce:	0f 93       	push	r16
    17d0:	1f 93       	push	r17
    17d2:	cf 93       	push	r28
    17d4:	df 93       	push	r29
    17d6:	ec 01       	movw	r28, r24
    17d8:	8b 01       	movw	r16, r22
    17da:	6a 01       	movw	r12, r20
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint16_t BytesInTransfer = 0;
	uint8_t  ErrorCode;

	if ((ErrorCode = Endpoint_WaitUntilReady()))
    17dc:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <Endpoint_WaitUntilReady>
    17e0:	81 11       	cpse	r24, r1
    17e2:	33 c0       	rjmp	.+102    	; 0x184a <Endpoint_Write_Stream_LE+0x84>
	  return ErrorCode;

	if (BytesProcessed != NULL)
    17e4:	c1 14       	cp	r12, r1
    17e6:	d1 04       	cpc	r13, r1
    17e8:	39 f0       	breq	.+14     	; 0x17f8 <Endpoint_Write_Stream_LE+0x32>
	{
		Length -= *BytesProcessed;
    17ea:	f6 01       	movw	r30, r12
    17ec:	80 81       	ld	r24, Z
    17ee:	91 81       	ldd	r25, Z+1	; 0x01
    17f0:	08 1b       	sub	r16, r24
    17f2:	19 0b       	sbc	r17, r25
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
    17f4:	c8 0f       	add	r28, r24
    17f6:	d9 1f       	adc	r29, r25

uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE const Buffer,
                            uint16_t Length,
                            uint16_t* const BytesProcessed)
{
	uint8_t* DataStream      = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    17f8:	e1 2c       	mov	r14, r1
    17fa:	f1 2c       	mov	r15, r1
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
    17fc:	01 15       	cp	r16, r1
    17fe:	11 05       	cpc	r17, r1
    1800:	19 f1       	breq	.+70     	; 0x1848 <Endpoint_Write_Stream_LE+0x82>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    1802:	80 91 e8 00 	lds	r24, 0x00E8
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    1806:	85 fd       	sbrc	r24, 5
    1808:	16 c0       	rjmp	.+44     	; 0x1836 <Endpoint_Write_Stream_LE+0x70>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    180a:	80 91 e8 00 	lds	r24, 0x00E8
    180e:	8e 77       	andi	r24, 0x7E	; 126
    1810:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(INTERRUPT_CONTROL_ENDPOINT)
			USB_USBTask();
			#endif

			if (BytesProcessed != NULL)
    1814:	c1 14       	cp	r12, r1
    1816:	d1 04       	cpc	r13, r1
    1818:	49 f0       	breq	.+18     	; 0x182c <Endpoint_Write_Stream_LE+0x66>
			{
				*BytesProcessed += BytesInTransfer;
    181a:	f6 01       	movw	r30, r12
    181c:	80 81       	ld	r24, Z
    181e:	91 81       	ldd	r25, Z+1	; 0x01
    1820:	e8 0e       	add	r14, r24
    1822:	f9 1e       	adc	r15, r25
    1824:	f1 82       	std	Z+1, r15	; 0x01
    1826:	e0 82       	st	Z, r14
				return ENDPOINT_RWSTREAM_IncompleteTransfer;
    1828:	85 e0       	ldi	r24, 0x05	; 5
    182a:	0f c0       	rjmp	.+30     	; 0x184a <Endpoint_Write_Stream_LE+0x84>
			}

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    182c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <Endpoint_WaitUntilReady>
    1830:	88 23       	and	r24, r24
    1832:	21 f3       	breq	.-56     	; 0x17fc <Endpoint_Write_Stream_LE+0x36>
    1834:	0a c0       	rjmp	.+20     	; 0x184a <Endpoint_Write_Stream_LE+0x84>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    1836:	89 91       	ld	r24, Y+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1838:	80 93 f1 00 	sts	0x00F1, r24
			TEMPLATE_BUFFER_MOVE(DataStream, 1);
			Length--;
    183c:	01 50       	subi	r16, 0x01	; 1
    183e:	11 09       	sbc	r17, r1
			BytesInTransfer++;
    1840:	ff ef       	ldi	r31, 0xFF	; 255
    1842:	ef 1a       	sub	r14, r31
    1844:	ff 0a       	sbc	r15, r31
    1846:	da cf       	rjmp	.-76     	; 0x17fc <Endpoint_Write_Stream_LE+0x36>
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
    1848:	80 e0       	ldi	r24, 0x00	; 0
}
    184a:	df 91       	pop	r29
    184c:	cf 91       	pop	r28
    184e:	1f 91       	pop	r17
    1850:	0f 91       	pop	r16
    1852:	ff 90       	pop	r15
    1854:	ef 90       	pop	r14
    1856:	df 90       	pop	r13
    1858:	cf 90       	pop	r12
    185a:	08 95       	ret

0000185c <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    185c:	20 91 d3 01 	lds	r18, 0x01D3
    1860:	30 91 d4 01 	lds	r19, 0x01D4
    1864:	26 17       	cp	r18, r22
    1866:	37 07       	cpc	r19, r23
    1868:	48 f0       	brcs	.+18     	; 0x187c <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    186a:	61 15       	cp	r22, r1
    186c:	71 05       	cpc	r23, r1
    186e:	39 f4       	brne	.+14     	; 0x187e <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1870:	20 91 e8 00 	lds	r18, 0x00E8
    1874:	2e 77       	andi	r18, 0x7E	; 126
    1876:	20 93 e8 00 	sts	0x00E8, r18
    187a:	01 c0       	rjmp	.+2      	; 0x187e <Endpoint_Write_Control_Stream_LE+0x22>
    187c:	b9 01       	movw	r22, r18
    187e:	40 e0       	ldi	r20, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1880:	61 15       	cp	r22, r1
    1882:	71 05       	cpc	r23, r1
    1884:	a9 f1       	breq	.+106    	; 0x18f0 <Endpoint_Write_Control_Stream_LE+0x94>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1886:	20 91 cc 01 	lds	r18, 0x01CC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    188a:	22 23       	and	r18, r18
    188c:	09 f4       	brne	.+2      	; 0x1890 <Endpoint_Write_Control_Stream_LE+0x34>
    188e:	43 c0       	rjmp	.+134    	; 0x1916 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1890:	25 30       	cpi	r18, 0x05	; 5
    1892:	09 f4       	brne	.+2      	; 0x1896 <Endpoint_Write_Control_Stream_LE+0x3a>
    1894:	42 c0       	rjmp	.+132    	; 0x191a <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1896:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    189a:	23 fd       	sbrc	r18, 3
    189c:	40 c0       	rjmp	.+128    	; 0x191e <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    189e:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    18a2:	22 fd       	sbrc	r18, 2
    18a4:	32 c0       	rjmp	.+100    	; 0x190a <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    18a6:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    18aa:	20 ff       	sbrs	r18, 0
    18ac:	e9 cf       	rjmp	.-46     	; 0x1880 <Endpoint_Write_Control_Stream_LE+0x24>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    18ae:	40 91 f3 00 	lds	r20, 0x00F3
    18b2:	20 91 f2 00 	lds	r18, 0x00F2
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	34 2b       	or	r19, r20
    18ba:	fc 01       	movw	r30, r24
    18bc:	cf 01       	movw	r24, r30
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    18be:	61 15       	cp	r22, r1
    18c0:	71 05       	cpc	r23, r1
    18c2:	59 f0       	breq	.+22     	; 0x18da <Endpoint_Write_Control_Stream_LE+0x7e>
    18c4:	28 30       	cpi	r18, 0x08	; 8
    18c6:	31 05       	cpc	r19, r1
    18c8:	40 f4       	brcc	.+16     	; 0x18da <Endpoint_Write_Control_Stream_LE+0x7e>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    18ca:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    18cc:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    18d0:	61 50       	subi	r22, 0x01	; 1
    18d2:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    18d4:	2f 5f       	subi	r18, 0xFF	; 255
    18d6:	3f 4f       	sbci	r19, 0xFF	; 255
    18d8:	f1 cf       	rjmp	.-30     	; 0x18bc <Endpoint_Write_Control_Stream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    18da:	41 e0       	ldi	r20, 0x01	; 1
    18dc:	28 30       	cpi	r18, 0x08	; 8
    18de:	31 05       	cpc	r19, r1
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <Endpoint_Write_Control_Stream_LE+0x88>
    18e2:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    18e4:	20 91 e8 00 	lds	r18, 0x00E8
    18e8:	2e 77       	andi	r18, 0x7E	; 126
    18ea:	20 93 e8 00 	sts	0x00E8, r18
    18ee:	c8 cf       	rjmp	.-112    	; 0x1880 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    18f0:	41 11       	cpse	r20, r1
    18f2:	c9 cf       	rjmp	.-110    	; 0x1886 <Endpoint_Write_Control_Stream_LE+0x2a>
    18f4:	0a c0       	rjmp	.+20     	; 0x190a <Endpoint_Write_Control_Stream_LE+0xae>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    18f6:	80 91 cc 01 	lds	r24, 0x01CC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    18fa:	88 23       	and	r24, r24
    18fc:	61 f0       	breq	.+24     	; 0x1916 <Endpoint_Write_Control_Stream_LE+0xba>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    18fe:	85 30       	cpi	r24, 0x05	; 5
    1900:	61 f0       	breq	.+24     	; 0x191a <Endpoint_Write_Control_Stream_LE+0xbe>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1902:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1906:	83 fd       	sbrc	r24, 3
    1908:	0a c0       	rjmp	.+20     	; 0x191e <Endpoint_Write_Control_Stream_LE+0xc2>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    190a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    190e:	82 ff       	sbrs	r24, 2
    1910:	f2 cf       	rjmp	.-28     	; 0x18f6 <Endpoint_Write_Control_Stream_LE+0x9a>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    1912:	80 e0       	ldi	r24, 0x00	; 0
    1914:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    1916:	82 e0       	ldi	r24, 0x02	; 2
    1918:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    191a:	83 e0       	ldi	r24, 0x03	; 3
    191c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    191e:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    1920:	08 95       	ret

00001922 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    1922:	20 91 d3 01 	lds	r18, 0x01D3
    1926:	30 91 d4 01 	lds	r19, 0x01D4
    192a:	26 17       	cp	r18, r22
    192c:	37 07       	cpc	r19, r23
    192e:	48 f0       	brcs	.+18     	; 0x1942 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    1930:	61 15       	cp	r22, r1
    1932:	71 05       	cpc	r23, r1
    1934:	39 f4       	brne	.+14     	; 0x1944 <Endpoint_Write_Control_PStream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1936:	20 91 e8 00 	lds	r18, 0x00E8
    193a:	2e 77       	andi	r18, 0x7E	; 126
    193c:	20 93 e8 00 	sts	0x00E8, r18
    1940:	01 c0       	rjmp	.+2      	; 0x1944 <Endpoint_Write_Control_PStream_LE+0x22>
    1942:	b9 01       	movw	r22, r18
    1944:	fc 01       	movw	r30, r24
    1946:	20 e0       	ldi	r18, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    1948:	61 15       	cp	r22, r1
    194a:	71 05       	cpc	r23, r1
    194c:	91 f1       	breq	.+100    	; 0x19b2 <Endpoint_Write_Control_PStream_LE+0x90>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    194e:	80 91 cc 01 	lds	r24, 0x01CC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1952:	88 23       	and	r24, r24
    1954:	09 f4       	brne	.+2      	; 0x1958 <Endpoint_Write_Control_PStream_LE+0x36>
    1956:	40 c0       	rjmp	.+128    	; 0x19d8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1958:	85 30       	cpi	r24, 0x05	; 5
    195a:	09 f4       	brne	.+2      	; 0x195e <Endpoint_Write_Control_PStream_LE+0x3c>
    195c:	3f c0       	rjmp	.+126    	; 0x19dc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    195e:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    1962:	83 fd       	sbrc	r24, 3
    1964:	3d c0       	rjmp	.+122    	; 0x19e0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1966:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    196a:	82 fd       	sbrc	r24, 2
    196c:	2f c0       	rjmp	.+94     	; 0x19cc <Endpoint_Write_Control_PStream_LE+0xaa>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    196e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    1972:	80 ff       	sbrs	r24, 0
    1974:	e9 cf       	rjmp	.-46     	; 0x1948 <Endpoint_Write_Control_PStream_LE+0x26>
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
    1976:	20 91 f3 00 	lds	r18, 0x00F3
    197a:	80 91 f2 00 	lds	r24, 0x00F2
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	92 2b       	or	r25, r18
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    1982:	61 15       	cp	r22, r1
    1984:	71 05       	cpc	r23, r1
    1986:	59 f0       	breq	.+22     	; 0x199e <Endpoint_Write_Control_PStream_LE+0x7c>
    1988:	88 30       	cpi	r24, 0x08	; 8
    198a:	91 05       	cpc	r25, r1
    198c:	40 f4       	brcc	.+16     	; 0x199e <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    198e:	24 91       	lpm	r18, Z
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1990:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    1994:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    1996:	61 50       	subi	r22, 0x01	; 1
    1998:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
    199a:	01 96       	adiw	r24, 0x01	; 1
    199c:	f2 cf       	rjmp	.-28     	; 0x1982 <Endpoint_Write_Control_PStream_LE+0x60>
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    199e:	21 e0       	ldi	r18, 0x01	; 1
    19a0:	08 97       	sbiw	r24, 0x08	; 8
    19a2:	09 f0       	breq	.+2      	; 0x19a6 <Endpoint_Write_Control_PStream_LE+0x84>
    19a4:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    19a6:	80 91 e8 00 	lds	r24, 0x00E8
    19aa:	8e 77       	andi	r24, 0x7E	; 126
    19ac:	80 93 e8 00 	sts	0x00E8, r24
    19b0:	cb cf       	rjmp	.-106    	; 0x1948 <Endpoint_Write_Control_PStream_LE+0x26>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    19b2:	21 11       	cpse	r18, r1
    19b4:	cc cf       	rjmp	.-104    	; 0x194e <Endpoint_Write_Control_PStream_LE+0x2c>
    19b6:	0a c0       	rjmp	.+20     	; 0x19cc <Endpoint_Write_Control_PStream_LE+0xaa>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    19b8:	80 91 cc 01 	lds	r24, 0x01CC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    19bc:	88 23       	and	r24, r24
    19be:	61 f0       	breq	.+24     	; 0x19d8 <Endpoint_Write_Control_PStream_LE+0xb6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    19c0:	85 30       	cpi	r24, 0x05	; 5
    19c2:	61 f0       	breq	.+24     	; 0x19dc <Endpoint_Write_Control_PStream_LE+0xba>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    19c4:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    19c8:	83 fd       	sbrc	r24, 3
    19ca:	0a c0       	rjmp	.+20     	; 0x19e0 <Endpoint_Write_Control_PStream_LE+0xbe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    19cc:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    19d0:	82 ff       	sbrs	r24, 2
    19d2:	f2 cf       	rjmp	.-28     	; 0x19b8 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
    19d6:	08 95       	ret
	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    19d8:	82 e0       	ldi	r24, 0x02	; 2
    19da:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    19dc:	83 e0       	ldi	r24, 0x03	; 3
    19de:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    19e2:	08 95       	ret

000019e4 <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    19e4:	98 2f       	mov	r25, r24
    19e6:	97 30       	cpi	r25, 0x07	; 7
    19e8:	58 f5       	brcc	.+86     	; 0x1a40 <Endpoint_ConfigureEndpoint_Prv+0x5c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    19ea:	90 93 e9 00 	sts	0x00E9, r25
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    19ee:	98 17       	cp	r25, r24
    19f0:	39 f0       	breq	.+14     	; 0x1a00 <Endpoint_ConfigureEndpoint_Prv+0x1c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    19f2:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    19f6:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    19fa:	50 91 f0 00 	lds	r21, 0x00F0
    19fe:	03 c0       	rjmp	.+6      	; 0x1a06 <Endpoint_ConfigureEndpoint_Prv+0x22>
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    1a00:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    1a02:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    1a04:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    1a06:	21 ff       	sbrs	r18, 1
    1a08:	19 c0       	rjmp	.+50     	; 0x1a3c <Endpoint_ConfigureEndpoint_Prv+0x58>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    1a0a:	30 91 eb 00 	lds	r19, 0x00EB
    1a0e:	3e 7f       	andi	r19, 0xFE	; 254
    1a10:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    1a14:	30 91 ed 00 	lds	r19, 0x00ED
    1a18:	3d 7f       	andi	r19, 0xFD	; 253
    1a1a:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    1a1e:	30 91 eb 00 	lds	r19, 0x00EB
    1a22:	31 60       	ori	r19, 0x01	; 1
    1a24:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    1a28:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    1a2c:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    1a30:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    1a34:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    1a38:	27 ff       	sbrs	r18, 7
    1a3a:	07 c0       	rjmp	.+14     	; 0x1a4a <Endpoint_ConfigureEndpoint_Prv+0x66>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    1a3c:	9f 5f       	subi	r25, 0xFF	; 255
    1a3e:	d3 cf       	rjmp	.-90     	; 0x19e6 <Endpoint_ConfigureEndpoint_Prv+0x2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1a40:	8f 70       	andi	r24, 0x0F	; 15
    1a42:	80 93 e9 00 	sts	0x00E9, r24
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    1a46:	81 e0       	ldi	r24, 0x01	; 1
    1a48:	08 95       	ret
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    1a4a:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    1a4c:	08 95       	ret

00001a4e <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    1a4e:	80 91 cd 01 	lds	r24, 0x01CD
    1a52:	87 ff       	sbrs	r24, 7
    1a54:	11 c0       	rjmp	.+34     	; 0x1a78 <Endpoint_ClearStatusStage+0x2a>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1a56:	80 91 e8 00 	lds	r24, 0x00E8
	{
		while (!(Endpoint_IsOUTReceived()))
    1a5a:	82 fd       	sbrc	r24, 2
    1a5c:	05 c0       	rjmp	.+10     	; 0x1a68 <Endpoint_ClearStatusStage+0x1a>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a5e:	80 91 cc 01 	lds	r24, 0x01CC
    1a62:	81 11       	cpse	r24, r1
    1a64:	f8 cf       	rjmp	.-16     	; 0x1a56 <Endpoint_ClearStatusStage+0x8>
    1a66:	11 c0       	rjmp	.+34     	; 0x1a8a <Endpoint_ClearStatusStage+0x3c>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1a68:	80 91 e8 00 	lds	r24, 0x00E8
    1a6c:	8b 77       	andi	r24, 0x7B	; 123
    1a6e:	0b c0       	rjmp	.+22     	; 0x1a86 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    1a70:	80 91 cc 01 	lds	r24, 0x01CC
    1a74:	88 23       	and	r24, r24
    1a76:	49 f0       	breq	.+18     	; 0x1a8a <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1a78:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    1a7c:	80 ff       	sbrs	r24, 0
    1a7e:	f8 cf       	rjmp	.-16     	; 0x1a70 <Endpoint_ClearStatusStage+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1a80:	80 91 e8 00 	lds	r24, 0x00E8
    1a84:	8e 77       	andi	r24, 0x7E	; 126
    1a86:	80 93 e8 00 	sts	0x00E8, r24
    1a8a:	08 95       	ret

00001a8c <Endpoint_WaitUntilReady>:
			 *  \return Current USB frame number from the USB controller.
			 */
			static inline uint16_t USB_Device_GetFrameNumber(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline uint16_t USB_Device_GetFrameNumber(void)
			{
				return UDFNUM;
    1a8c:	20 91 e4 00 	lds	r18, 0x00E4
    1a90:	30 91 e5 00 	lds	r19, 0x00E5
    1a94:	95 e6       	ldi	r25, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1a96:	40 91 ec 00 	lds	r20, 0x00EC
    1a9a:	84 2f       	mov	r24, r20
    1a9c:	81 70       	andi	r24, 0x01	; 1
    1a9e:	40 ff       	sbrs	r20, 0
    1aa0:	22 c0       	rjmp	.+68     	; 0x1ae6 <Endpoint_WaitUntilReady+0x5a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1aa2:	80 91 e8 00 	lds	r24, 0x00E8

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
    1aa6:	80 fd       	sbrc	r24, 0
    1aa8:	1c c0       	rjmp	.+56     	; 0x1ae2 <Endpoint_WaitUntilReady+0x56>
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    1aaa:	80 91 cc 01 	lds	r24, 0x01CC

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    1aae:	88 23       	and	r24, r24
    1ab0:	91 f0       	breq	.+36     	; 0x1ad6 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    1ab2:	85 30       	cpi	r24, 0x05	; 5
    1ab4:	91 f0       	breq	.+36     	; 0x1ada <Endpoint_WaitUntilReady+0x4e>
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1ab6:	80 91 eb 00 	lds	r24, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
    1aba:	85 fd       	sbrc	r24, 5
    1abc:	10 c0       	rjmp	.+32     	; 0x1ade <Endpoint_WaitUntilReady+0x52>
    1abe:	40 91 e4 00 	lds	r20, 0x00E4
    1ac2:	50 91 e5 00 	lds	r21, 0x00E5
		  return ENDPOINT_READYWAIT_EndpointStalled;

		uint16_t CurrentFrameNumber = USB_Device_GetFrameNumber();

		if (CurrentFrameNumber != PreviousFrameNumber)
    1ac6:	42 17       	cp	r20, r18
    1ac8:	53 07       	cpc	r21, r19
    1aca:	29 f3       	breq	.-54     	; 0x1a96 <Endpoint_WaitUntilReady+0xa>
    1acc:	9a 01       	movw	r18, r20
    1ace:	91 50       	subi	r25, 0x01	; 1
		{
			PreviousFrameNumber = CurrentFrameNumber;

			if (!(TimeoutMSRem--))
    1ad0:	11 f7       	brne	.-60     	; 0x1a96 <Endpoint_WaitUntilReady+0xa>
			  return ENDPOINT_READYWAIT_Timeout;
    1ad2:	84 e0       	ldi	r24, 0x04	; 4
    1ad4:	08 95       	ret
		}

		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    1ad6:	82 e0       	ldi	r24, 0x02	; 2
    1ad8:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
    1ada:	83 e0       	ldi	r24, 0x03	; 3
    1adc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    1ade:	81 e0       	ldi	r24, 0x01	; 1
    1ae0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
    1ae2:	80 e0       	ldi	r24, 0x00	; 0
    1ae4:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1ae6:	40 91 e8 00 	lds	r20, 0x00E8
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    1aea:	42 ff       	sbrs	r20, 2
    1aec:	de cf       	rjmp	.-68     	; 0x1aaa <Endpoint_WaitUntilReady+0x1e>

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
		}
	}
}
    1aee:	08 95       	ret

00001af0 <USB_Disable>:
	USB_ResetInterface();
}

void USB_Disable(void)
{
	USB_INT_DisableAllInterrupts();
    1af0:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1af4:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <USB_INT_ClearAllInterrupts>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    1af8:	e0 ee       	ldi	r30, 0xE0	; 224
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	81 60       	ori	r24, 0x01	; 1
    1b00:	80 83       	st	Z, r24
			}

			static inline void USB_Controller_Disable(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Disable(void)
			{
				USBCON &= ~(1 << USBE);
    1b02:	e8 ed       	ldi	r30, 0xD8	; 216
    1b04:	f0 e0       	ldi	r31, 0x00	; 0
    1b06:	80 81       	ld	r24, Z
    1b08:	8f 77       	andi	r24, 0x7F	; 127
    1b0a:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b0c:	19 bc       	out	0x29, r1	; 41

			static inline void USB_REG_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_Off(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON &= ~(1 << UVREGE);
    1b0e:	a7 ed       	ldi	r26, 0xD7	; 215
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	8c 91       	ld	r24, X
    1b14:	8e 7f       	andi	r24, 0xFE	; 254
    1b16:	8c 93       	st	X, r24
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1b18:	80 81       	ld	r24, Z
    1b1a:	8f 7e       	andi	r24, 0xEF	; 239
    1b1c:	80 83       	st	Z, r24

	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
    1b1e:	10 92 cb 01 	sts	0x01CB, r1
    1b22:	08 95       	ret

00001b24 <USB_ResetInterface>:
}

void USB_ResetInterface(void)
{
    1b24:	0f 93       	push	r16
    1b26:	1f 93       	push	r17
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    1b2c:	0e 94 e6 0d 	call	0x1bcc	; 0x1bcc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    1b30:	0e 94 ee 0d 	call	0x1bdc	; 0x1bdc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    1b34:	c8 ed       	ldi	r28, 0xD8	; 216
    1b36:	d0 e0       	ldi	r29, 0x00	; 0
    1b38:	88 81       	ld	r24, Y
    1b3a:	8f 77       	andi	r24, 0x7F	; 127
    1b3c:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    1b3e:	88 81       	ld	r24, Y
    1b40:	80 68       	ori	r24, 0x80	; 128
    1b42:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1b44:	88 81       	ld	r24, Y
    1b46:	8f 7d       	andi	r24, 0xDF	; 223
    1b48:	88 83       	st	Y, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1b4a:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    1b4c:	10 92 cc 01 	sts	0x01CC, r1
	USB_Device_ConfigurationNumber  = 0;
    1b50:	10 92 c8 01 	sts	0x01C8, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    1b54:	10 92 ca 01 	sts	0x01CA, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    1b58:	10 92 c9 01 	sts	0x01C9, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    1b5c:	00 ee       	ldi	r16, 0xE0	; 224
    1b5e:	10 e0       	ldi	r17, 0x00	; 0
    1b60:	f8 01       	movw	r30, r16
    1b62:	80 81       	ld	r24, Z
    1b64:	8b 7f       	andi	r24, 0xFB	; 251
    1b66:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    1b68:	88 81       	ld	r24, Y
    1b6a:	81 60       	ori	r24, 0x01	; 1
    1b6c:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1b6e:	42 e0       	ldi	r20, 0x02	; 2
    1b70:	60 e0       	ldi	r22, 0x00	; 0
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1b78:	e1 ee       	ldi	r30, 0xE1	; 225
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	8e 7f       	andi	r24, 0xFE	; 254
    1b80:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1b82:	e2 ee       	ldi	r30, 0xE2	; 226
    1b84:	f0 e0       	ldi	r31, 0x00	; 0
    1b86:	80 81       	ld	r24, Z
    1b88:	81 60       	ori	r24, 0x01	; 1
    1b8a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    1b8c:	80 81       	ld	r24, Z
    1b8e:	88 60       	ori	r24, 0x08	; 8
    1b90:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    1b92:	f8 01       	movw	r30, r16
    1b94:	80 81       	ld	r24, Z
    1b96:	8e 7f       	andi	r24, 0xFE	; 254
    1b98:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    1b9a:	88 81       	ld	r24, Y
    1b9c:	80 61       	ori	r24, 0x10	; 16
    1b9e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    1ba0:	df 91       	pop	r29
    1ba2:	cf 91       	pop	r28
    1ba4:	1f 91       	pop	r17
    1ba6:	0f 91       	pop	r16
    1ba8:	08 95       	ret

00001baa <USB_Init>:
			}

			static inline void USB_OTGPAD_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_Off(void)
			{
				USBCON &= ~(1 << OTGPADE);
    1baa:	e8 ed       	ldi	r30, 0xD8	; 216
    1bac:	f0 e0       	ldi	r31, 0x00	; 0
    1bae:	80 81       	ld	r24, Z
    1bb0:	8f 7e       	andi	r24, 0xEF	; 239
    1bb2:	80 83       	st	Z, r24

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    1bb4:	e7 ed       	ldi	r30, 0xD7	; 215
    1bb6:	f0 e0       	ldi	r31, 0x00	; 0
    1bb8:	80 81       	ld	r24, Z
    1bba:	81 60       	ori	r24, 0x01	; 1
    1bbc:	80 83       	st	Z, r24
	  USB_REG_Off();

	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = (1 << PDIV2);
    1bbe:	84 e0       	ldi	r24, 0x04	; 4
    1bc0:	82 bf       	out	0x32, r24	; 50
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    1bc2:	81 e0       	ldi	r24, 0x01	; 1
    1bc4:	80 93 cb 01 	sts	0x01CB, r24

	USB_ResetInterface();
    1bc8:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <USB_ResetInterface>

00001bcc <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);
    1bcc:	e8 ed       	ldi	r30, 0xD8	; 216
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	80 81       	ld	r24, Z
    1bd2:	8e 7f       	andi	r24, 0xFE	; 254
    1bd4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    1bd6:	10 92 e2 00 	sts	0x00E2, r1
    1bda:	08 95       	ret

00001bdc <USB_INT_ClearAllInterrupts>:
}

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    1bdc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    1be0:	10 92 e1 00 	sts	0x00E1, r1
    1be4:	08 95       	ret

00001be6 <__vector_10>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
    1be6:	1f 92       	push	r1
    1be8:	0f 92       	push	r0
    1bea:	0f b6       	in	r0, 0x3f	; 63
    1bec:	0f 92       	push	r0
    1bee:	11 24       	eor	r1, r1
    1bf0:	2f 93       	push	r18
    1bf2:	3f 93       	push	r19
    1bf4:	4f 93       	push	r20
    1bf6:	5f 93       	push	r21
    1bf8:	6f 93       	push	r22
    1bfa:	7f 93       	push	r23
    1bfc:	8f 93       	push	r24
    1bfe:	9f 93       	push	r25
    1c00:	af 93       	push	r26
    1c02:	bf 93       	push	r27
    1c04:	ef 93       	push	r30
    1c06:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    1c08:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    1c0c:	82 ff       	sbrs	r24, 2
    1c0e:	0b c0       	rjmp	.+22     	; 0x1c26 <__vector_10+0x40>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    1c10:	80 91 e2 00 	lds	r24, 0x00E2
    1c14:	82 ff       	sbrs	r24, 2
    1c16:	07 c0       	rjmp	.+14     	; 0x1c26 <__vector_10+0x40>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    1c18:	80 91 e1 00 	lds	r24, 0x00E1
    1c1c:	8b 7f       	andi	r24, 0xFB	; 251
    1c1e:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    1c22:	0e 94 08 0a 	call	0x1410	; 0x1410 <EVENT_USB_Device_StartOfFrame>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    1c26:	80 91 da 00 	lds	r24, 0x00DA
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    1c2a:	80 ff       	sbrs	r24, 0
    1c2c:	1f c0       	rjmp	.+62     	; 0x1c6c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    1c2e:	80 91 d8 00 	lds	r24, 0x00D8
    1c32:	80 ff       	sbrs	r24, 0
    1c34:	1b c0       	rjmp	.+54     	; 0x1c6c <__vector_10+0x86>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    1c36:	80 91 da 00 	lds	r24, 0x00DA
    1c3a:	8e 7f       	andi	r24, 0xFE	; 254
    1c3c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    1c40:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    1c44:	80 ff       	sbrs	r24, 0
    1c46:	0d c0       	rjmp	.+26     	; 0x1c62 <__vector_10+0x7c>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1c48:	80 e1       	ldi	r24, 0x10	; 16
    1c4a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1c4c:	82 e1       	ldi	r24, 0x12	; 18
    1c4e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    1c50:	09 b4       	in	r0, 0x29	; 41
    1c52:	00 fe       	sbrs	r0, 0
    1c54:	fd cf       	rjmp	.-6      	; 0x1c50 <__vector_10+0x6a>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	80 93 cc 01 	sts	0x01CC, r24
			EVENT_USB_Device_Connect();
    1c5c:	0e 94 eb 09 	call	0x13d6	; 0x13d6 <EVENT_USB_Device_Connect>
    1c60:	05 c0       	rjmp	.+10     	; 0x1c6c <__vector_10+0x86>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c62:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    1c64:	10 92 cc 01 	sts	0x01CC, r1
			EVENT_USB_Device_Disconnect();
    1c68:	0e 94 fd 09 	call	0x13fa	; 0x13fa <EVENT_USB_Device_Disconnect>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    1c6c:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    1c70:	80 ff       	sbrs	r24, 0
    1c72:	19 c0       	rjmp	.+50     	; 0x1ca6 <__vector_10+0xc0>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    1c74:	80 91 e2 00 	lds	r24, 0x00E2
    1c78:	80 ff       	sbrs	r24, 0
    1c7a:	15 c0       	rjmp	.+42     	; 0x1ca6 <__vector_10+0xc0>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1c7c:	80 91 e2 00 	lds	r24, 0x00E2
    1c80:	8e 7f       	andi	r24, 0xFE	; 254
    1c82:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1c86:	80 91 e2 00 	lds	r24, 0x00E2
    1c8a:	80 61       	ori	r24, 0x10	; 16
    1c8c:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    1c90:	80 91 d8 00 	lds	r24, 0x00D8
    1c94:	80 62       	ori	r24, 0x20	; 32
    1c96:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    1c9a:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    1c9c:	85 e0       	ldi	r24, 0x05	; 5
    1c9e:	80 93 cc 01 	sts	0x01CC, r24
		EVENT_USB_Device_Suspend();
    1ca2:	0e 94 10 0b 	call	0x1620	; 0x1620 <EVENT_USB_Device_Suspend>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    1ca6:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    1caa:	84 ff       	sbrs	r24, 4
    1cac:	30 c0       	rjmp	.+96     	; 0x1d0e <__vector_10+0x128>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    1cae:	80 91 e2 00 	lds	r24, 0x00E2
    1cb2:	84 ff       	sbrs	r24, 4
    1cb4:	2c c0       	rjmp	.+88     	; 0x1d0e <__vector_10+0x128>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    1cb6:	80 e1       	ldi	r24, 0x10	; 16
    1cb8:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    1cba:	82 e1       	ldi	r24, 0x12	; 18
    1cbc:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    1cbe:	09 b4       	in	r0, 0x29	; 41
    1cc0:	00 fe       	sbrs	r0, 0
    1cc2:	fd cf       	rjmp	.-6      	; 0x1cbe <__vector_10+0xd8>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    1cc4:	80 91 d8 00 	lds	r24, 0x00D8
    1cc8:	8f 7d       	andi	r24, 0xDF	; 223
    1cca:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    1cce:	80 91 e1 00 	lds	r24, 0x00E1
    1cd2:	8f 7e       	andi	r24, 0xEF	; 239
    1cd4:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    1cd8:	80 91 e2 00 	lds	r24, 0x00E2
    1cdc:	8f 7e       	andi	r24, 0xEF	; 239
    1cde:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    1ce2:	80 91 e2 00 	lds	r24, 0x00E2
    1ce6:	81 60       	ori	r24, 0x01	; 1
    1ce8:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    1cec:	80 91 c8 01 	lds	r24, 0x01C8
    1cf0:	88 23       	and	r24, r24
    1cf2:	11 f0       	breq	.+4      	; 0x1cf8 <__vector_10+0x112>
		  USB_DeviceState = DEVICE_STATE_Configured;
    1cf4:	84 e0       	ldi	r24, 0x04	; 4
    1cf6:	07 c0       	rjmp	.+14     	; 0x1d06 <__vector_10+0x120>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    1cf8:	80 91 e3 00 	lds	r24, 0x00E3
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Addressed : DEVICE_STATE_Powered;
    1cfc:	87 fd       	sbrc	r24, 7
    1cfe:	02 c0       	rjmp	.+4      	; 0x1d04 <__vector_10+0x11e>
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	01 c0       	rjmp	.+2      	; 0x1d06 <__vector_10+0x120>
    1d04:	83 e0       	ldi	r24, 0x03	; 3
    1d06:	80 93 cc 01 	sts	0x01CC, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    1d0a:	0e 94 6f 0b 	call	0x16de	; 0x16de <EVENT_USB_Device_WakeUp>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    1d0e:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    1d12:	83 ff       	sbrs	r24, 3
    1d14:	29 c0       	rjmp	.+82     	; 0x1d68 <__vector_10+0x182>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    1d16:	80 91 e2 00 	lds	r24, 0x00E2
    1d1a:	83 ff       	sbrs	r24, 3
    1d1c:	25 c0       	rjmp	.+74     	; 0x1d68 <__vector_10+0x182>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    1d1e:	80 91 e1 00 	lds	r24, 0x00E1
    1d22:	87 7f       	andi	r24, 0xF7	; 247
    1d24:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    1d28:	82 e0       	ldi	r24, 0x02	; 2
    1d2a:	80 93 cc 01 	sts	0x01CC, r24
		USB_Device_ConfigurationNumber = 0;
    1d2e:	10 92 c8 01 	sts	0x01C8, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    1d32:	80 91 e1 00 	lds	r24, 0x00E1
    1d36:	8e 7f       	andi	r24, 0xFE	; 254
    1d38:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    1d3c:	80 91 e2 00 	lds	r24, 0x00E2
    1d40:	8e 7f       	andi	r24, 0xFE	; 254
    1d42:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    1d46:	80 91 e2 00 	lds	r24, 0x00E2
    1d4a:	80 61       	ori	r24, 0x10	; 16
    1d4c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);

				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;

				return Endpoint_ConfigureEndpoint_Prv(Number,
    1d50:	42 e0       	ldi	r20, 0x02	; 2
    1d52:	60 e0       	ldi	r22, 0x00	; 0
    1d54:	80 e0       	ldi	r24, 0x00	; 0
    1d56:	0e 94 f2 0c 	call	0x19e4	; 0x19e4 <Endpoint_ConfigureEndpoint_Prv>
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1d5a:	80 91 f0 00 	lds	r24, 0x00F0
    1d5e:	88 60       	ori	r24, 0x08	; 8
    1d60:	80 93 f0 00 	sts	0x00F0, r24

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    1d64:	0e 94 04 0a 	call	0x1408	; 0x1408 <EVENT_USB_Device_Reset>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    1d68:	ff 91       	pop	r31
    1d6a:	ef 91       	pop	r30
    1d6c:	bf 91       	pop	r27
    1d6e:	af 91       	pop	r26
    1d70:	9f 91       	pop	r25
    1d72:	8f 91       	pop	r24
    1d74:	7f 91       	pop	r23
    1d76:	6f 91       	pop	r22
    1d78:	5f 91       	pop	r21
    1d7a:	4f 91       	pop	r20
    1d7c:	3f 91       	pop	r19
    1d7e:	2f 91       	pop	r18
    1d80:	0f 90       	pop	r0
    1d82:	0f be       	out	0x3f, r0	; 63
    1d84:	0f 90       	pop	r0
    1d86:	1f 90       	pop	r1
    1d88:	18 95       	reti

00001d8a <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    1d8a:	1f 92       	push	r1
    1d8c:	0f 92       	push	r0
    1d8e:	0f b6       	in	r0, 0x3f	; 63
    1d90:	0f 92       	push	r0
    1d92:	11 24       	eor	r1, r1
    1d94:	2f 93       	push	r18
    1d96:	3f 93       	push	r19
    1d98:	4f 93       	push	r20
    1d9a:	5f 93       	push	r21
    1d9c:	6f 93       	push	r22
    1d9e:	7f 93       	push	r23
    1da0:	8f 93       	push	r24
    1da2:	9f 93       	push	r25
    1da4:	af 93       	push	r26
    1da6:	bf 93       	push	r27
    1da8:	cf 93       	push	r28
    1daa:	df 93       	push	r29
    1dac:	ef 93       	push	r30
    1dae:	ff 93       	push	r31
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1db0:	c0 91 e9 00 	lds	r28, 0x00E9
    1db4:	cf 70       	andi	r28, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    1db6:	80 91 ec 00 	lds	r24, 0x00EC
    1dba:	d8 2f       	mov	r29, r24
    1dbc:	d1 70       	andi	r29, 0x01	; 1
    1dbe:	80 fd       	sbrc	r24, 0
    1dc0:	d0 e8       	ldi	r29, 0x80	; 128
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1dc2:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  &= ~(1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX &= ~(1 << RXSTPE);
    1dc6:	80 91 f0 00 	lds	r24, 0x00F0
    1dca:	87 7f       	andi	r24, 0xF7	; 247
    1dcc:	80 93 f0 00 	sts	0x00F0, r24
			static inline void GlobalInterruptEnable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				sei();
    1dd0:	78 94       	sei
	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Disable(USB_INT_RXSTPI);

	GlobalInterruptEnable();

	USB_Device_ProcessControlRequest();
    1dd2:	0e 94 09 0f 	call	0x1e12	; 0x1e12 <USB_Device_ProcessControlRequest>
    1dd6:	10 92 e9 00 	sts	0x00E9, r1
						break;
					case USB_INT_SOFI:
						UDIEN  |= (1 << SOFE);
						break;
					case USB_INT_RXSTPI:
						UEIENX |= (1 << RXSTPE);
    1dda:	80 91 f0 00 	lds	r24, 0x00F0
    1dde:	88 60       	ori	r24, 0x08	; 8
    1de0:	80 93 f0 00 	sts	0x00F0, r24
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    1de4:	cd 2b       	or	r28, r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1de6:	cf 70       	andi	r28, 0x0F	; 15
    1de8:	c0 93 e9 00 	sts	0x00E9, r28

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
	USB_INT_Enable(USB_INT_RXSTPI);
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
}
    1dec:	ff 91       	pop	r31
    1dee:	ef 91       	pop	r30
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    1e12:	1f 93       	push	r17
    1e14:	cf 93       	push	r28
    1e16:	df 93       	push	r29
    1e18:	cd b7       	in	r28, 0x3d	; 61
    1e1a:	de b7       	in	r29, 0x3e	; 62
    1e1c:	aa 97       	sbiw	r28, 0x2a	; 42
    1e1e:	0f b6       	in	r0, 0x3f	; 63
    1e20:	f8 94       	cli
    1e22:	de bf       	out	0x3e, r29	; 62
    1e24:	0f be       	out	0x3f, r0	; 63
    1e26:	cd bf       	out	0x3d, r28	; 61
    1e28:	ed ec       	ldi	r30, 0xCD	; 205
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	88 e0       	ldi	r24, 0x08	; 8
    1e2e:	8e 0f       	add	r24, r30
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e30:	90 91 f1 00 	lds	r25, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    1e34:	91 93       	st	Z+, r25
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    1e36:	8e 13       	cpse	r24, r30
    1e38:	fb cf       	rjmp	.-10     	; 0x1e30 <USB_Device_ProcessControlRequest+0x1e>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    1e3a:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    1e3e:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    1e42:	83 ff       	sbrs	r24, 3
    1e44:	1f c1       	rjmp	.+574    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    1e46:	80 91 cd 01 	lds	r24, 0x01CD

		switch (USB_ControlRequest.bRequest)
    1e4a:	90 91 ce 01 	lds	r25, 0x01CE
    1e4e:	49 2f       	mov	r20, r25
    1e50:	50 e0       	ldi	r21, 0x00	; 0
    1e52:	4a 30       	cpi	r20, 0x0A	; 10
    1e54:	51 05       	cpc	r21, r1
    1e56:	08 f0       	brcs	.+2      	; 0x1e5a <USB_Device_ProcessControlRequest+0x48>
    1e58:	15 c1       	rjmp	.+554    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
    1e5a:	fa 01       	movw	r30, r20
    1e5c:	ea 5a       	subi	r30, 0xAA	; 170
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__tablejump2__>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1e64:	80 38       	cpi	r24, 0x80	; 128
    1e66:	81 f0       	breq	.+32     	; 0x1e88 <USB_Device_ProcessControlRequest+0x76>
    1e68:	82 38       	cpi	r24, 0x82	; 130
    1e6a:	09 f0       	breq	.+2      	; 0x1e6e <USB_Device_ProcessControlRequest+0x5c>
    1e6c:	0b c1       	rjmp	.+534    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e6e:	80 91 d1 01 	lds	r24, 0x01D1
    1e72:	8f 70       	andi	r24, 0x0F	; 15
    1e74:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    1e78:	80 91 eb 00 	lds	r24, 0x00EB
    1e7c:	85 fb       	bst	r24, 5
    1e7e:	88 27       	eor	r24, r24
    1e80:	80 f9       	bld	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e82:	10 92 e9 00 	sts	0x00E9, r1
    1e86:	06 c0       	rjmp	.+12     	; 0x1e94 <USB_Device_ProcessControlRequest+0x82>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    1e88:	80 91 c9 01 	lds	r24, 0x01C9
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    1e8c:	90 91 ca 01 	lds	r25, 0x01CA
    1e90:	91 11       	cpse	r25, r1
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    1e92:	82 60       	ori	r24, 0x02	; 2
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1e94:	90 91 e8 00 	lds	r25, 0x00E8
    1e98:	97 7f       	andi	r25, 0xF7	; 247
    1e9a:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    1e9e:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Data >> 8);
    1ea2:	10 92 f1 00 	sts	0x00F1, r1
    1ea6:	c8 c0       	rjmp	.+400    	; 0x2038 <USB_Device_ProcessControlRequest+0x226>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1ea8:	28 2f       	mov	r18, r24
    1eaa:	2d 7f       	andi	r18, 0xFD	; 253
    1eac:	09 f0       	breq	.+2      	; 0x1eb0 <USB_Device_ProcessControlRequest+0x9e>
    1eae:	ea c0       	rjmp	.+468    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    1eb0:	88 23       	and	r24, r24
    1eb2:	19 f0       	breq	.+6      	; 0x1eba <USB_Device_ProcessControlRequest+0xa8>
    1eb4:	82 30       	cpi	r24, 0x02	; 2
    1eb6:	61 f0       	breq	.+24     	; 0x1ed0 <USB_Device_ProcessControlRequest+0xbe>
    1eb8:	e5 c0       	rjmp	.+458    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    1eba:	80 91 cf 01 	lds	r24, 0x01CF
    1ebe:	81 30       	cpi	r24, 0x01	; 1
    1ec0:	09 f0       	breq	.+2      	; 0x1ec4 <USB_Device_ProcessControlRequest+0xb2>
    1ec2:	e0 c0       	rjmp	.+448    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    1ec4:	93 30       	cpi	r25, 0x03	; 3
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <USB_Device_ProcessControlRequest+0xb8>
    1ec8:	80 e0       	ldi	r24, 0x00	; 0
    1eca:	80 93 ca 01 	sts	0x01CA, r24
    1ece:	2b c0       	rjmp	.+86     	; 0x1f26 <USB_Device_ProcessControlRequest+0x114>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    1ed0:	80 91 cf 01 	lds	r24, 0x01CF
    1ed4:	81 11       	cpse	r24, r1
    1ed6:	27 c0       	rjmp	.+78     	; 0x1f26 <USB_Device_ProcessControlRequest+0x114>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    1ed8:	80 91 d1 01 	lds	r24, 0x01D1
    1edc:	8f 70       	andi	r24, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    1ede:	09 f4       	brne	.+2      	; 0x1ee2 <USB_Device_ProcessControlRequest+0xd0>
    1ee0:	d1 c0       	rjmp	.+418    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1ee2:	80 93 e9 00 	sts	0x00E9, r24
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    1ee6:	20 91 eb 00 	lds	r18, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    1eea:	20 ff       	sbrs	r18, 0
    1eec:	1c c0       	rjmp	.+56     	; 0x1f26 <USB_Device_ProcessControlRequest+0x114>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    1eee:	93 30       	cpi	r25, 0x03	; 3
    1ef0:	21 f4       	brne	.+8      	; 0x1efa <USB_Device_ProcessControlRequest+0xe8>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    1ef2:	80 91 eb 00 	lds	r24, 0x00EB
    1ef6:	80 62       	ori	r24, 0x20	; 32
    1ef8:	14 c0       	rjmp	.+40     	; 0x1f22 <USB_Device_ProcessControlRequest+0x110>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    1efa:	90 91 eb 00 	lds	r25, 0x00EB
    1efe:	90 61       	ori	r25, 0x10	; 16
    1f00:	90 93 eb 00 	sts	0x00EB, r25
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    1f04:	21 e0       	ldi	r18, 0x01	; 1
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	a9 01       	movw	r20, r18
    1f0a:	02 c0       	rjmp	.+4      	; 0x1f10 <USB_Device_ProcessControlRequest+0xfe>
    1f0c:	44 0f       	add	r20, r20
    1f0e:	55 1f       	adc	r21, r21
    1f10:	8a 95       	dec	r24
    1f12:	e2 f7       	brpl	.-8      	; 0x1f0c <USB_Device_ProcessControlRequest+0xfa>
    1f14:	40 93 ea 00 	sts	0x00EA, r20
				UERST = 0;
    1f18:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    1f1c:	80 91 eb 00 	lds	r24, 0x00EB
    1f20:	88 60       	ori	r24, 0x08	; 8
    1f22:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1f26:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1f2a:	80 91 e8 00 	lds	r24, 0x00E8
    1f2e:	87 7f       	andi	r24, 0xF7	; 247
    1f30:	86 c0       	rjmp	.+268    	; 0x203e <USB_Device_ProcessControlRequest+0x22c>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    1f32:	81 11       	cpse	r24, r1
    1f34:	a7 c0       	rjmp	.+334    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    1f36:	10 91 cf 01 	lds	r17, 0x01CF
    1f3a:	1f 77       	andi	r17, 0x7F	; 127
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    1f3c:	80 91 e3 00 	lds	r24, 0x00E3
    1f40:	80 78       	andi	r24, 0x80	; 128
    1f42:	81 2b       	or	r24, r17
    1f44:	80 93 e3 00 	sts	0x00E3, r24
    1f48:	80 91 e8 00 	lds	r24, 0x00E8
    1f4c:	87 7f       	andi	r24, 0xF7	; 247
    1f4e:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_SetDeviceAddress(DeviceAddress);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    1f52:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    1f56:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    1f5a:	80 ff       	sbrs	r24, 0
    1f5c:	fc cf       	rjmp	.-8      	; 0x1f56 <USB_Device_ProcessControlRequest+0x144>
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableDeviceAddress(const uint8_t Address)
			{
				(void)Address;

				UDADDR |= (1 << ADDEN);
    1f5e:	80 91 e3 00 	lds	r24, 0x00E3
    1f62:	80 68       	ori	r24, 0x80	; 128
    1f64:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_EnableDeviceAddress(DeviceAddress);

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    1f68:	11 11       	cpse	r17, r1
    1f6a:	02 c0       	rjmp	.+4      	; 0x1f70 <USB_Device_ProcessControlRequest+0x15e>
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	01 c0       	rjmp	.+2      	; 0x1f72 <USB_Device_ProcessControlRequest+0x160>
    1f70:	83 e0       	ldi	r24, 0x03	; 3
    1f72:	80 93 cc 01 	sts	0x01CC, r24
    1f76:	86 c0       	rjmp	.+268    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    1f78:	80 58       	subi	r24, 0x80	; 128
    1f7a:	82 30       	cpi	r24, 0x02	; 2
    1f7c:	08 f0       	brcs	.+2      	; 0x1f80 <USB_Device_ProcessControlRequest+0x16e>
    1f7e:	82 c0       	rjmp	.+260    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    1f80:	80 91 cf 01 	lds	r24, 0x01CF
    1f84:	90 91 d0 01 	lds	r25, 0x01D0
    1f88:	8c 3d       	cpi	r24, 0xDC	; 220
    1f8a:	53 e0       	ldi	r21, 0x03	; 3
    1f8c:	95 07       	cpc	r25, r21
    1f8e:	79 f5       	brne	.+94     	; 0x1fee <USB_Device_ProcessControlRequest+0x1dc>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    1f90:	83 e0       	ldi	r24, 0x03	; 3
    1f92:	8a 83       	std	Y+2, r24	; 0x02
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    1f94:	8a e2       	ldi	r24, 0x2A	; 42
    1f96:	89 83       	std	Y+1, r24	; 0x01
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    1f98:	4f b7       	in	r20, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    1f9a:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    1f9c:	de 01       	movw	r26, r28
    1f9e:	13 96       	adiw	r26, 0x03	; 3
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fa0:	20 e0       	ldi	r18, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    1fa2:	3e e0       	ldi	r19, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    1fa4:	51 e2       	ldi	r21, 0x21	; 33
    1fa6:	e3 2f       	mov	r30, r19
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	50 93 57 00 	sts	0x0057, r21
    1fae:	e4 91       	lpm	r30, Z

					if (SerialCharNum & 0x01)
    1fb0:	20 ff       	sbrs	r18, 0
    1fb2:	03 c0       	rjmp	.+6      	; 0x1fba <USB_Device_ProcessControlRequest+0x1a8>
					{
						SerialByte >>= 4;
    1fb4:	e2 95       	swap	r30
    1fb6:	ef 70       	andi	r30, 0x0F	; 15
						SigReadAddress++;
    1fb8:	3f 5f       	subi	r19, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    1fba:	ef 70       	andi	r30, 0x0F	; 15
    1fbc:	8e 2f       	mov	r24, r30
    1fbe:	90 e0       	ldi	r25, 0x00	; 0

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    1fc0:	ea 30       	cpi	r30, 0x0A	; 10
    1fc2:	10 f0       	brcs	.+4      	; 0x1fc8 <USB_Device_ProcessControlRequest+0x1b6>
    1fc4:	c7 96       	adiw	r24, 0x37	; 55
    1fc6:	01 c0       	rjmp	.+2      	; 0x1fca <USB_Device_ProcessControlRequest+0x1b8>
    1fc8:	c0 96       	adiw	r24, 0x30	; 48
    1fca:	8d 93       	st	X+, r24
    1fcc:	9d 93       	st	X+, r25
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    1fce:	2f 5f       	subi	r18, 0xFF	; 255
    1fd0:	24 31       	cpi	r18, 0x14	; 20
    1fd2:	49 f7       	brne	.-46     	; 0x1fa6 <USB_Device_ProcessControlRequest+0x194>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    1fd4:	4f bf       	out	0x3f, r20	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    1fd6:	80 91 e8 00 	lds	r24, 0x00E8
    1fda:	87 7f       	andi	r24, 0xF7	; 247
    1fdc:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    1fe0:	6a e2       	ldi	r22, 0x2A	; 42
    1fe2:	70 e0       	ldi	r23, 0x00	; 0
    1fe4:	ce 01       	movw	r24, r28
    1fe6:	01 96       	adiw	r24, 0x01	; 1
    1fe8:	0e 94 2e 0c 	call	0x185c	; 0x185c <Endpoint_Write_Control_Stream_LE>
    1fec:	14 c0       	rjmp	.+40     	; 0x2016 <USB_Device_ProcessControlRequest+0x204>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    1fee:	ae 01       	movw	r20, r28
    1ff0:	4f 5f       	subi	r20, 0xFF	; 255
    1ff2:	5f 4f       	sbci	r21, 0xFF	; 255
    1ff4:	60 91 d1 01 	lds	r22, 0x01D1
    1ff8:	0e 94 75 0b 	call	0x16ea	; 0x16ea <CALLBACK_USB_GetDescriptor>
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	89 2b       	or	r24, r25
    2000:	09 f4       	brne	.+2      	; 0x2004 <USB_Device_ProcessControlRequest+0x1f2>
    2002:	40 c0       	rjmp	.+128    	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
    2004:	90 91 e8 00 	lds	r25, 0x00E8
    2008:	97 7f       	andi	r25, 0xF7	; 247
    200a:	90 93 e8 00 	sts	0x00E8, r25
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    200e:	89 81       	ldd	r24, Y+1	; 0x01
    2010:	9a 81       	ldd	r25, Y+2	; 0x02
    2012:	0e 94 91 0c 	call	0x1922	; 0x1922 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2016:	80 91 e8 00 	lds	r24, 0x00E8
    201a:	8b 77       	andi	r24, 0x7B	; 123
    201c:	80 93 e8 00 	sts	0x00E8, r24
    2020:	31 c0       	rjmp	.+98     	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    2022:	80 38       	cpi	r24, 0x80	; 128
    2024:	79 f5       	brne	.+94     	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2026:	80 91 e8 00 	lds	r24, 0x00E8
    202a:	87 7f       	andi	r24, 0xF7	; 247
    202c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    2030:	80 91 c8 01 	lds	r24, 0x01C8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    2034:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2038:	80 91 e8 00 	lds	r24, 0x00E8
    203c:	8e 77       	andi	r24, 0x7E	; 126
    203e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    2042:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>
    2046:	1e c0       	rjmp	.+60     	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    2048:	81 11       	cpse	r24, r1
    204a:	1c c0       	rjmp	.+56     	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    204c:	90 91 cf 01 	lds	r25, 0x01CF
    2050:	92 30       	cpi	r25, 0x02	; 2
    2052:	c0 f4       	brcc	.+48     	; 0x2084 <USB_Device_ProcessControlRequest+0x272>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    2054:	80 91 e8 00 	lds	r24, 0x00E8
    2058:	87 7f       	andi	r24, 0xF7	; 247
    205a:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    205e:	90 93 c8 01 	sts	0x01C8, r25

	Endpoint_ClearStatusStage();
    2062:	0e 94 27 0d 	call	0x1a4e	; 0x1a4e <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    2066:	80 91 c8 01 	lds	r24, 0x01C8
    206a:	81 11       	cpse	r24, r1
    206c:	06 c0       	rjmp	.+12     	; 0x207a <USB_Device_ProcessControlRequest+0x268>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    206e:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    2072:	87 fd       	sbrc	r24, 7
    2074:	02 c0       	rjmp	.+4      	; 0x207a <USB_Device_ProcessControlRequest+0x268>
    2076:	81 e0       	ldi	r24, 0x01	; 1
    2078:	01 c0       	rjmp	.+2      	; 0x207c <USB_Device_ProcessControlRequest+0x26a>
    207a:	84 e0       	ldi	r24, 0x04	; 4
    207c:	80 93 cc 01 	sts	0x01CC, r24

	EVENT_USB_Device_ConfigurationChanged();
    2080:	0e 94 49 0a 	call	0x1492	; 0x1492 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    2084:	80 91 e8 00 	lds	r24, 0x00E8
			default:
				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    2088:	83 ff       	sbrs	r24, 3
    208a:	0a c0       	rjmp	.+20     	; 0x20a0 <USB_Device_ProcessControlRequest+0x28e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    208c:	80 91 e8 00 	lds	r24, 0x00E8
    2090:	87 7f       	andi	r24, 0xF7	; 247
    2092:	80 93 e8 00 	sts	0x00E8, r24
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    2096:	80 91 eb 00 	lds	r24, 0x00EB
    209a:	80 62       	ori	r24, 0x20	; 32
    209c:	80 93 eb 00 	sts	0x00EB, r24
	{
		Endpoint_ClearSETUP();
		Endpoint_StallTransaction();
	}
}
    20a0:	aa 96       	adiw	r28, 0x2a	; 42
    20a2:	0f b6       	in	r0, 0x3f	; 63
    20a4:	f8 94       	cli
    20a6:	de bf       	out	0x3e, r29	; 62
    20a8:	0f be       	out	0x3f, r0	; 63
    20aa:	cd bf       	out	0x3d, r28	; 61
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	08 95       	ret

000020b4 <host_set_driver>:
static uint16_t last_consumer_report = 0;


void host_set_driver(host_driver_t *d)
{
    driver = d;
    20b4:	90 93 5e 01 	sts	0x015E, r25
    20b8:	80 93 5d 01 	sts	0x015D, r24
    20bc:	08 95       	ret

000020be <host_keyboard_leds>:
    return driver;
}

uint8_t host_keyboard_leds(void)
{
    if (!driver) return 0;
    20be:	e0 91 5d 01 	lds	r30, 0x015D
    20c2:	f0 91 5e 01 	lds	r31, 0x015E
    20c6:	30 97       	sbiw	r30, 0x00	; 0
    20c8:	21 f0       	breq	.+8      	; 0x20d2 <host_keyboard_leds+0x14>
    return (*driver->keyboard_leds)();
    20ca:	01 90       	ld	r0, Z+
    20cc:	f0 81       	ld	r31, Z
    20ce:	e0 2d       	mov	r30, r0
    20d0:	09 94       	ijmp
}
    20d2:	80 e0       	ldi	r24, 0x00	; 0
    20d4:	08 95       	ret

000020d6 <host_keyboard_send>:
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    20d6:	ef 92       	push	r14
    20d8:	ff 92       	push	r15
    20da:	0f 93       	push	r16
    20dc:	1f 93       	push	r17
    20de:	cf 93       	push	r28
    20e0:	df 93       	push	r29
    if (!driver) return;
    20e2:	e0 91 5d 01 	lds	r30, 0x015D
    20e6:	f0 91 5e 01 	lds	r31, 0x015E
    20ea:	30 97       	sbiw	r30, 0x00	; 0
    20ec:	b1 f1       	breq	.+108    	; 0x215a <host_keyboard_send+0x84>
    20ee:	8c 01       	movw	r16, r24
    (*driver->send_keyboard)(report);
    20f0:	02 80       	ldd	r0, Z+2	; 0x02
    20f2:	f3 81       	ldd	r31, Z+3	; 0x03
    20f4:	e0 2d       	mov	r30, r0
    20f6:	09 95       	icall

    if (debug_keyboard) {
    20f8:	80 91 b7 01 	lds	r24, 0x01B7
    20fc:	82 ff       	sbrs	r24, 2
    20fe:	2d c0       	rjmp	.+90     	; 0x215a <host_keyboard_send+0x84>
        dprint("keyboard_report: ");
    2100:	80 ff       	sbrs	r24, 0
    2102:	04 c0       	rjmp	.+8      	; 0x210c <host_keyboard_send+0x36>
    2104:	85 ec       	ldi	r24, 0xC5	; 197
    2106:	93 e0       	ldi	r25, 0x03	; 3
    2108:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    210c:	e8 01       	movw	r28, r16
    if (!driver) return 0;
    return (*driver->keyboard_leds)();
}
/* send report */
void host_keyboard_send(report_keyboard_t *report)
{
    210e:	18 e0       	ldi	r17, 0x08	; 8
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
    2110:	8f eb       	ldi	r24, 0xBF	; 191
    2112:	e8 2e       	mov	r14, r24
    2114:	83 e0       	ldi	r24, 0x03	; 3
    2116:	f8 2e       	mov	r15, r24
    2118:	80 91 b7 01 	lds	r24, 0x01B7
    211c:	80 ff       	sbrs	r24, 0
    211e:	0b c0       	rjmp	.+22     	; 0x2136 <host_keyboard_send+0x60>
    2120:	88 81       	ld	r24, Y
    2122:	1f 92       	push	r1
    2124:	8f 93       	push	r24
    2126:	ff 92       	push	r15
    2128:	ef 92       	push	r14
    212a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    212e:	0f 90       	pop	r0
    2130:	0f 90       	pop	r0
    2132:	0f 90       	pop	r0
    2134:	0f 90       	pop	r0
    2136:	11 50       	subi	r17, 0x01	; 1
    2138:	21 96       	adiw	r28, 0x01	; 1
    if (!driver) return;
    (*driver->send_keyboard)(report);

    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
    213a:	11 11       	cpse	r17, r1
    213c:	ed cf       	rjmp	.-38     	; 0x2118 <host_keyboard_send+0x42>
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    213e:	80 91 b7 01 	lds	r24, 0x01B7
    2142:	80 ff       	sbrs	r24, 0
    2144:	0a c0       	rjmp	.+20     	; 0x215a <host_keyboard_send+0x84>
    2146:	8d eb       	ldi	r24, 0xBD	; 189
    2148:	93 e0       	ldi	r25, 0x03	; 3
    }
}
    214a:	df 91       	pop	r29
    214c:	cf 91       	pop	r28
    214e:	1f 91       	pop	r17
    2150:	0f 91       	pop	r16
    2152:	ff 90       	pop	r15
    2154:	ef 90       	pop	r14
    if (debug_keyboard) {
        dprint("keyboard_report: ");
        for (uint8_t i = 0; i < KEYBOARD_REPORT_SIZE; i++) {
            dprintf("%02X ", report->raw[i]);
        }
        dprint("\n");
    2156:	0c 94 0a 06 	jmp	0xc14	; 0xc14 <xputs>
    }
}
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	1f 91       	pop	r17
    2160:	0f 91       	pop	r16
    2162:	ff 90       	pop	r15
    2164:	ef 90       	pop	r14
    2166:	08 95       	ret

00002168 <host_mouse_send>:

void host_mouse_send(report_mouse_t *report)
{
    if (!driver) return;
    2168:	e0 91 5d 01 	lds	r30, 0x015D
    216c:	f0 91 5e 01 	lds	r31, 0x015E
    2170:	30 97       	sbiw	r30, 0x00	; 0
    2172:	21 f0       	breq	.+8      	; 0x217c <host_mouse_send+0x14>
    (*driver->send_mouse)(report);
    2174:	04 80       	ldd	r0, Z+4	; 0x04
    2176:	f5 81       	ldd	r31, Z+5	; 0x05
    2178:	e0 2d       	mov	r30, r0
    217a:	09 94       	ijmp
    217c:	08 95       	ret

0000217e <host_system_send>:
}

void host_system_send(uint16_t report)
{
    if (report == last_system_report) return;
    217e:	20 91 5b 01 	lds	r18, 0x015B
    2182:	30 91 5c 01 	lds	r19, 0x015C
    2186:	82 17       	cp	r24, r18
    2188:	93 07       	cpc	r25, r19
    218a:	71 f0       	breq	.+28     	; 0x21a8 <host_system_send+0x2a>
    last_system_report = report;
    218c:	90 93 5c 01 	sts	0x015C, r25
    2190:	80 93 5b 01 	sts	0x015B, r24

    if (!driver) return;
    2194:	e0 91 5d 01 	lds	r30, 0x015D
    2198:	f0 91 5e 01 	lds	r31, 0x015E
    219c:	30 97       	sbiw	r30, 0x00	; 0
    219e:	21 f0       	breq	.+8      	; 0x21a8 <host_system_send+0x2a>
    (*driver->send_system)(report);
    21a0:	06 80       	ldd	r0, Z+6	; 0x06
    21a2:	f7 81       	ldd	r31, Z+7	; 0x07
    21a4:	e0 2d       	mov	r30, r0
    21a6:	09 94       	ijmp
    21a8:	08 95       	ret

000021aa <host_consumer_send>:
}

void host_consumer_send(uint16_t report)
{
    if (report == last_consumer_report) return;
    21aa:	20 91 59 01 	lds	r18, 0x0159
    21ae:	30 91 5a 01 	lds	r19, 0x015A
    21b2:	82 17       	cp	r24, r18
    21b4:	93 07       	cpc	r25, r19
    21b6:	71 f0       	breq	.+28     	; 0x21d4 <host_consumer_send+0x2a>
    last_consumer_report = report;
    21b8:	90 93 5a 01 	sts	0x015A, r25
    21bc:	80 93 59 01 	sts	0x0159, r24

    if (!driver) return;
    21c0:	e0 91 5d 01 	lds	r30, 0x015D
    21c4:	f0 91 5e 01 	lds	r31, 0x015E
    21c8:	30 97       	sbiw	r30, 0x00	; 0
    21ca:	21 f0       	breq	.+8      	; 0x21d4 <host_consumer_send+0x2a>
    (*driver->send_consumer)(report);
    21cc:	00 84       	ldd	r0, Z+8	; 0x08
    21ce:	f1 85       	ldd	r31, Z+9	; 0x09
    21d0:	e0 2d       	mov	r30, r0
    21d2:	09 94       	ijmp
    21d4:	08 95       	ret

000021d6 <matrix_setup>:
    return false;
}
#endif


__attribute__ ((weak)) void matrix_setup(void) {}
    21d6:	08 95       	ret

000021d8 <keyboard_setup>:
void keyboard_setup(void)
{
    matrix_setup();
    21d8:	0c 94 eb 10 	jmp	0x21d6	; 0x21d6 <matrix_setup>

000021dc <keyboard_init>:
}

void keyboard_init(void)
{
    timer_init();
    21dc:	0e 94 ca 1c 	call	0x3994	; 0x3994 <timer_init>
    matrix_init();
    21e0:	0e 94 ce 06 	call	0xd9c	; 0xd9c <matrix_init>
    adb_mouse_init();
#endif


#ifdef BOOTMAGIC_ENABLE
    bootmagic();
    21e4:	0c 94 ec 1e 	jmp	0x3dd8	; 0x3dd8 <bootmagic>

000021e8 <keyboard_task>:
/*
 * Do keyboard routine jobs: scan mantrix, light LEDs, ...
 * This is repeatedly called as fast as possible.
 */
void keyboard_task(void)
{
    21e8:	4f 92       	push	r4
    21ea:	5f 92       	push	r5
    21ec:	7f 92       	push	r7
    21ee:	8f 92       	push	r8
    21f0:	9f 92       	push	r9
    21f2:	af 92       	push	r10
    21f4:	bf 92       	push	r11
    21f6:	cf 92       	push	r12
    21f8:	df 92       	push	r13
    21fa:	ef 92       	push	r14
    21fc:	ff 92       	push	r15
    21fe:	0f 93       	push	r16
    2200:	1f 93       	push	r17
    2202:	cf 93       	push	r28
    2204:	df 93       	push	r29
    2206:	00 d0       	rcall	.+0      	; 0x2208 <keyboard_task+0x20>
    2208:	00 d0       	rcall	.+0      	; 0x220a <keyboard_task+0x22>
    220a:	1f 92       	push	r1
    220c:	cd b7       	in	r28, 0x3d	; 61
    220e:	de b7       	in	r29, 0x3e	; 62
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2210:	0e 94 fd 06 	call	0xdfa	; 0xdfa <matrix_scan>
    2214:	90 e6       	ldi	r25, 0x60	; 96
    2216:	c9 2e       	mov	r12, r25
    2218:	91 e0       	ldi	r25, 0x01	; 1
    221a:	d9 2e       	mov	r13, r25
    221c:	00 e0       	ldi	r16, 0x00	; 0
    221e:	10 e0       	ldi	r17, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    2220:	aa 24       	eor	r10, r10
    2222:	a3 94       	inc	r10
    2224:	b1 2c       	mov	r11, r1
    2226:	70 2e       	mov	r7, r16
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row = matrix_get_row(r);
    2228:	80 2f       	mov	r24, r16
    222a:	0e 94 73 08 	call	0x10e6	; 0x10e6 <matrix_get_row>
    222e:	4c 01       	movw	r8, r24
        matrix_change = matrix_row ^ matrix_prev[r];
    2230:	f6 01       	movw	r30, r12
    2232:	41 90       	ld	r4, Z+
    2234:	51 90       	ld	r5, Z+
    2236:	6f 01       	movw	r12, r30
    2238:	48 26       	eor	r4, r24
    223a:	59 26       	eor	r5, r25
        if (matrix_change) {
    223c:	41 14       	cp	r4, r1
    223e:	51 04       	cpc	r5, r1
    2240:	b1 f4       	brne	.+44     	; 0x226e <keyboard_task+0x86>
    2242:	0f 5f       	subi	r16, 0xFF	; 255
    2244:	1f 4f       	sbci	r17, 0xFF	; 255
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    2246:	06 30       	cpi	r16, 0x06	; 6
    2248:	11 05       	cpc	r17, r1
    224a:	69 f7       	brne	.-38     	; 0x2226 <keyboard_task+0x3e>
                }
            }
        }
    }
    // call with pseudo tick event when no real key event.
    action_exec(TICK);
    224c:	8f ef       	ldi	r24, 0xFF	; 255
    224e:	89 83       	std	Y+1, r24	; 0x01
    2250:	8a 83       	std	Y+2, r24	; 0x02
    2252:	1b 82       	std	Y+3, r1	; 0x03
    2254:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <timer_read>
    2258:	81 60       	ori	r24, 0x01	; 1
    225a:	78 2f       	mov	r23, r24
    225c:	9d 83       	std	Y+5, r25	; 0x05
    225e:	8c 83       	std	Y+4, r24	; 0x04
    2260:	49 81       	ldd	r20, Y+1	; 0x01
    2262:	5a 81       	ldd	r21, Y+2	; 0x02
    2264:	6b 81       	ldd	r22, Y+3	; 0x03
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	0e 94 c7 11 	call	0x238e	; 0x238e <action_exec>
    226c:	41 c0       	rjmp	.+130    	; 0x22f0 <keyboard_task+0x108>
                matrix_ghost[r] = matrix_row;
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
    226e:	80 91 b7 01 	lds	r24, 0x01B7
    2272:	81 fd       	sbrc	r24, 1
    2274:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <matrix_print>
#endif
    static uint8_t led_status = 0;
    matrix_row_t matrix_row = 0;
    matrix_row_t matrix_change = 0;

    matrix_scan();
    2278:	20 e0       	ldi	r18, 0x00	; 0
    227a:	30 e0       	ldi	r19, 0x00	; 0
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
    227c:	75 01       	movw	r14, r10
    227e:	02 2e       	mov	r0, r18
    2280:	02 c0       	rjmp	.+4      	; 0x2286 <keyboard_task+0x9e>
    2282:	ee 0c       	add	r14, r14
    2284:	ff 1c       	adc	r15, r15
    2286:	0a 94       	dec	r0
    2288:	e2 f7       	brpl	.-8      	; 0x2282 <keyboard_task+0x9a>
    228a:	c7 01       	movw	r24, r14
    228c:	84 21       	and	r24, r4
    228e:	95 21       	and	r25, r5
    2290:	89 2b       	or	r24, r25
    2292:	41 f1       	breq	.+80     	; 0x22e4 <keyboard_task+0xfc>
                    keyevent_t e = (keyevent_t){
    2294:	29 83       	std	Y+1, r18	; 0x01
    2296:	7a 82       	std	Y+2, r7	; 0x02
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
    2298:	8e 20       	and	r8, r14
    229a:	9f 20       	and	r9, r15
    229c:	91 e0       	ldi	r25, 0x01	; 1
    229e:	89 28       	or	r8, r9
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <keyboard_task+0xbc>
    22a2:	90 e0       	ldi	r25, 0x00	; 0
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22a4:	9b 83       	std	Y+3, r25	; 0x03
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
    22a6:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <timer_read>
    22aa:	81 60       	ori	r24, 0x01	; 1
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
                if (matrix_change & ((matrix_row_t)1<<c)) {
                    keyevent_t e = (keyevent_t){
    22ac:	78 2f       	mov	r23, r24
    22ae:	9d 83       	std	Y+5, r25	; 0x05
    22b0:	8c 83       	std	Y+4, r24	; 0x04
                        .key = (keypos_t){ .row = r, .col = c },
                        .pressed = (matrix_row & ((matrix_row_t)1<<c)),
                        .time = (timer_read() | 1) /* time should not be 0 */
                    };
                    action_exec(e);
    22b2:	49 81       	ldd	r20, Y+1	; 0x01
    22b4:	5a 81       	ldd	r21, Y+2	; 0x02
    22b6:	6b 81       	ldd	r22, Y+3	; 0x03
    22b8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ba:	0e 94 c7 11 	call	0x238e	; 0x238e <action_exec>
                    hook_matrix_change(e);
    22be:	49 81       	ldd	r20, Y+1	; 0x01
    22c0:	5a 81       	ldd	r21, Y+2	; 0x02
    22c2:	6b 81       	ldd	r22, Y+3	; 0x03
    22c4:	7c 81       	ldd	r23, Y+4	; 0x04
    22c6:	8d 81       	ldd	r24, Y+5	; 0x05
    22c8:	0e 94 4b 1c 	call	0x3896	; 0x3896 <hook_matrix_change>
                    // record a processed key
                    matrix_prev[r] ^= ((matrix_row_t)1<<c);
    22cc:	00 0f       	add	r16, r16
    22ce:	11 1f       	adc	r17, r17
    22d0:	f8 01       	movw	r30, r16
    22d2:	e0 5a       	subi	r30, 0xA0	; 160
    22d4:	fe 4f       	sbci	r31, 0xFE	; 254
    22d6:	80 81       	ld	r24, Z
    22d8:	91 81       	ldd	r25, Z+1	; 0x01
    22da:	e8 26       	eor	r14, r24
    22dc:	f9 26       	eor	r15, r25
    22de:	f1 82       	std	Z+1, r15	; 0x01
    22e0:	e0 82       	st	Z, r14
    22e2:	06 c0       	rjmp	.+12     	; 0x22f0 <keyboard_task+0x108>
    22e4:	2f 5f       	subi	r18, 0xFF	; 255
    22e6:	3f 4f       	sbci	r19, 0xFF	; 255
                continue;
            }
            matrix_ghost[r] = matrix_row;
#endif
            if (debug_matrix) matrix_print();
            for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    22e8:	20 31       	cpi	r18, 0x10	; 16
    22ea:	31 05       	cpc	r19, r1
    22ec:	39 f6       	brne	.-114    	; 0x227c <keyboard_task+0x94>
    22ee:	a9 cf       	rjmp	.-174    	; 0x2242 <keyboard_task+0x5a>
    // call with pseudo tick event when no real key event.
    action_exec(TICK);

MATRIX_LOOP_END:

    hook_keyboard_loop();
    22f0:	0e 94 4a 1c 	call	0x3894	; 0x3894 <hook_keyboard_loop>

#ifdef MOUSEKEY_ENABLE
    // mousekey repeat & acceleration
    mousekey_task();
    22f4:	0e 94 6f 22 	call	0x44de	; 0x44de <mousekey_task>
#ifdef ADB_MOUSE_ENABLE
        adb_mouse_task();
#endif

    // update LED
    if (led_status != host_keyboard_leds()) {
    22f8:	10 91 5f 01 	lds	r17, 0x015F
    22fc:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    2300:	18 17       	cp	r17, r24
    2302:	71 f1       	breq	.+92     	; 0x2360 <keyboard_task+0x178>
        led_status = host_keyboard_leds();
    2304:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    2308:	80 93 5f 01 	sts	0x015F, r24
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
    230c:	90 91 b7 01 	lds	r25, 0x01B7
    2310:	92 ff       	sbrs	r25, 2
    2312:	0e c0       	rjmp	.+28     	; 0x2330 <keyboard_task+0x148>
    2314:	90 ff       	sbrs	r25, 0
    2316:	0c c0       	rjmp	.+24     	; 0x2330 <keyboard_task+0x148>
    2318:	1f 92       	push	r1
    231a:	8f 93       	push	r24
    231c:	87 ed       	ldi	r24, 0xD7	; 215
    231e:	93 e0       	ldi	r25, 0x03	; 3
    2320:	9f 93       	push	r25
    2322:	8f 93       	push	r24
    2324:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    2328:	0f 90       	pop	r0
    232a:	0f 90       	pop	r0
    232c:	0f 90       	pop	r0
    232e:	0f 90       	pop	r0
        hook_keyboard_leds_change(led_status);
    2330:	80 91 5f 01 	lds	r24, 0x015F
    }
}
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	df 91       	pop	r29
    2340:	cf 91       	pop	r28
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	df 90       	pop	r13
    234c:	cf 90       	pop	r12
    234e:	bf 90       	pop	r11
    2350:	af 90       	pop	r10
    2352:	9f 90       	pop	r9
    2354:	8f 90       	pop	r8
    2356:	7f 90       	pop	r7
    2358:	5f 90       	pop	r5
    235a:	4f 90       	pop	r4

    // update LED
    if (led_status != host_keyboard_leds()) {
        led_status = host_keyboard_leds();
        if (debug_keyboard) dprintf("LED: %02X\n", led_status);
        hook_keyboard_leds_change(led_status);
    235c:	0c 94 5c 1c 	jmp	0x38b8	; 0x38b8 <hook_keyboard_leds_change>
    }
}
    2360:	0f 90       	pop	r0
    2362:	0f 90       	pop	r0
    2364:	0f 90       	pop	r0
    2366:	0f 90       	pop	r0
    2368:	0f 90       	pop	r0
    236a:	df 91       	pop	r29
    236c:	cf 91       	pop	r28
    236e:	1f 91       	pop	r17
    2370:	0f 91       	pop	r16
    2372:	ff 90       	pop	r15
    2374:	ef 90       	pop	r14
    2376:	df 90       	pop	r13
    2378:	cf 90       	pop	r12
    237a:	bf 90       	pop	r11
    237c:	af 90       	pop	r10
    237e:	9f 90       	pop	r9
    2380:	8f 90       	pop	r8
    2382:	7f 90       	pop	r7
    2384:	5f 90       	pop	r5
    2386:	4f 90       	pop	r4
    2388:	08 95       	ret

0000238a <keyboard_set_leds>:

void keyboard_set_leds(uint8_t leds)
{
    led_set(leds);
    238a:	0c 94 c3 08 	jmp	0x1186	; 0x1186 <led_set>

0000238e <action_exec>:
#include "nodebug.h"
#endif


void action_exec(keyevent_t event)
{
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	cd b7       	in	r28, 0x3d	; 61
    2394:	de b7       	in	r29, 0x3e	; 62
    2396:	2b 97       	sbiw	r28, 0x0b	; 11
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	f8 94       	cli
    239c:	de bf       	out	0x3e, r29	; 62
    239e:	0f be       	out	0x3f, r0	; 63
    23a0:	cd bf       	out	0x3d, r28	; 61
    23a2:	94 2f       	mov	r25, r20
    23a4:	4f 83       	std	Y+7, r20	; 0x07
    23a6:	25 2f       	mov	r18, r21
    23a8:	58 87       	std	Y+8, r21	; 0x08
    23aa:	69 87       	std	Y+9, r22	; 0x09
    23ac:	7a 87       	std	Y+10, r23	; 0x0a
    23ae:	8b 87       	std	Y+11, r24	; 0x0b

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    23b0:	4a 85       	ldd	r20, Y+10	; 0x0a
    23b2:	5b 85       	ldd	r21, Y+11	; 0x0b
    23b4:	45 2b       	or	r20, r21
    23b6:	21 f0       	breq	.+8      	; 0x23c0 <action_exec+0x32>
    23b8:	2f 3f       	cpi	r18, 0xFF	; 255
    23ba:	09 f5       	brne	.+66     	; 0x23fe <action_exec+0x70>
    23bc:	9f 3f       	cpi	r25, 0xFF	; 255
    23be:	f9 f4       	brne	.+62     	; 0x23fe <action_exec+0x70>
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    }

    keyrecord_t record = { .event = event };
    23c0:	de 01       	movw	r26, r28
    23c2:	11 96       	adiw	r26, 0x01	; 1
    23c4:	86 e0       	ldi	r24, 0x06	; 6
    23c6:	fd 01       	movw	r30, r26
    23c8:	11 92       	st	Z+, r1
    23ca:	8a 95       	dec	r24
    23cc:	e9 f7       	brne	.-6      	; 0x23c8 <action_exec+0x3a>
    23ce:	85 e0       	ldi	r24, 0x05	; 5
    23d0:	fe 01       	movw	r30, r28
    23d2:	37 96       	adiw	r30, 0x07	; 7
    23d4:	01 90       	ld	r0, Z+
    23d6:	0d 92       	st	X+, r0
    23d8:	8a 95       	dec	r24
    23da:	e1 f7       	brne	.-8      	; 0x23d4 <action_exec+0x46>

#ifndef NO_ACTION_TAPPING
    action_tapping_process(record);
    23dc:	49 81       	ldd	r20, Y+1	; 0x01
    23de:	5a 81       	ldd	r21, Y+2	; 0x02
    23e0:	6b 81       	ldd	r22, Y+3	; 0x03
    23e2:	7c 81       	ldd	r23, Y+4	; 0x04
    23e4:	8d 81       	ldd	r24, Y+5	; 0x05
    23e6:	9e 81       	ldd	r25, Y+6	; 0x06
    23e8:	0e 94 eb 18 	call	0x31d6	; 0x31d6 <action_tapping_process>
    process_action(&record);
    if (!IS_NOEVENT(record.event)) {
        dprint("processed: "); debug_record(record); dprintln();
    }
#endif
}
    23ec:	2b 96       	adiw	r28, 0x0b	; 11
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	de bf       	out	0x3e, r29	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	cd bf       	out	0x3d, r28	; 61
    23f8:	df 91       	pop	r29
    23fa:	cf 91       	pop	r28
    23fc:	08 95       	ret
void action_exec(keyevent_t event)
{
    if (!IS_NOEVENT(event)) {
        dprint("\n---- action_exec: start -----\n");
        dprint("EVENT: "); debug_event(event); dprintln();
        hook_matrix_change(event);
    23fe:	4f 81       	ldd	r20, Y+7	; 0x07
    2400:	58 85       	ldd	r21, Y+8	; 0x08
    2402:	69 85       	ldd	r22, Y+9	; 0x09
    2404:	7a 85       	ldd	r23, Y+10	; 0x0a
    2406:	8b 85       	ldd	r24, Y+11	; 0x0b
    2408:	0e 94 4b 1c 	call	0x3896	; 0x3896 <hook_matrix_change>
    240c:	d9 cf       	rjmp	.-78     	; 0x23c0 <action_exec+0x32>

0000240e <register_code>:

/*
 * Utilities for actions.
 */
void register_code(uint8_t code)
{
    240e:	cf 93       	push	r28
    if (code == KC_NO) {
    2410:	88 23       	and	r24, r24
    2412:	09 f4       	brne	.+2      	; 0x2416 <register_code+0x8>
    2414:	cd c0       	rjmp	.+410    	; 0x25b0 <register_code+0x1a2>
    2416:	c8 2f       	mov	r28, r24
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    2418:	82 38       	cpi	r24, 0x82	; 130
    241a:	59 f4       	brne	.+22     	; 0x2432 <register_code+0x24>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is on
        if (host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK)) return;
    241c:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    2420:	81 fd       	sbrc	r24, 1
    2422:	c6 c0       	rjmp	.+396    	; 0x25b0 <register_code+0x1a2>
#endif
        add_key(KC_CAPSLOCK);
    2424:	89 e3       	ldi	r24, 0x39	; 57
    2426:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    242a:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    242e:	89 e3       	ldi	r24, 0x39	; 57
    2430:	0c c0       	rjmp	.+24     	; 0x244a <register_code+0x3c>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    2432:	83 38       	cpi	r24, 0x83	; 131
    2434:	79 f4       	brne	.+30     	; 0x2454 <register_code+0x46>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
    2436:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    243a:	80 fd       	sbrc	r24, 0
    243c:	b9 c0       	rjmp	.+370    	; 0x25b0 <register_code+0x1a2>
#endif
        add_key(KC_NUMLOCK);
    243e:	83 e5       	ldi	r24, 0x53	; 83
    2440:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    2444:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_NUMLOCK);
    2448:	83 e5       	ldi	r24, 0x53	; 83
    244a:	0e 94 93 1b 	call	0x3726	; 0x3726 <del_key>
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    244e:	cf 91       	pop	r28
        if (host_keyboard_leds() & (1<<USB_LED_NUM_LOCK)) return;
#endif
        add_key(KC_NUMLOCK);
        send_keyboard_report();
        del_key(KC_NUMLOCK);
        send_keyboard_report();
    2450:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    2454:	84 38       	cpi	r24, 0x84	; 132
    2456:	59 f4       	brne	.+22     	; 0x246e <register_code+0x60>
#ifdef LOCKING_RESYNC_ENABLE
        if (host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK)) return;
    2458:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    245c:	82 fd       	sbrc	r24, 2
    245e:	a8 c0       	rjmp	.+336    	; 0x25b0 <register_code+0x1a2>
#endif
        add_key(KC_SCROLLLOCK);
    2460:	87 e4       	ldi	r24, 0x47	; 71
    2462:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    2466:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    246a:	87 e4       	ldi	r24, 0x47	; 71
    246c:	ee cf       	rjmp	.-36     	; 0x244a <register_code+0x3c>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    246e:	8c ef       	ldi	r24, 0xFC	; 252
    2470:	8c 0f       	add	r24, r28
    2472:	81 3a       	cpi	r24, 0xA1	; 161
    2474:	48 f4       	brcc	.+18     	; 0x2488 <register_code+0x7a>
        // TODO: should push command_proc out of this block?
        if (command_proc(code)) return;
    2476:	8c 2f       	mov	r24, r28
    2478:	0e 94 ce 26 	call	0x4d9c	; 0x4d9c <command_proc>
    247c:	81 11       	cpse	r24, r1
    247e:	98 c0       	rjmp	.+304    	; 0x25b0 <register_code+0x1a2>
            oneshot_cancel();
        } else 
*/
#endif
        {
            add_key(code);
    2480:	8c 2f       	mov	r24, r28
    2482:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
    2486:	e3 cf       	rjmp	.-58     	; 0x244e <register_code+0x40>
            send_keyboard_report();
        }
    }
    else if IS_MOD(code) {
    2488:	80 e2       	ldi	r24, 0x20	; 32
    248a:	8c 0f       	add	r24, r28
    248c:	88 30       	cpi	r24, 0x08	; 8
    248e:	48 f4       	brcc	.+18     	; 0x24a2 <register_code+0x94>
        add_mods(MOD_BIT(code));
    2490:	c7 70       	andi	r28, 0x07	; 7
    2492:	81 e0       	ldi	r24, 0x01	; 1
    2494:	01 c0       	rjmp	.+2      	; 0x2498 <register_code+0x8a>
    2496:	88 0f       	add	r24, r24
    2498:	ca 95       	dec	r28
    249a:	ea f7       	brpl	.-6      	; 0x2496 <register_code+0x88>
    249c:	0e 94 b5 1b 	call	0x376a	; 0x376a <add_mods>
    24a0:	d6 cf       	rjmp	.-84     	; 0x244e <register_code+0x40>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    24a2:	8b e5       	ldi	r24, 0x5B	; 91
    24a4:	8c 0f       	add	r24, r28
    24a6:	83 30       	cpi	r24, 0x03	; 3
    24a8:	78 f4       	brcc	.+30     	; 0x24c8 <register_code+0xba>
        host_system_send(KEYCODE2SYSTEM(code));
    24aa:	c5 3a       	cpi	r28, 0xA5	; 165
    24ac:	29 f0       	breq	.+10     	; 0x24b8 <register_code+0xaa>
    24ae:	c6 3a       	cpi	r28, 0xA6	; 166
    24b0:	31 f0       	breq	.+12     	; 0x24be <register_code+0xb0>
    24b2:	83 e8       	ldi	r24, 0x83	; 131
    24b4:	90 e0       	ldi	r25, 0x00	; 0
    24b6:	05 c0       	rjmp	.+10     	; 0x24c2 <register_code+0xb4>
    24b8:	81 e8       	ldi	r24, 0x81	; 129
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	02 c0       	rjmp	.+4      	; 0x24c2 <register_code+0xb4>
    24be:	82 e8       	ldi	r24, 0x82	; 130
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    }
}
    24c2:	cf 91       	pop	r28
    else if IS_MOD(code) {
        add_mods(MOD_BIT(code));
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    24c4:	0c 94 bf 10 	jmp	0x217e	; 0x217e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    24c8:	88 e5       	ldi	r24, 0x58	; 88
    24ca:	8c 0f       	add	r24, r28
    24cc:	85 31       	cpi	r24, 0x15	; 21
    24ce:	08 f0       	brcs	.+2      	; 0x24d2 <register_code+0xc4>
    24d0:	6f c0       	rjmp	.+222    	; 0x25b0 <register_code+0x1a2>
        host_consumer_send(KEYCODE2CONSUMER(code));
    24d2:	c8 3a       	cpi	r28, 0xA8	; 168
    24d4:	61 f1       	breq	.+88     	; 0x252e <register_code+0x120>
    24d6:	c9 3a       	cpi	r28, 0xA9	; 169
    24d8:	69 f1       	breq	.+90     	; 0x2534 <register_code+0x126>
    24da:	ca 3a       	cpi	r28, 0xAA	; 170
    24dc:	71 f1       	breq	.+92     	; 0x253a <register_code+0x12c>
    24de:	cb 3a       	cpi	r28, 0xAB	; 171
    24e0:	79 f1       	breq	.+94     	; 0x2540 <register_code+0x132>
    24e2:	cc 3a       	cpi	r28, 0xAC	; 172
    24e4:	81 f1       	breq	.+96     	; 0x2546 <register_code+0x138>
    24e6:	cd 3a       	cpi	r28, 0xAD	; 173
    24e8:	89 f1       	breq	.+98     	; 0x254c <register_code+0x13e>
    24ea:	ce 3a       	cpi	r28, 0xAE	; 174
    24ec:	91 f1       	breq	.+100    	; 0x2552 <register_code+0x144>
    24ee:	cf 3a       	cpi	r28, 0xAF	; 175
    24f0:	99 f1       	breq	.+102    	; 0x2558 <register_code+0x14a>
    24f2:	c1 3b       	cpi	r28, 0xB1	; 177
    24f4:	a1 f1       	breq	.+104    	; 0x255e <register_code+0x150>
    24f6:	c0 3b       	cpi	r28, 0xB0	; 176
    24f8:	a9 f1       	breq	.+106    	; 0x2564 <register_code+0x156>
    24fa:	c2 3b       	cpi	r28, 0xB2	; 178
    24fc:	b1 f1       	breq	.+108    	; 0x256a <register_code+0x15c>
    24fe:	c3 3b       	cpi	r28, 0xB3	; 179
    2500:	b9 f1       	breq	.+110    	; 0x2570 <register_code+0x162>
    2502:	c4 3b       	cpi	r28, 0xB4	; 180
    2504:	c1 f1       	breq	.+112    	; 0x2576 <register_code+0x168>
    2506:	c5 3b       	cpi	r28, 0xB5	; 181
    2508:	c9 f1       	breq	.+114    	; 0x257c <register_code+0x16e>
    250a:	c6 3b       	cpi	r28, 0xB6	; 182
    250c:	d1 f1       	breq	.+116    	; 0x2582 <register_code+0x174>
    250e:	c7 3b       	cpi	r28, 0xB7	; 183
    2510:	d9 f1       	breq	.+118    	; 0x2588 <register_code+0x17a>
    2512:	c8 3b       	cpi	r28, 0xB8	; 184
    2514:	e1 f1       	breq	.+120    	; 0x258e <register_code+0x180>
    2516:	c9 3b       	cpi	r28, 0xB9	; 185
    2518:	e9 f1       	breq	.+122    	; 0x2594 <register_code+0x186>
    251a:	ca 3b       	cpi	r28, 0xBA	; 186
    251c:	f1 f1       	breq	.+124    	; 0x259a <register_code+0x18c>
    251e:	cb 3b       	cpi	r28, 0xBB	; 187
    2520:	f9 f1       	breq	.+126    	; 0x25a0 <register_code+0x192>
    2522:	cc 3b       	cpi	r28, 0xBC	; 188
    2524:	09 f4       	brne	.+2      	; 0x2528 <register_code+0x11a>
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <register_code+0x198>
    2528:	80 e0       	ldi	r24, 0x00	; 0
    252a:	90 e0       	ldi	r25, 0x00	; 0
    252c:	3e c0       	rjmp	.+124    	; 0x25aa <register_code+0x19c>
    252e:	82 ee       	ldi	r24, 0xE2	; 226
    2530:	90 e0       	ldi	r25, 0x00	; 0
    2532:	3b c0       	rjmp	.+118    	; 0x25aa <register_code+0x19c>
    2534:	89 ee       	ldi	r24, 0xE9	; 233
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	38 c0       	rjmp	.+112    	; 0x25aa <register_code+0x19c>
    253a:	8a ee       	ldi	r24, 0xEA	; 234
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	35 c0       	rjmp	.+106    	; 0x25aa <register_code+0x19c>
    2540:	85 eb       	ldi	r24, 0xB5	; 181
    2542:	90 e0       	ldi	r25, 0x00	; 0
    2544:	32 c0       	rjmp	.+100    	; 0x25aa <register_code+0x19c>
    2546:	86 eb       	ldi	r24, 0xB6	; 182
    2548:	90 e0       	ldi	r25, 0x00	; 0
    254a:	2f c0       	rjmp	.+94     	; 0x25aa <register_code+0x19c>
    254c:	83 eb       	ldi	r24, 0xB3	; 179
    254e:	90 e0       	ldi	r25, 0x00	; 0
    2550:	2c c0       	rjmp	.+88     	; 0x25aa <register_code+0x19c>
    2552:	84 eb       	ldi	r24, 0xB4	; 180
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	29 c0       	rjmp	.+82     	; 0x25aa <register_code+0x19c>
    2558:	87 eb       	ldi	r24, 0xB7	; 183
    255a:	90 e0       	ldi	r25, 0x00	; 0
    255c:	26 c0       	rjmp	.+76     	; 0x25aa <register_code+0x19c>
    255e:	8c ec       	ldi	r24, 0xCC	; 204
    2560:	90 e0       	ldi	r25, 0x00	; 0
    2562:	23 c0       	rjmp	.+70     	; 0x25aa <register_code+0x19c>
    2564:	8d ec       	ldi	r24, 0xCD	; 205
    2566:	90 e0       	ldi	r25, 0x00	; 0
    2568:	20 c0       	rjmp	.+64     	; 0x25aa <register_code+0x19c>
    256a:	83 e8       	ldi	r24, 0x83	; 131
    256c:	91 e0       	ldi	r25, 0x01	; 1
    256e:	1d c0       	rjmp	.+58     	; 0x25aa <register_code+0x19c>
    2570:	8a e8       	ldi	r24, 0x8A	; 138
    2572:	91 e0       	ldi	r25, 0x01	; 1
    2574:	1a c0       	rjmp	.+52     	; 0x25aa <register_code+0x19c>
    2576:	82 e9       	ldi	r24, 0x92	; 146
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	17 c0       	rjmp	.+46     	; 0x25aa <register_code+0x19c>
    257c:	84 e9       	ldi	r24, 0x94	; 148
    257e:	91 e0       	ldi	r25, 0x01	; 1
    2580:	14 c0       	rjmp	.+40     	; 0x25aa <register_code+0x19c>
    2582:	81 e2       	ldi	r24, 0x21	; 33
    2584:	92 e0       	ldi	r25, 0x02	; 2
    2586:	11 c0       	rjmp	.+34     	; 0x25aa <register_code+0x19c>
    2588:	83 e2       	ldi	r24, 0x23	; 35
    258a:	92 e0       	ldi	r25, 0x02	; 2
    258c:	0e c0       	rjmp	.+28     	; 0x25aa <register_code+0x19c>
    258e:	84 e2       	ldi	r24, 0x24	; 36
    2590:	92 e0       	ldi	r25, 0x02	; 2
    2592:	0b c0       	rjmp	.+22     	; 0x25aa <register_code+0x19c>
    2594:	85 e2       	ldi	r24, 0x25	; 37
    2596:	92 e0       	ldi	r25, 0x02	; 2
    2598:	08 c0       	rjmp	.+16     	; 0x25aa <register_code+0x19c>
    259a:	86 e2       	ldi	r24, 0x26	; 38
    259c:	92 e0       	ldi	r25, 0x02	; 2
    259e:	05 c0       	rjmp	.+10     	; 0x25aa <register_code+0x19c>
    25a0:	87 e2       	ldi	r24, 0x27	; 39
    25a2:	92 e0       	ldi	r25, 0x02	; 2
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <register_code+0x19c>
    25a6:	8a e2       	ldi	r24, 0x2A	; 42
    25a8:	92 e0       	ldi	r25, 0x02	; 2
    }
}
    25aa:	cf 91       	pop	r28
    }
    else if IS_SYSTEM(code) {
        host_system_send(KEYCODE2SYSTEM(code));
    }
    else if IS_CONSUMER(code) {
        host_consumer_send(KEYCODE2CONSUMER(code));
    25ac:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <host_consumer_send>
    }
}
    25b0:	cf 91       	pop	r28
    25b2:	08 95       	ret

000025b4 <unregister_code>:

void unregister_code(uint8_t code)
{
    if (code == KC_NO) {
    25b4:	88 23       	and	r24, r24
    25b6:	09 f4       	brne	.+2      	; 0x25ba <unregister_code+0x6>
    25b8:	4b c0       	rjmp	.+150    	; 0x2650 <unregister_code+0x9c>
        return;
    }

#ifdef LOCKING_SUPPORT_ENABLE
    else if (KC_LOCKING_CAPS == code) {
    25ba:	82 38       	cpi	r24, 0x82	; 130
    25bc:	59 f4       	brne	.+22     	; 0x25d4 <unregister_code+0x20>
#ifdef LOCKING_RESYNC_ENABLE
        // Resync: ignore if caps lock already is off
        if (!(host_keyboard_leds() & (1<<USB_LED_CAPS_LOCK))) return;
    25be:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    25c2:	81 ff       	sbrs	r24, 1
    25c4:	45 c0       	rjmp	.+138    	; 0x2650 <unregister_code+0x9c>
#endif
        add_key(KC_CAPSLOCK);
    25c6:	89 e3       	ldi	r24, 0x39	; 57
    25c8:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    25cc:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_CAPSLOCK);
    25d0:	89 e3       	ldi	r24, 0x39	; 57
    25d2:	0c c0       	rjmp	.+24     	; 0x25ec <unregister_code+0x38>
        send_keyboard_report();
    }

    else if (KC_LOCKING_NUM == code) {
    25d4:	83 38       	cpi	r24, 0x83	; 131
    25d6:	71 f4       	brne	.+28     	; 0x25f4 <unregister_code+0x40>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_NUM_LOCK))) return;
    25d8:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    25dc:	80 ff       	sbrs	r24, 0
    25de:	38 c0       	rjmp	.+112    	; 0x2650 <unregister_code+0x9c>
#endif
        add_key(KC_NUMLOCK);
    25e0:	83 e5       	ldi	r24, 0x53	; 83
    25e2:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    25e6:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_NUMLOCK);
    25ea:	83 e5       	ldi	r24, 0x53	; 83
    25ec:	0e 94 93 1b 	call	0x3726	; 0x3726 <del_key>
        send_keyboard_report();
    25f0:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <send_keyboard_report>
    }

    else if (KC_LOCKING_SCROLL == code) {
    25f4:	84 38       	cpi	r24, 0x84	; 132
    25f6:	59 f4       	brne	.+22     	; 0x260e <unregister_code+0x5a>
#ifdef LOCKING_RESYNC_ENABLE
        if (!(host_keyboard_leds() & (1<<USB_LED_SCROLL_LOCK))) return;
    25f8:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    25fc:	82 ff       	sbrs	r24, 2
    25fe:	28 c0       	rjmp	.+80     	; 0x2650 <unregister_code+0x9c>
#endif
        add_key(KC_SCROLLLOCK);
    2600:	87 e4       	ldi	r24, 0x47	; 71
    2602:	0e 94 76 1b 	call	0x36ec	; 0x36ec <add_key>
        send_keyboard_report();
    2606:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
        del_key(KC_SCROLLLOCK);
    260a:	87 e4       	ldi	r24, 0x47	; 71
    260c:	ef cf       	rjmp	.-34     	; 0x25ec <unregister_code+0x38>
        send_keyboard_report();
    }
#endif

    else if IS_KEY(code) {
    260e:	9c ef       	ldi	r25, 0xFC	; 252
    2610:	98 0f       	add	r25, r24
    2612:	91 3a       	cpi	r25, 0xA1	; 161
    2614:	58 f3       	brcs	.-42     	; 0x25ec <unregister_code+0x38>
        del_key(code);
        send_keyboard_report();
    }
    else if IS_MOD(code) {
    2616:	90 e2       	ldi	r25, 0x20	; 32
    2618:	98 0f       	add	r25, r24
    261a:	98 30       	cpi	r25, 0x08	; 8
    261c:	50 f4       	brcc	.+20     	; 0x2632 <unregister_code+0x7e>
        del_mods(MOD_BIT(code));
    261e:	87 70       	andi	r24, 0x07	; 7
    2620:	91 e0       	ldi	r25, 0x01	; 1
    2622:	01 c0       	rjmp	.+2      	; 0x2626 <unregister_code+0x72>
    2624:	99 0f       	add	r25, r25
    2626:	8a 95       	dec	r24
    2628:	ea f7       	brpl	.-6      	; 0x2624 <unregister_code+0x70>
    262a:	89 2f       	mov	r24, r25
    262c:	0e 94 bb 1b 	call	0x3776	; 0x3776 <del_mods>
    2630:	df cf       	rjmp	.-66     	; 0x25f0 <unregister_code+0x3c>
        send_keyboard_report();
    }
    else if IS_SYSTEM(code) {
    2632:	9b e5       	ldi	r25, 0x5B	; 91
    2634:	98 0f       	add	r25, r24
    2636:	93 30       	cpi	r25, 0x03	; 3
    2638:	20 f4       	brcc	.+8      	; 0x2642 <unregister_code+0x8e>
        host_system_send(0);
    263a:	80 e0       	ldi	r24, 0x00	; 0
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	0c 94 bf 10 	jmp	0x217e	; 0x217e <host_system_send>
    }
    else if IS_CONSUMER(code) {
    2642:	88 5a       	subi	r24, 0xA8	; 168
    2644:	85 31       	cpi	r24, 0x15	; 21
    2646:	20 f4       	brcc	.+8      	; 0x2650 <unregister_code+0x9c>
        host_consumer_send(0);
    2648:	80 e0       	ldi	r24, 0x00	; 0
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <host_consumer_send>
    2650:	08 95       	ret

00002652 <register_mods>:
    }
}

void register_mods(uint8_t mods)
{
    if (mods) {
    2652:	88 23       	and	r24, r24
    2654:	21 f0       	breq	.+8      	; 0x265e <register_mods+0xc>
        add_mods(mods);
    2656:	0e 94 b5 1b 	call	0x376a	; 0x376a <add_mods>
        send_keyboard_report();
    265a:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <send_keyboard_report>
    265e:	08 95       	ret

00002660 <unregister_mods>:
    }
}

void unregister_mods(uint8_t mods)
{
    if (mods) {
    2660:	88 23       	and	r24, r24
    2662:	21 f0       	breq	.+8      	; 0x266c <unregister_mods+0xc>
        del_mods(mods);
    2664:	0e 94 bb 1b 	call	0x3776	; 0x3776 <del_mods>
        send_keyboard_report();
    2668:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <send_keyboard_report>
    266c:	08 95       	ret

0000266e <process_action>:
    }
#endif
}

void process_action(keyrecord_t *record)
{
    266e:	cf 92       	push	r12
    2670:	df 92       	push	r13
    2672:	ef 92       	push	r14
    2674:	ff 92       	push	r15
    2676:	0f 93       	push	r16
    2678:	1f 93       	push	r17
    267a:	cf 93       	push	r28
    267c:	df 93       	push	r29
    267e:	00 d0       	rcall	.+0      	; 0x2680 <process_action+0x12>
    2680:	00 d0       	rcall	.+0      	; 0x2682 <process_action+0x14>
    2682:	00 d0       	rcall	.+0      	; 0x2684 <process_action+0x16>
    2684:	cd b7       	in	r28, 0x3d	; 61
    2686:	de b7       	in	r29, 0x3e	; 62
    keyevent_t event = record->event;
    2688:	25 e0       	ldi	r18, 0x05	; 5
    268a:	fc 01       	movw	r30, r24
    268c:	de 01       	movw	r26, r28
    268e:	11 96       	adiw	r26, 0x01	; 1
    2690:	01 90       	ld	r0, Z+
    2692:	0d 92       	st	X+, r0
    2694:	2a 95       	dec	r18
    2696:	e1 f7       	brne	.-8      	; 0x2690 <process_action+0x22>
    2698:	fc 01       	movw	r30, r24
    269a:	40 81       	ld	r20, Z
    269c:	31 81       	ldd	r19, Z+1	; 0x01
    269e:	f2 80       	ldd	r15, Z+2	; 0x02
#ifndef NO_ACTION_TAPPING
    uint8_t tap_count = record->tap.count;
    26a0:	25 81       	ldd	r18, Z+5	; 0x05
    26a2:	22 95       	swap	r18
    26a4:	2f 70       	andi	r18, 0x0F	; 15
    26a6:	63 81       	ldd	r22, Z+3	; 0x03
    26a8:	74 81       	ldd	r23, Z+4	; 0x04
    26aa:	67 2b       	or	r22, r23
    26ac:	09 f4       	brne	.+2      	; 0x26b0 <process_action+0x42>
    26ae:	d8 c2       	rjmp	.+1456   	; 0x2c60 <process_action+0x5f2>
    26b0:	3f 3f       	cpi	r19, 0xFF	; 255
    26b2:	19 f4       	brne	.+6      	; 0x26ba <process_action+0x4c>
#endif

    if (IS_NOEVENT(event)) { return; }
    26b4:	4f 3f       	cpi	r20, 0xFF	; 255
    26b6:	09 f4       	brne	.+2      	; 0x26ba <process_action+0x4c>
    26b8:	d3 c2       	rjmp	.+1446   	; 0x2c60 <process_action+0x5f2>
    26ba:	6c 01       	movw	r12, r24

    action_t action = layer_switch_get_action(event.key);
    26bc:	49 83       	std	Y+1, r20	; 0x01
    26be:	3a 83       	std	Y+2, r19	; 0x02
    26c0:	89 81       	ldd	r24, Y+1	; 0x01
    26c2:	9a 81       	ldd	r25, Y+2	; 0x02
    26c4:	2e 83       	std	Y+6, r18	; 0x06
    26c6:	0e 94 35 1b 	call	0x366a	; 0x366a <layer_switch_get_action>
    26ca:	18 2f       	mov	r17, r24
    26cc:	09 2f       	mov	r16, r25
    dprint("ACTION: "); debug_action(action);
#ifndef NO_ACTION_LAYER
    dprint(" layer_state: "); layer_debug();
    26ce:	0e 94 34 1b 	call	0x3668	; 0x3668 <layer_debug>
    dprint(" default_layer_state: "); default_layer_debug();
    26d2:	0e 94 44 1a 	call	0x3488	; 0x3488 <default_layer_debug>
#endif
    dprintln();

    switch (action.kind.id) {
    26d6:	e0 2f       	mov	r30, r16
    26d8:	e2 95       	swap	r30
    26da:	ef 70       	andi	r30, 0x0F	; 15
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	e0 5a       	subi	r30, 0xA0	; 160
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	2e 81       	ldd	r18, Y+6	; 0x06
    26e4:	0c 94 74 29 	jmp	0x52e8	; 0x52e8 <__tablejump2__>
        /* Key and Mods */
        case ACT_LMODS:
        case ACT_RMODS:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS) ?  action.key.mods :
    26e8:	80 2f       	mov	r24, r16
    26ea:	80 7f       	andi	r24, 0xF0	; 240
    26ec:	90 2f       	mov	r25, r16
    26ee:	9f 70       	andi	r25, 0x0F	; 15
    26f0:	09 2f       	mov	r16, r25
    26f2:	88 23       	and	r24, r24
    26f4:	11 f0       	breq	.+4      	; 0x26fa <process_action+0x8c>
    26f6:	02 95       	swap	r16
    26f8:	00 7f       	andi	r16, 0xF0	; 240
                                                                action.key.mods<<4;
                if (event.pressed) {
    26fa:	ff 20       	and	r15, r15
    26fc:	49 f0       	breq	.+18     	; 0x2710 <process_action+0xa2>
                    if (mods) {
    26fe:	00 23       	and	r16, r16
    2700:	09 f4       	brne	.+2      	; 0x2704 <process_action+0x96>
    2702:	5f c2       	rjmp	.+1214   	; 0x2bc2 <process_action+0x554>
                        add_weak_mods(mods);
    2704:	80 2f       	mov	r24, r16
    2706:	0e 94 c8 1b 	call	0x3790	; 0x3790 <add_weak_mods>
                        send_keyboard_report();
    270a:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
    270e:	59 c2       	rjmp	.+1202   	; 0x2bc2 <process_action+0x554>
                    }
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
    2710:	81 2f       	mov	r24, r17
    2712:	0e 94 da 12 	call	0x25b4	; 0x25b4 <unregister_code>
                    if (mods) {
    2716:	00 23       	and	r16, r16
    2718:	09 f4       	brne	.+2      	; 0x271c <process_action+0xae>
    271a:	a2 c2       	rjmp	.+1348   	; 0x2c60 <process_action+0x5f2>
                        del_weak_mods(mods);
    271c:	80 2f       	mov	r24, r16
    271e:	0e 94 ce 1b 	call	0x379c	; 0x379c <del_weak_mods>
            break;
#endif
        default:
            break;
    }
}
    2722:	26 96       	adiw	r28, 0x06	; 6
    2724:	0f b6       	in	r0, 0x3f	; 63
    2726:	f8 94       	cli
    2728:	de bf       	out	0x3e, r29	; 62
    272a:	0f be       	out	0x3f, r0	; 63
    272c:	cd bf       	out	0x3d, r28	; 61
    272e:	df 91       	pop	r29
    2730:	cf 91       	pop	r28
    2732:	1f 91       	pop	r17
    2734:	0f 91       	pop	r16
    2736:	ff 90       	pop	r15
    2738:	ef 90       	pop	r14
    273a:	df 90       	pop	r13
    273c:	cf 90       	pop	r12
                    register_code(action.key.code);
                } else {
                    unregister_code(action.key.code);
                    if (mods) {
                        del_weak_mods(mods);
                        send_keyboard_report();
    273e:	0c 94 ef 1b 	jmp	0x37de	; 0x37de <send_keyboard_report>
            break;
#ifndef NO_ACTION_TAPPING
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
            {
                uint8_t mods = (action.kind.id == ACT_LMODS_TAP) ?  action.key.mods :
    2742:	80 2f       	mov	r24, r16
    2744:	80 7f       	andi	r24, 0xF0	; 240
    2746:	90 2f       	mov	r25, r16
    2748:	9f 70       	andi	r25, 0x0F	; 15
    274a:	09 2f       	mov	r16, r25
    274c:	80 32       	cpi	r24, 0x20	; 32
    274e:	11 f0       	breq	.+4      	; 0x2754 <process_action+0xe6>
    2750:	02 95       	swap	r16
    2752:	00 7f       	andi	r16, 0xF0	; 240
                                                                    action.key.mods<<4;
                switch (action.layer_tap.code) {
    2754:	11 23       	and	r17, r17
    2756:	19 f0       	breq	.+6      	; 0x275e <process_action+0xf0>
    2758:	11 30       	cpi	r17, 0x01	; 1
    275a:	01 f1       	breq	.+64     	; 0x279c <process_action+0x12e>
    275c:	29 c0       	rjmp	.+82     	; 0x27b0 <process_action+0x142>
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
    275e:	ff 20       	and	r15, r15
    2760:	a9 f0       	breq	.+42     	; 0x278c <process_action+0x11e>
                            if (tap_count == 0) {
                                register_mods(mods);
    2762:	80 2f       	mov	r24, r16
                switch (action.layer_tap.code) {
    #ifndef NO_ACTION_ONESHOT
                    case MODS_ONESHOT:
                        // Oneshot modifier
                        if (event.pressed) {
                            if (tap_count == 0) {
    2764:	22 23       	and	r18, r18
    2766:	49 f1       	breq	.+82     	; 0x27ba <process_action+0x14c>
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
    2768:	21 30       	cpi	r18, 0x01	; 1
    276a:	39 f5       	brne	.+78     	; 0x27ba <process_action+0x14c>
            break;
#endif
        default:
            break;
    }
}
    276c:	26 96       	adiw	r28, 0x06	; 6
    276e:	0f b6       	in	r0, 0x3f	; 63
    2770:	f8 94       	cli
    2772:	de bf       	out	0x3e, r29	; 62
    2774:	0f be       	out	0x3f, r0	; 63
    2776:	cd bf       	out	0x3d, r28	; 61
    2778:	df 91       	pop	r29
    277a:	cf 91       	pop	r28
    277c:	1f 91       	pop	r17
    277e:	0f 91       	pop	r16
    2780:	ff 90       	pop	r15
    2782:	ef 90       	pop	r14
    2784:	df 90       	pop	r13
    2786:	cf 90       	pop	r12
                            if (tap_count == 0) {
                                register_mods(mods);
                            }
                            else if (tap_count == 1) {
                                dprint("MODS_TAP: Oneshot: start\n");
                                set_oneshot_mods(mods);
    2788:	0c 94 d8 1b 	jmp	0x37b0	; 0x37b0 <set_oneshot_mods>
                            }
                            else {
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count == 0) {
    278c:	22 23       	and	r18, r18
    278e:	19 f0       	breq	.+6      	; 0x2796 <process_action+0x128>
                                clear_oneshot_mods();
                                unregister_mods(mods);
                            }
                            else if (tap_count == 1) {
    2790:	21 30       	cpi	r18, 0x01	; 1
    2792:	09 f4       	brne	.+2      	; 0x2796 <process_action+0x128>
    2794:	65 c2       	rjmp	.+1226   	; 0x2c60 <process_action+0x5f2>
                                // Retain Oneshot mods
                            }
                            else {
                                clear_oneshot_mods();
    2796:	0e 94 db 1b 	call	0x37b6	; 0x37b6 <clear_oneshot_mods>
    279a:	2c c0       	rjmp	.+88     	; 0x27f4 <process_action+0x186>
                            }
                        }
                        break;
    #endif
                    case MODS_TAP_TOGGLE:
                        if (event.pressed) {
    279c:	ff 20       	and	r15, r15
    279e:	e9 f0       	breq	.+58     	; 0x27da <process_action+0x16c>
                            if (tap_count <= TAPPING_TOGGLE) {
    27a0:	26 30       	cpi	r18, 0x06	; 6
    27a2:	08 f0       	brcs	.+2      	; 0x27a6 <process_action+0x138>
    27a4:	5d c2       	rjmp	.+1210   	; 0x2c60 <process_action+0x5f2>
                                if (mods & get_mods()) {
    27a6:	0e 94 b2 1b 	call	0x3764	; 0x3764 <get_mods>
    27aa:	80 23       	and	r24, r16
    27ac:	29 f0       	breq	.+10     	; 0x27b8 <process_action+0x14a>
    27ae:	22 c0       	rjmp	.+68     	; 0x27f4 <process_action+0x186>
                                unregister_mods(mods);
                            }
                        }
                        break;
                    default:
                        if (event.pressed) {
    27b0:	ff 20       	and	r15, r15
    27b2:	f1 f0       	breq	.+60     	; 0x27f0 <process_action+0x182>
                            if (tap_count > 0) {
    27b4:	21 11       	cpse	r18, r1
    27b6:	15 c0       	rjmp	.+42     	; 0x27e2 <process_action+0x174>
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    27b8:	80 2f       	mov	r24, r16
            break;
#endif
        default:
            break;
    }
}
    27ba:	26 96       	adiw	r28, 0x06	; 6
    27bc:	0f b6       	in	r0, 0x3f	; 63
    27be:	f8 94       	cli
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	cd bf       	out	0x3d, r28	; 61
    27c6:	df 91       	pop	r29
    27c8:	cf 91       	pop	r28
    27ca:	1f 91       	pop	r17
    27cc:	0f 91       	pop	r16
    27ce:	ff 90       	pop	r15
    27d0:	ef 90       	pop	r14
    27d2:	df 90       	pop	r13
    27d4:	cf 90       	pop	r12
                                if (mods & get_mods()) {
                                    dprint("MODS_TAP_TOGGLE: toggle mods off\n");
                                    unregister_mods(mods);
                                } else {
                                    dprint("MODS_TAP_TOGGLE: toggle mods on\n");
                                    register_mods(mods);
    27d6:	0c 94 29 13 	jmp	0x2652	; 0x2652 <register_mods>
                                }
                            }
                        } else {
                            if (tap_count < TAPPING_TOGGLE) {
    27da:	25 30       	cpi	r18, 0x05	; 5
    27dc:	08 f0       	brcs	.+2      	; 0x27e0 <process_action+0x172>
    27de:	40 c2       	rjmp	.+1152   	; 0x2c60 <process_action+0x5f2>
    27e0:	09 c0       	rjmp	.+18     	; 0x27f4 <process_action+0x186>
                        }
                        break;
                    default:
                        if (event.pressed) {
                            if (tap_count > 0) {
                                if (record->tap.interrupted) {
    27e2:	f6 01       	movw	r30, r12
    27e4:	85 81       	ldd	r24, Z+5	; 0x05
    27e6:	80 ff       	sbrs	r24, 0
    27e8:	ec c1       	rjmp	.+984    	; 0x2bc2 <process_action+0x554>
                                    dprint("MODS_TAP: Tap: Cancel: add_mods\n");
                                    // ad hoc: set 0 to cancel tap
                                    record->tap.count = 0;
    27ea:	8f 70       	andi	r24, 0x0F	; 15
    27ec:	85 83       	std	Z+5, r24	; 0x05
    27ee:	e4 cf       	rjmp	.-56     	; 0x27b8 <process_action+0x14a>
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                register_mods(mods);
                            }
                        } else {
                            if (tap_count > 0) {
    27f0:	21 11       	cpse	r18, r1
    27f2:	fb c1       	rjmp	.+1014   	; 0x2bea <process_action+0x57c>
                                dprint("MODS_TAP: Tap: unregister_code\n");
                                unregister_code(action.key.code);
                            } else {
                                dprint("MODS_TAP: No tap: add_mods\n");
                                unregister_mods(mods);
    27f4:	80 2f       	mov	r24, r16
    27f6:	69 c1       	rjmp	.+722    	; 0x2aca <process_action+0x45c>
            break;
#endif
#ifdef EXTRAKEY_ENABLE
        /* other HID usage */
        case ACT_USAGE:
            switch (action.usage.page) {
    27f8:	20 2f       	mov	r18, r16
    27fa:	26 95       	lsr	r18
    27fc:	26 95       	lsr	r18
    27fe:	23 70       	andi	r18, 0x03	; 3
    2800:	30 e0       	ldi	r19, 0x00	; 0
    2802:	21 15       	cp	r18, r1
    2804:	31 05       	cpc	r19, r1
    2806:	21 f0       	breq	.+8      	; 0x2810 <process_action+0x1a2>
    2808:	21 30       	cpi	r18, 0x01	; 1
    280a:	31 05       	cpc	r19, r1
    280c:	c9 f0       	breq	.+50     	; 0x2840 <process_action+0x1d2>
    280e:	28 c2       	rjmp	.+1104   	; 0x2c60 <process_action+0x5f2>
                case PAGE_SYSTEM:
                    if (event.pressed) {
    2810:	ff 20       	and	r15, r15
    2812:	21 f0       	breq	.+8      	; 0x281c <process_action+0x1ae>
                        host_system_send(action.usage.code);
    2814:	81 2f       	mov	r24, r17
    2816:	90 2f       	mov	r25, r16
    2818:	93 70       	andi	r25, 0x03	; 3
    281a:	02 c0       	rjmp	.+4      	; 0x2820 <process_action+0x1b2>
                    } else {
                        host_system_send(0);
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2820:	26 96       	adiw	r28, 0x06	; 6
    2822:	0f b6       	in	r0, 0x3f	; 63
    2824:	f8 94       	cli
    2826:	de bf       	out	0x3e, r29	; 62
    2828:	0f be       	out	0x3f, r0	; 63
    282a:	cd bf       	out	0x3d, r28	; 61
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	df 90       	pop	r13
    283a:	cf 90       	pop	r12
            switch (action.usage.page) {
                case PAGE_SYSTEM:
                    if (event.pressed) {
                        host_system_send(action.usage.code);
                    } else {
                        host_system_send(0);
    283c:	0c 94 bf 10 	jmp	0x217e	; 0x217e <host_system_send>
                    }
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
    2840:	ff 20       	and	r15, r15
    2842:	21 f0       	breq	.+8      	; 0x284c <process_action+0x1de>
                        host_consumer_send(action.usage.code);
    2844:	81 2f       	mov	r24, r17
    2846:	90 2f       	mov	r25, r16
    2848:	93 70       	andi	r25, 0x03	; 3
    284a:	02 c0       	rjmp	.+4      	; 0x2850 <process_action+0x1e2>
                    } else {
                        host_consumer_send(0);
    284c:	80 e0       	ldi	r24, 0x00	; 0
    284e:	90 e0       	ldi	r25, 0x00	; 0
            break;
#endif
        default:
            break;
    }
}
    2850:	26 96       	adiw	r28, 0x06	; 6
    2852:	0f b6       	in	r0, 0x3f	; 63
    2854:	f8 94       	cli
    2856:	de bf       	out	0x3e, r29	; 62
    2858:	0f be       	out	0x3f, r0	; 63
    285a:	cd bf       	out	0x3d, r28	; 61
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	ff 90       	pop	r15
    2866:	ef 90       	pop	r14
    2868:	df 90       	pop	r13
    286a:	cf 90       	pop	r12
                    break;
                case PAGE_CONSUMER:
                    if (event.pressed) {
                        host_consumer_send(action.usage.code);
                    } else {
                        host_consumer_send(0);
    286c:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <host_consumer_send>
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
                mousekey_on(action.key.code);
    2870:	81 2f       	mov	r24, r17
            break;
#endif
#ifdef MOUSEKEY_ENABLE
        /* Mouse key */
        case ACT_MOUSEKEY:
            if (event.pressed) {
    2872:	ff 20       	and	r15, r15
    2874:	19 f0       	breq	.+6      	; 0x287c <process_action+0x20e>
                mousekey_on(action.key.code);
    2876:	0e 94 f5 20 	call	0x41ea	; 0x41ea <mousekey_on>
    287a:	02 c0       	rjmp	.+4      	; 0x2880 <process_action+0x212>
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
    287c:	0e 94 5d 21 	call	0x42ba	; 0x42ba <mousekey_off>
            break;
#endif
        default:
            break;
    }
}
    2880:	26 96       	adiw	r28, 0x06	; 6
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	f8 94       	cli
    2886:	de bf       	out	0x3e, r29	; 62
    2888:	0f be       	out	0x3f, r0	; 63
    288a:	cd bf       	out	0x3d, r28	; 61
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	0f 91       	pop	r16
    2894:	ff 90       	pop	r15
    2896:	ef 90       	pop	r14
    2898:	df 90       	pop	r13
    289a:	cf 90       	pop	r12
            if (event.pressed) {
                mousekey_on(action.key.code);
                mousekey_send();
            } else {
                mousekey_off(action.key.code);
                mousekey_send();
    289c:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <mousekey_send>
            }
            break;
#endif
#ifndef NO_ACTION_LAYER
        case ACT_LAYER:
            if (action.layer_bitop.on == 0) {
    28a0:	80 2f       	mov	r24, r16
    28a2:	83 70       	andi	r24, 0x03	; 3
    28a4:	09 f0       	breq	.+2      	; 0x28a8 <process_action+0x23a>
    28a6:	78 c0       	rjmp	.+240    	; 0x2998 <process_action+0x32a>
                /* Default Layer Bitwise Operation */
                if (!event.pressed) {
    28a8:	f1 10       	cpse	r15, r1
    28aa:	da c1       	rjmp	.+948    	; 0x2c60 <process_action+0x5f2>
                    uint8_t shift = action.layer_bitop.part*4;
    28ac:	81 2f       	mov	r24, r17
    28ae:	82 95       	swap	r24
    28b0:	86 95       	lsr	r24
    28b2:	87 70       	andi	r24, 0x07	; 7
    28b4:	88 0f       	add	r24, r24
    28b6:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    28b8:	91 2f       	mov	r25, r17
    28ba:	9f 70       	andi	r25, 0x0F	; 15
    28bc:	c9 2e       	mov	r12, r25
    28be:	d1 2c       	mov	r13, r1
    28c0:	e1 2c       	mov	r14, r1
    28c2:	f1 2c       	mov	r15, r1
    28c4:	08 2e       	mov	r0, r24
    28c6:	04 c0       	rjmp	.+8      	; 0x28d0 <process_action+0x262>
    28c8:	cc 0c       	add	r12, r12
    28ca:	dd 1c       	adc	r13, r13
    28cc:	ee 1c       	adc	r14, r14
    28ce:	ff 1c       	adc	r15, r15
    28d0:	0a 94       	dec	r0
    28d2:	d2 f7       	brpl	.-12     	; 0x28c8 <process_action+0x25a>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    28d4:	14 ff       	sbrs	r17, 4
    28d6:	12 c0       	rjmp	.+36     	; 0x28fc <process_action+0x28e>
    28d8:	4f e0       	ldi	r20, 0x0F	; 15
    28da:	50 e0       	ldi	r21, 0x00	; 0
    28dc:	60 e0       	ldi	r22, 0x00	; 0
    28de:	70 e0       	ldi	r23, 0x00	; 0
    28e0:	04 c0       	rjmp	.+8      	; 0x28ea <process_action+0x27c>
    28e2:	44 0f       	add	r20, r20
    28e4:	55 1f       	adc	r21, r21
    28e6:	66 1f       	adc	r22, r22
    28e8:	77 1f       	adc	r23, r23
    28ea:	8a 95       	dec	r24
    28ec:	d2 f7       	brpl	.-12     	; 0x28e2 <process_action+0x274>
    28ee:	cb 01       	movw	r24, r22
    28f0:	ba 01       	movw	r22, r20
    28f2:	60 95       	com	r22
    28f4:	70 95       	com	r23
    28f6:	80 95       	com	r24
    28f8:	90 95       	com	r25
    28fa:	03 c0       	rjmp	.+6      	; 0x2902 <process_action+0x294>
    28fc:	60 e0       	ldi	r22, 0x00	; 0
    28fe:	70 e0       	ldi	r23, 0x00	; 0
    2900:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2902:	20 2f       	mov	r18, r16
    2904:	26 95       	lsr	r18
    2906:	26 95       	lsr	r18
    2908:	23 70       	andi	r18, 0x03	; 3
    290a:	42 2f       	mov	r20, r18
    290c:	50 e0       	ldi	r21, 0x00	; 0
    290e:	42 30       	cpi	r20, 0x02	; 2
    2910:	51 05       	cpc	r21, r1
    2912:	d1 f0       	breq	.+52     	; 0x2948 <process_action+0x2da>
    2914:	43 30       	cpi	r20, 0x03	; 3
    2916:	51 05       	cpc	r21, r1
    2918:	59 f1       	breq	.+86     	; 0x2970 <process_action+0x302>
    291a:	6c 29       	or	r22, r12
    291c:	7d 29       	or	r23, r13
    291e:	8e 29       	or	r24, r14
    2920:	9f 29       	or	r25, r15
    2922:	41 30       	cpi	r20, 0x01	; 1
    2924:	51 05       	cpc	r21, r1
    2926:	41 f1       	breq	.+80     	; 0x2978 <process_action+0x30a>
            break;
#endif
        default:
            break;
    }
}
    2928:	26 96       	adiw	r28, 0x06	; 6
    292a:	0f b6       	in	r0, 0x3f	; 63
    292c:	f8 94       	cli
    292e:	de bf       	out	0x3e, r29	; 62
    2930:	0f be       	out	0x3f, r0	; 63
    2932:	cd bf       	out	0x3d, r28	; 61
    2934:	df 91       	pop	r29
    2936:	cf 91       	pop	r28
    2938:	1f 91       	pop	r17
    293a:	0f 91       	pop	r16
    293c:	ff 90       	pop	r15
    293e:	ef 90       	pop	r14
    2940:	df 90       	pop	r13
    2942:	cf 90       	pop	r12
                if (!event.pressed) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
    2944:	0c 94 59 1a 	jmp	0x34b2	; 0x34b2 <default_layer_and>
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    2948:	6c 29       	or	r22, r12
    294a:	7d 29       	or	r23, r13
    294c:	8e 29       	or	r24, r14
    294e:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2950:	26 96       	adiw	r28, 0x06	; 6
    2952:	0f b6       	in	r0, 0x3f	; 63
    2954:	f8 94       	cli
    2956:	de bf       	out	0x3e, r29	; 62
    2958:	0f be       	out	0x3f, r0	; 63
    295a:	cd bf       	out	0x3d, r28	; 61
    295c:	df 91       	pop	r29
    295e:	cf 91       	pop	r28
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	ff 90       	pop	r15
    2966:	ef 90       	pop	r14
    2968:	df 90       	pop	r13
    296a:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
    296c:	0c 94 6b 1a 	jmp	0x34d6	; 0x34d6 <default_layer_xor>
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2970:	0e 94 59 1a 	call	0x34b2	; 0x34b2 <default_layer_and>
    2974:	c7 01       	movw	r24, r14
    2976:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2978:	26 96       	adiw	r28, 0x06	; 6
    297a:	0f b6       	in	r0, 0x3f	; 63
    297c:	f8 94       	cli
    297e:	de bf       	out	0x3e, r29	; 62
    2980:	0f be       	out	0x3f, r0	; 63
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	df 91       	pop	r29
    2986:	cf 91       	pop	r28
    2988:	1f 91       	pop	r17
    298a:	0f 91       	pop	r16
    298c:	ff 90       	pop	r15
    298e:	ef 90       	pop	r14
    2990:	df 90       	pop	r13
    2992:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: default_layer_and(bits | mask); break;
                        case OP_BIT_OR:  default_layer_or(bits | mask);  break;
                        case OP_BIT_XOR: default_layer_xor(bits | mask); break;
                        case OP_BIT_SET: default_layer_and(mask); default_layer_or(bits); break;
    2994:	0c 94 47 1a 	jmp	0x348e	; 0x348e <default_layer_or>
                    }
                }
            } else {
                /* Layer Bitwise Operation */
                if (event.pressed ? (action.layer_bitop.on & ON_PRESS) :
    2998:	ff 20       	and	r15, r15
    299a:	19 f0       	breq	.+6      	; 0x29a2 <process_action+0x334>
    299c:	80 2f       	mov	r24, r16
    299e:	81 70       	andi	r24, 0x01	; 1
    29a0:	01 c0       	rjmp	.+2      	; 0x29a4 <process_action+0x336>
    29a2:	86 95       	lsr	r24
    29a4:	88 23       	and	r24, r24
    29a6:	09 f4       	brne	.+2      	; 0x29aa <process_action+0x33c>
    29a8:	5b c1       	rjmp	.+694    	; 0x2c60 <process_action+0x5f2>
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
    29aa:	81 2f       	mov	r24, r17
    29ac:	82 95       	swap	r24
    29ae:	86 95       	lsr	r24
    29b0:	87 70       	andi	r24, 0x07	; 7
    29b2:	88 0f       	add	r24, r24
    29b4:	88 0f       	add	r24, r24
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
    29b6:	91 2f       	mov	r25, r17
    29b8:	9f 70       	andi	r25, 0x0F	; 15
    29ba:	c9 2e       	mov	r12, r25
    29bc:	d1 2c       	mov	r13, r1
    29be:	e1 2c       	mov	r14, r1
    29c0:	f1 2c       	mov	r15, r1
    29c2:	08 2e       	mov	r0, r24
    29c4:	04 c0       	rjmp	.+8      	; 0x29ce <process_action+0x360>
    29c6:	cc 0c       	add	r12, r12
    29c8:	dd 1c       	adc	r13, r13
    29ca:	ee 1c       	adc	r14, r14
    29cc:	ff 1c       	adc	r15, r15
    29ce:	0a 94       	dec	r0
    29d0:	d2 f7       	brpl	.-12     	; 0x29c6 <process_action+0x358>
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
    29d2:	14 ff       	sbrs	r17, 4
    29d4:	12 c0       	rjmp	.+36     	; 0x29fa <process_action+0x38c>
    29d6:	4f e0       	ldi	r20, 0x0F	; 15
    29d8:	50 e0       	ldi	r21, 0x00	; 0
    29da:	60 e0       	ldi	r22, 0x00	; 0
    29dc:	70 e0       	ldi	r23, 0x00	; 0
    29de:	04 c0       	rjmp	.+8      	; 0x29e8 <process_action+0x37a>
    29e0:	44 0f       	add	r20, r20
    29e2:	55 1f       	adc	r21, r21
    29e4:	66 1f       	adc	r22, r22
    29e6:	77 1f       	adc	r23, r23
    29e8:	8a 95       	dec	r24
    29ea:	d2 f7       	brpl	.-12     	; 0x29e0 <process_action+0x372>
    29ec:	cb 01       	movw	r24, r22
    29ee:	ba 01       	movw	r22, r20
    29f0:	60 95       	com	r22
    29f2:	70 95       	com	r23
    29f4:	80 95       	com	r24
    29f6:	90 95       	com	r25
    29f8:	03 c0       	rjmp	.+6      	; 0x2a00 <process_action+0x392>
    29fa:	60 e0       	ldi	r22, 0x00	; 0
    29fc:	70 e0       	ldi	r23, 0x00	; 0
    29fe:	cb 01       	movw	r24, r22
                    switch (action.layer_bitop.op) {
    2a00:	20 2f       	mov	r18, r16
    2a02:	26 95       	lsr	r18
    2a04:	26 95       	lsr	r18
    2a06:	23 70       	andi	r18, 0x03	; 3
    2a08:	42 2f       	mov	r20, r18
    2a0a:	50 e0       	ldi	r21, 0x00	; 0
    2a0c:	42 30       	cpi	r20, 0x02	; 2
    2a0e:	51 05       	cpc	r21, r1
    2a10:	d1 f0       	breq	.+52     	; 0x2a46 <process_action+0x3d8>
    2a12:	43 30       	cpi	r20, 0x03	; 3
    2a14:	51 05       	cpc	r21, r1
    2a16:	59 f1       	breq	.+86     	; 0x2a6e <process_action+0x400>
    2a18:	6c 29       	or	r22, r12
    2a1a:	7d 29       	or	r23, r13
    2a1c:	8e 29       	or	r24, r14
    2a1e:	9f 29       	or	r25, r15
    2a20:	41 30       	cpi	r20, 0x01	; 1
    2a22:	51 05       	cpc	r21, r1
    2a24:	41 f1       	breq	.+80     	; 0x2a76 <process_action+0x408>
            break;
#endif
        default:
            break;
    }
}
    2a26:	26 96       	adiw	r28, 0x06	; 6
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	df 91       	pop	r29
    2a34:	cf 91       	pop	r28
    2a36:	1f 91       	pop	r17
    2a38:	0f 91       	pop	r16
    2a3a:	ff 90       	pop	r15
    2a3c:	ef 90       	pop	r14
    2a3e:	df 90       	pop	r13
    2a40:	cf 90       	pop	r12
                                    (action.layer_bitop.on & ON_RELEASE)) {
                    uint8_t shift = action.layer_bitop.part*4;
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
    2a42:	0c 94 10 1b 	jmp	0x3620	; 0x3620 <layer_and>
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a46:	6c 29       	or	r22, r12
    2a48:	7d 29       	or	r23, r13
    2a4a:	8e 29       	or	r24, r14
    2a4c:	9f 29       	or	r25, r15
            break;
#endif
        default:
            break;
    }
}
    2a4e:	26 96       	adiw	r28, 0x06	; 6
    2a50:	0f b6       	in	r0, 0x3f	; 63
    2a52:	f8 94       	cli
    2a54:	de bf       	out	0x3e, r29	; 62
    2a56:	0f be       	out	0x3f, r0	; 63
    2a58:	cd bf       	out	0x3d, r28	; 61
    2a5a:	df 91       	pop	r29
    2a5c:	cf 91       	pop	r28
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	df 90       	pop	r13
    2a68:	cf 90       	pop	r12
                    uint32_t bits = ((uint32_t)action.layer_bitop.bits)<<shift;
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
    2a6a:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <layer_xor>
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2a6e:	0e 94 10 1b 	call	0x3620	; 0x3620 <layer_and>
    2a72:	c7 01       	movw	r24, r14
    2a74:	b6 01       	movw	r22, r12
            break;
#endif
        default:
            break;
    }
}
    2a76:	26 96       	adiw	r28, 0x06	; 6
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	df 91       	pop	r29
    2a84:	cf 91       	pop	r28
    2a86:	1f 91       	pop	r17
    2a88:	0f 91       	pop	r16
    2a8a:	ff 90       	pop	r15
    2a8c:	ef 90       	pop	r14
    2a8e:	df 90       	pop	r13
    2a90:	cf 90       	pop	r12
                    uint32_t mask = (action.layer_bitop.xbit) ? ~(((uint32_t)0xf)<<shift) : 0;
                    switch (action.layer_bitop.op) {
                        case OP_BIT_AND: layer_and(bits | mask); break;
                        case OP_BIT_OR:  layer_or(bits | mask);  break;
                        case OP_BIT_XOR: layer_xor(bits | mask); break;
                        case OP_BIT_SET: layer_and(mask); layer_or(bits); break;
    2a92:	0c 94 fe 1a 	jmp	0x35fc	; 0x35fc <layer_or>
            }
            break;
    #ifndef NO_ACTION_TAPPING
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2a96:	10 3f       	cpi	r17, 0xF0	; 240
    2a98:	41 f1       	breq	.+80     	; 0x2aea <process_action+0x47c>
    2a9a:	18 f4       	brcc	.+6      	; 0x2aa2 <process_action+0x434>
    2a9c:	10 3e       	cpi	r17, 0xE0	; 224
    2a9e:	48 f4       	brcc	.+18     	; 0x2ab2 <process_action+0x444>
    2aa0:	8b c0       	rjmp	.+278    	; 0x2bb8 <process_action+0x54a>
    2aa2:	12 3f       	cpi	r17, 0xF2	; 242
    2aa4:	09 f4       	brne	.+2      	; 0x2aa8 <process_action+0x43a>
    2aa6:	50 c0       	rjmp	.+160    	; 0x2b48 <process_action+0x4da>
    2aa8:	d8 f1       	brcs	.+118    	; 0x2b20 <process_action+0x4b2>
    2aaa:	13 3f       	cpi	r17, 0xF3	; 243
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <process_action+0x442>
    2aae:	60 c0       	rjmp	.+192    	; 0x2b70 <process_action+0x502>
    2ab0:	83 c0       	rjmp	.+262    	; 0x2bb8 <process_action+0x54a>
    2ab2:	1f 70       	andi	r17, 0x0F	; 15
    2ab4:	80 2f       	mov	r24, r16
    2ab6:	8f 71       	andi	r24, 0x1F	; 31
                case 0xe0 ... 0xef:
                    /* layer On/Off with modifiers(left only) */
                    if (event.pressed) {
    2ab8:	ff 20       	and	r15, r15
    2aba:	21 f0       	breq	.+8      	; 0x2ac4 <process_action+0x456>
                        layer_on(action.layer_tap.val);
    2abc:	0e 94 97 1a 	call	0x352e	; 0x352e <layer_on>
                        register_mods(action.layer_tap.code & 0x0f);
    2ac0:	81 2f       	mov	r24, r17
    2ac2:	7b ce       	rjmp	.-778    	; 0x27ba <process_action+0x14c>
                    } else {
                        layer_off(action.layer_tap.val);
    2ac4:	0e 94 b8 1a 	call	0x3570	; 0x3570 <layer_off>
                        unregister_mods(action.layer_tap.code & 0x0f);
    2ac8:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2aca:	26 96       	adiw	r28, 0x06	; 6
    2acc:	0f b6       	in	r0, 0x3f	; 63
    2ace:	f8 94       	cli
    2ad0:	de bf       	out	0x3e, r29	; 62
    2ad2:	0f be       	out	0x3f, r0	; 63
    2ad4:	cd bf       	out	0x3d, r28	; 61
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
                    if (event.pressed) {
                        layer_on(action.layer_tap.val);
                        register_mods(action.layer_tap.code & 0x0f);
                    } else {
                        layer_off(action.layer_tap.val);
                        unregister_mods(action.layer_tap.code & 0x0f);
    2ae6:	0c 94 30 13 	jmp	0x2660	; 0x2660 <unregister_mods>
                    }
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
    2aea:	ff 20       	and	r15, r15
    2aec:	a9 f0       	breq	.+42     	; 0x2b18 <process_action+0x4aa>
                        if (tap_count < TAPPING_TOGGLE) {
    2aee:	25 30       	cpi	r18, 0x05	; 5
    2af0:	08 f0       	brcs	.+2      	; 0x2af4 <process_action+0x486>
    2af2:	b6 c0       	rjmp	.+364    	; 0x2c60 <process_action+0x5f2>
                            layer_invert(action.layer_tap.val);
    2af4:	80 2f       	mov	r24, r16
    2af6:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2af8:	26 96       	adiw	r28, 0x06	; 6
    2afa:	0f b6       	in	r0, 0x3f	; 63
    2afc:	f8 94       	cli
    2afe:	de bf       	out	0x3e, r29	; 62
    2b00:	0f be       	out	0x3f, r0	; 63
    2b02:	cd bf       	out	0x3d, r28	; 61
    2b04:	df 91       	pop	r29
    2b06:	cf 91       	pop	r28
    2b08:	1f 91       	pop	r17
    2b0a:	0f 91       	pop	r16
    2b0c:	ff 90       	pop	r15
    2b0e:	ef 90       	pop	r14
    2b10:	df 90       	pop	r13
    2b12:	cf 90       	pop	r12
                    break;
                case OP_TAP_TOGGLE:
                    /* tap toggle */
                    if (event.pressed) {
                        if (tap_count < TAPPING_TOGGLE) {
                            layer_invert(action.layer_tap.val);
    2b14:	0c 94 dd 1a 	jmp	0x35ba	; 0x35ba <layer_invert>
                        }
                    } else {
                        if (tap_count <= TAPPING_TOGGLE) {
    2b18:	26 30       	cpi	r18, 0x06	; 6
    2b1a:	08 f0       	brcs	.+2      	; 0x2b1e <process_action+0x4b0>
    2b1c:	a1 c0       	rjmp	.+322    	; 0x2c60 <process_action+0x5f2>
    2b1e:	ea cf       	rjmp	.-44     	; 0x2af4 <process_action+0x486>
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b20:	ff 20       	and	r15, r15
    2b22:	a1 f0       	breq	.+40     	; 0x2b4c <process_action+0x4de>
    2b24:	80 2f       	mov	r24, r16
    2b26:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b28:	26 96       	adiw	r28, 0x06	; 6
    2b2a:	0f b6       	in	r0, 0x3f	; 63
    2b2c:	f8 94       	cli
    2b2e:	de bf       	out	0x3e, r29	; 62
    2b30:	0f be       	out	0x3f, r0	; 63
    2b32:	cd bf       	out	0x3d, r28	; 61
    2b34:	df 91       	pop	r29
    2b36:	cf 91       	pop	r28
    2b38:	1f 91       	pop	r17
    2b3a:	0f 91       	pop	r16
    2b3c:	ff 90       	pop	r15
    2b3e:	ef 90       	pop	r14
    2b40:	df 90       	pop	r13
    2b42:	cf 90       	pop	r12
                            layer_invert(action.layer_tap.val);
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
    2b44:	0c 94 97 1a 	jmp	0x352e	; 0x352e <layer_on>
                                    layer_off(action.layer_tap.val);
                    break;
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
    2b48:	ff 20       	and	r15, r15
    2b4a:	61 f3       	breq	.-40     	; 0x2b24 <process_action+0x4b6>
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2b4c:	80 2f       	mov	r24, r16
    2b4e:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b50:	26 96       	adiw	r28, 0x06	; 6
    2b52:	0f b6       	in	r0, 0x3f	; 63
    2b54:	f8 94       	cli
    2b56:	de bf       	out	0x3e, r29	; 62
    2b58:	0f be       	out	0x3f, r0	; 63
    2b5a:	cd bf       	out	0x3d, r28	; 61
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	1f 91       	pop	r17
    2b62:	0f 91       	pop	r16
    2b64:	ff 90       	pop	r15
    2b66:	ef 90       	pop	r14
    2b68:	df 90       	pop	r13
    2b6a:	cf 90       	pop	r12
                        }
                    }
                    break;
                case OP_ON_OFF:
                    event.pressed ? layer_on(action.layer_tap.val) :
                                    layer_off(action.layer_tap.val);
    2b6c:	0c 94 b8 1a 	jmp	0x3570	; 0x3570 <layer_off>
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b70:	ff 20       	and	r15, r15
    2b72:	91 f0       	breq	.+36     	; 0x2b98 <process_action+0x52a>
    2b74:	80 2f       	mov	r24, r16
    2b76:	8f 71       	andi	r24, 0x1F	; 31
            break;
#endif
        default:
            break;
    }
}
    2b78:	26 96       	adiw	r28, 0x06	; 6
    2b7a:	0f b6       	in	r0, 0x3f	; 63
    2b7c:	f8 94       	cli
    2b7e:	de bf       	out	0x3e, r29	; 62
    2b80:	0f be       	out	0x3f, r0	; 63
    2b82:	cd bf       	out	0x3d, r28	; 61
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	0f 91       	pop	r16
    2b8c:	ff 90       	pop	r15
    2b8e:	ef 90       	pop	r14
    2b90:	df 90       	pop	r13
    2b92:	cf 90       	pop	r12
                case OP_OFF_ON:
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
    2b94:	0c 94 82 1a 	jmp	0x3504	; 0x3504 <layer_move>
            break;
#endif
        default:
            break;
    }
}
    2b98:	26 96       	adiw	r28, 0x06	; 6
    2b9a:	0f b6       	in	r0, 0x3f	; 63
    2b9c:	f8 94       	cli
    2b9e:	de bf       	out	0x3e, r29	; 62
    2ba0:	0f be       	out	0x3f, r0	; 63
    2ba2:	cd bf       	out	0x3d, r28	; 61
    2ba4:	df 91       	pop	r29
    2ba6:	cf 91       	pop	r28
    2ba8:	1f 91       	pop	r17
    2baa:	0f 91       	pop	r16
    2bac:	ff 90       	pop	r15
    2bae:	ef 90       	pop	r14
    2bb0:	df 90       	pop	r13
    2bb2:	cf 90       	pop	r12
                    event.pressed ? layer_off(action.layer_tap.val) :
                                    layer_on(action.layer_tap.val);
                    break;
                case OP_SET_CLEAR:
                    event.pressed ? layer_move(action.layer_tap.val) :
                                    layer_clear();
    2bb4:	0c 94 7d 1a 	jmp	0x34fa	; 0x34fa <layer_clear>
                    break;
                default:
                    /* tap key */
                    if (event.pressed) {
    2bb8:	ff 20       	and	r15, r15
    2bba:	a1 f0       	breq	.+40     	; 0x2be4 <process_action+0x576>
                        if (tap_count > 0) {
    2bbc:	22 23       	and	r18, r18
    2bbe:	09 f4       	brne	.+2      	; 0x2bc2 <process_action+0x554>
    2bc0:	b1 cf       	rjmp	.-158    	; 0x2b24 <process_action+0x4b6>
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2bc2:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2bc4:	26 96       	adiw	r28, 0x06	; 6
    2bc6:	0f b6       	in	r0, 0x3f	; 63
    2bc8:	f8 94       	cli
    2bca:	de bf       	out	0x3e, r29	; 62
    2bcc:	0f be       	out	0x3f, r0	; 63
    2bce:	cd bf       	out	0x3d, r28	; 61
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
                default:
                    /* tap key */
                    if (event.pressed) {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: register_code\n");
                            register_code(action.layer_tap.code);
    2be0:	0c 94 07 12 	jmp	0x240e	; 0x240e <register_code>
                        } else {
                            dprint("KEYMAP_TAP_KEY: No tap: On on press\n");
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
    2be4:	22 23       	and	r18, r18
    2be6:	09 f4       	brne	.+2      	; 0x2bea <process_action+0x57c>
    2be8:	b1 cf       	rjmp	.-158    	; 0x2b4c <process_action+0x4de>
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2bea:	81 2f       	mov	r24, r17
            break;
#endif
        default:
            break;
    }
}
    2bec:	26 96       	adiw	r28, 0x06	; 6
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	f8 94       	cli
    2bf2:	de bf       	out	0x3e, r29	; 62
    2bf4:	0f be       	out	0x3f, r0	; 63
    2bf6:	cd bf       	out	0x3d, r28	; 61
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	1f 91       	pop	r17
    2bfe:	0f 91       	pop	r16
    2c00:	ff 90       	pop	r15
    2c02:	ef 90       	pop	r14
    2c04:	df 90       	pop	r13
    2c06:	cf 90       	pop	r12
                            layer_on(action.layer_tap.val);
                        }
                    } else {
                        if (tap_count > 0) {
                            dprint("KEYMAP_TAP_KEY: Tap: unregister_code\n");
                            unregister_code(action.layer_tap.code);
    2c08:	0c 94 da 12 	jmp	0x25b4	; 0x25b4 <unregister_code>
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c0c:	40 2f       	mov	r20, r16
    2c0e:	4f 70       	andi	r20, 0x0F	; 15
    2c10:	61 2f       	mov	r22, r17
    2c12:	c6 01       	movw	r24, r12
    2c14:	0e 94 8e 1e 	call	0x3d1c	; 0x3d1c <action_get_macro>
            break;
#endif
        default:
            break;
    }
}
    2c18:	26 96       	adiw	r28, 0x06	; 6
    2c1a:	0f b6       	in	r0, 0x3f	; 63
    2c1c:	f8 94       	cli
    2c1e:	de bf       	out	0x3e, r29	; 62
    2c20:	0f be       	out	0x3f, r0	; 63
    2c22:	cd bf       	out	0x3d, r28	; 61
    2c24:	df 91       	pop	r29
    2c26:	cf 91       	pop	r28
    2c28:	1f 91       	pop	r17
    2c2a:	0f 91       	pop	r16
    2c2c:	ff 90       	pop	r15
    2c2e:	ef 90       	pop	r14
    2c30:	df 90       	pop	r13
    2c32:	cf 90       	pop	r12
    #endif
#endif
        /* Extentions */
#ifndef NO_ACTION_MACRO
        case ACT_MACRO:
            action_macro_play(action_get_macro(record, action.func.id, action.func.opt));
    2c34:	0c 94 8f 19 	jmp	0x331e	; 0x331e <action_macro_play>
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c38:	40 2f       	mov	r20, r16
    2c3a:	4f 70       	andi	r20, 0x0F	; 15
    2c3c:	61 2f       	mov	r22, r17
    2c3e:	c6 01       	movw	r24, r12
            break;
#endif
        default:
            break;
    }
}
    2c40:	26 96       	adiw	r28, 0x06	; 6
    2c42:	0f b6       	in	r0, 0x3f	; 63
    2c44:	f8 94       	cli
    2c46:	de bf       	out	0x3e, r29	; 62
    2c48:	0f be       	out	0x3f, r0	; 63
    2c4a:	cd bf       	out	0x3d, r28	; 61
    2c4c:	df 91       	pop	r29
    2c4e:	cf 91       	pop	r28
    2c50:	1f 91       	pop	r17
    2c52:	0f 91       	pop	r16
    2c54:	ff 90       	pop	r15
    2c56:	ef 90       	pop	r14
    2c58:	df 90       	pop	r13
    2c5a:	cf 90       	pop	r12
#endif
        case ACT_COMMAND:
            break;
#ifndef NO_ACTION_FUNCTION
        case ACT_FUNCTION:
            action_function(record, action.func.id, action.func.opt);
    2c5c:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <action_function>
            break;
#endif
        default:
            break;
    }
}
    2c60:	26 96       	adiw	r28, 0x06	; 6
    2c62:	0f b6       	in	r0, 0x3f	; 63
    2c64:	f8 94       	cli
    2c66:	de bf       	out	0x3e, r29	; 62
    2c68:	0f be       	out	0x3f, r0	; 63
    2c6a:	cd bf       	out	0x3d, r28	; 61
    2c6c:	df 91       	pop	r29
    2c6e:	cf 91       	pop	r28
    2c70:	1f 91       	pop	r17
    2c72:	0f 91       	pop	r16
    2c74:	ff 90       	pop	r15
    2c76:	ef 90       	pop	r14
    2c78:	df 90       	pop	r13
    2c7a:	cf 90       	pop	r12
    2c7c:	08 95       	ret

00002c7e <clear_keyboard_but_mods>:
    clear_keyboard_but_mods();
}

void clear_keyboard_but_mods(void)
{
    clear_weak_mods();
    2c7e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <clear_weak_mods>
    clear_keys();
    2c82:	0e 94 a4 1b 	call	0x3748	; 0x3748 <clear_keys>
    send_keyboard_report();
    2c86:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
#ifdef MOUSEKEY_ENABLE
    mousekey_clear();
    2c8a:	0e 94 14 23 	call	0x4628	; 0x4628 <mousekey_clear>
    mousekey_send();
    2c8e:	0e 94 e2 21 	call	0x43c4	; 0x43c4 <mousekey_send>
#endif
#ifdef EXTRAKEY_ENABLE
    host_system_send(0);
    2c92:	80 e0       	ldi	r24, 0x00	; 0
    2c94:	90 e0       	ldi	r25, 0x00	; 0
    2c96:	0e 94 bf 10 	call	0x217e	; 0x217e <host_system_send>
    host_consumer_send(0);
    2c9a:	80 e0       	ldi	r24, 0x00	; 0
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <host_consumer_send>

00002ca2 <clear_keyboard>:
    }
}

void clear_keyboard(void)
{
    clear_mods();
    2ca2:	0e 94 c5 1b 	call	0x378a	; 0x378a <clear_mods>
    clear_keyboard_but_mods();
    2ca6:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <clear_keyboard_but_mods>

00002caa <is_tap_key>:
#endif
}

bool is_tap_key(keypos_t key)
{
    action_t action = layer_switch_get_action(key);
    2caa:	0e 94 35 1b 	call	0x366a	; 0x366a <layer_switch_get_action>

    switch (action.kind.id) {
    2cae:	29 2f       	mov	r18, r25
    2cb0:	22 95       	swap	r18
    2cb2:	2f 70       	andi	r18, 0x0F	; 15
    2cb4:	30 e0       	ldi	r19, 0x00	; 0
    2cb6:	2c 30       	cpi	r18, 0x0C	; 12
    2cb8:	31 05       	cpc	r19, r1
    2cba:	4c f4       	brge	.+18     	; 0x2cce <is_tap_key+0x24>
    2cbc:	2a 30       	cpi	r18, 0x0A	; 10
    2cbe:	31 05       	cpc	r19, r1
    2cc0:	6c f4       	brge	.+26     	; 0x2cdc <is_tap_key+0x32>
    2cc2:	22 50       	subi	r18, 0x02	; 2
    2cc4:	31 09       	sbc	r19, r1
    2cc6:	22 30       	cpi	r18, 0x02	; 2
    2cc8:	31 05       	cpc	r19, r1
    2cca:	88 f4       	brcc	.+34     	; 0x2cee <is_tap_key+0x44>
    2ccc:	07 c0       	rjmp	.+14     	; 0x2cdc <is_tap_key+0x32>
    2cce:	2c 30       	cpi	r18, 0x0C	; 12
    2cd0:	31 05       	cpc	r19, r1
    2cd2:	49 f0       	breq	.+18     	; 0x2ce6 <is_tap_key+0x3c>
    2cd4:	2f 30       	cpi	r18, 0x0F	; 15
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	31 f0       	breq	.+12     	; 0x2ce6 <is_tap_key+0x3c>
    2cda:	09 c0       	rjmp	.+18     	; 0x2cee <is_tap_key+0x44>
        case ACT_LMODS_TAP:
        case ACT_RMODS_TAP:
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
    2cdc:	80 3e       	cpi	r24, 0xE0	; 224
    2cde:	48 f0       	brcs	.+18     	; 0x2cf2 <is_tap_key+0x48>
    2ce0:	80 3f       	cpi	r24, 0xF0	; 240
    2ce2:	29 f4       	brne	.+10     	; 0x2cee <is_tap_key+0x44>
    2ce4:	06 c0       	rjmp	.+12     	; 0x2cf2 <is_tap_key+0x48>
                    return true;
            }
            return false;
        case ACT_MACRO:
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
    2ce6:	93 fb       	bst	r25, 3
    2ce8:	88 27       	eor	r24, r24
    2cea:	80 f9       	bld	r24, 0
    2cec:	08 95       	ret
            return false;
    }
    return false;
    2cee:	80 e0       	ldi	r24, 0x00	; 0
    2cf0:	08 95       	ret
        case ACT_LAYER_TAP:
        case ACT_LAYER_TAP_EXT:
            switch (action.layer_tap.code) {
                case 0x00 ... 0xdf:
                case OP_TAP_TOGGLE:
                    return true;
    2cf2:	81 e0       	ldi	r24, 0x01	; 1
        case ACT_FUNCTION:
            if (action.func.opt & FUNC_TAP) { return true; }
            return false;
    }
    return false;
}
    2cf4:	08 95       	ret

00002cf6 <debug_event>:

/*
 * debug print
 */
void debug_event(keyevent_t event)
{
    2cf6:	cf 93       	push	r28
    2cf8:	df 93       	push	r29
    2cfa:	00 d0       	rcall	.+0      	; 0x2cfc <debug_event+0x6>
    2cfc:	00 d0       	rcall	.+0      	; 0x2cfe <debug_event+0x8>
    2cfe:	1f 92       	push	r1
    2d00:	cd b7       	in	r28, 0x3d	; 61
    2d02:	de b7       	in	r29, 0x3e	; 62
    dprintf("%04X%c(%u)", (event.key.row<<8 | event.key.col), (event.pressed ? 'd' : 'u'), event.time);
}
    2d04:	0f 90       	pop	r0
    2d06:	0f 90       	pop	r0
    2d08:	0f 90       	pop	r0
    2d0a:	0f 90       	pop	r0
    2d0c:	0f 90       	pop	r0
    2d0e:	df 91       	pop	r29
    2d10:	cf 91       	pop	r28
    2d12:	08 95       	ret

00002d14 <debug_record>:

void debug_record(keyrecord_t record)
{
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	00 d0       	rcall	.+0      	; 0x2d1a <debug_record+0x6>
    2d1a:	00 d0       	rcall	.+0      	; 0x2d1c <debug_record+0x8>
    2d1c:	00 d0       	rcall	.+0      	; 0x2d1e <debug_record+0xa>
    2d1e:	cd b7       	in	r28, 0x3d	; 61
    2d20:	de b7       	in	r29, 0x3e	; 62
    debug_event(record.event);
#ifndef NO_ACTION_TAPPING
    dprintf(":%u%c", record.tap.count, (record.tap.interrupted ? '-' : ' '));
#endif
}
    2d22:	26 96       	adiw	r28, 0x06	; 6
    2d24:	0f b6       	in	r0, 0x3f	; 63
    2d26:	f8 94       	cli
    2d28:	de bf       	out	0x3e, r29	; 62
    2d2a:	0f be       	out	0x3f, r0	; 63
    2d2c:	cd bf       	out	0x3d, r28	; 61
    2d2e:	df 91       	pop	r29
    2d30:	cf 91       	pop	r28
    2d32:	08 95       	ret

00002d34 <debug_waiting_buffer>:
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
}

static void debug_waiting_buffer(void)
{
    2d34:	1f 93       	push	r17
    2d36:	cf 93       	push	r28
    2d38:	df 93       	push	r29
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d3a:	c0 91 6c 01 	lds	r28, 0x016C
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d3e:	16 e0       	ldi	r17, 0x06	; 6
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d40:	80 91 6d 01 	lds	r24, 0x016D
    2d44:	c8 17       	cp	r28, r24
    2d46:	99 f0       	breq	.+38     	; 0x2d6e <debug_waiting_buffer+0x3a>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    2d48:	d0 e0       	ldi	r29, 0x00	; 0
    2d4a:	1c 9f       	mul	r17, r28
    2d4c:	f0 01       	movw	r30, r0
    2d4e:	1d 9f       	mul	r17, r29
    2d50:	f0 0d       	add	r31, r0
    2d52:	11 24       	eor	r1, r1
    2d54:	e2 59       	subi	r30, 0x92	; 146
    2d56:	fe 4f       	sbci	r31, 0xFE	; 254
    2d58:	40 81       	ld	r20, Z
    2d5a:	51 81       	ldd	r21, Z+1	; 0x01
    2d5c:	62 81       	ldd	r22, Z+2	; 0x02
    2d5e:	73 81       	ldd	r23, Z+3	; 0x03
    2d60:	84 81       	ldd	r24, Z+4	; 0x04
    2d62:	95 81       	ldd	r25, Z+5	; 0x05
    2d64:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <debug_record>
}

static void debug_waiting_buffer(void)
{
    debug("{ ");
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2d68:	21 96       	adiw	r28, 0x01	; 1
    2d6a:	c7 70       	andi	r28, 0x07	; 7
    2d6c:	e9 cf       	rjmp	.-46     	; 0x2d40 <debug_waiting_buffer+0xc>
        debug("["); debug_dec(i); debug("]="); debug_record(waiting_buffer[i]); debug(" ");
    }
    debug("}\n");
}
    2d6e:	df 91       	pop	r29
    2d70:	cf 91       	pop	r28
    2d72:	1f 91       	pop	r17
    2d74:	08 95       	ret

00002d76 <debug_tapping_key>:
/*
 * debug print
 */
static void debug_tapping_key(void)
{
    debug("TAPPING_KEY="); debug_record(tapping_key); debug("\n");
    2d76:	40 91 9e 01 	lds	r20, 0x019E
    2d7a:	50 91 9f 01 	lds	r21, 0x019F
    2d7e:	60 91 a0 01 	lds	r22, 0x01A0
    2d82:	70 91 a1 01 	lds	r23, 0x01A1
    2d86:	80 91 a2 01 	lds	r24, 0x01A2
    2d8a:	90 91 a3 01 	lds	r25, 0x01A3
    2d8e:	0c 94 8a 16 	jmp	0x2d14	; 0x2d14 <debug_record>

00002d92 <waiting_buffer_scan_tap>:

/* scan buffer for tapping */
void waiting_buffer_scan_tap(void)
{
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    2d92:	80 91 a3 01 	lds	r24, 0x01A3
    2d96:	82 95       	swap	r24
    2d98:	8f 70       	andi	r24, 0x0F	; 15
    2d9a:	09 f0       	breq	.+2      	; 0x2d9e <waiting_buffer_scan_tap+0xc>
    2d9c:	54 c0       	rjmp	.+168    	; 0x2e46 <waiting_buffer_scan_tap+0xb4>
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;
    2d9e:	80 91 a0 01 	lds	r24, 0x01A0
    2da2:	88 23       	and	r24, r24
    2da4:	09 f4       	brne	.+2      	; 0x2da8 <waiting_buffer_scan_tap+0x16>
    2da6:	4f c0       	rjmp	.+158    	; 0x2e46 <waiting_buffer_scan_tap+0xb4>

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2da8:	80 91 6c 01 	lds	r24, 0x016C
    2dac:	a0 91 6d 01 	lds	r26, 0x016D
    2db0:	60 91 9e 01 	lds	r22, 0x019E
    2db4:	70 91 9f 01 	lds	r23, 0x019F
    2db8:	40 91 a1 01 	lds	r20, 0x01A1
    2dbc:	50 91 a2 01 	lds	r21, 0x01A2
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dc0:	b6 e0       	ldi	r27, 0x06	; 6
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2dc2:	8a 17       	cp	r24, r26
    2dc4:	09 f4       	brne	.+2      	; 0x2dc8 <waiting_buffer_scan_tap+0x36>
    2dc6:	3f c0       	rjmp	.+126    	; 0x2e46 <waiting_buffer_scan_tap+0xb4>
    2dc8:	90 e0       	ldi	r25, 0x00	; 0
    2dca:	41 15       	cp	r20, r1
    2dcc:	51 05       	cpc	r21, r1
    2dce:	c1 f1       	breq	.+112    	; 0x2e40 <waiting_buffer_scan_tap+0xae>
    2dd0:	7f 3f       	cpi	r23, 0xFF	; 255
    2dd2:	11 f4       	brne	.+4      	; 0x2dd8 <waiting_buffer_scan_tap+0x46>
        if (IS_TAPPING_KEY(waiting_buffer[i].event.key) &&
    2dd4:	6f 3f       	cpi	r22, 0xFF	; 255
    2dd6:	a1 f1       	breq	.+104    	; 0x2e40 <waiting_buffer_scan_tap+0xae>
    2dd8:	b8 9f       	mul	r27, r24
    2dda:	f0 01       	movw	r30, r0
    2ddc:	b9 9f       	mul	r27, r25
    2dde:	f0 0d       	add	r31, r0
    2de0:	11 24       	eor	r1, r1
    2de2:	e2 59       	subi	r30, 0x92	; 146
    2de4:	fe 4f       	sbci	r31, 0xFE	; 254
    2de6:	21 81       	ldd	r18, Z+1	; 0x01
    2de8:	72 13       	cpse	r23, r18
    2dea:	2a c0       	rjmp	.+84     	; 0x2e40 <waiting_buffer_scan_tap+0xae>
    2dec:	20 81       	ld	r18, Z
    2dee:	62 13       	cpse	r22, r18
    2df0:	27 c0       	rjmp	.+78     	; 0x2e40 <waiting_buffer_scan_tap+0xae>
    2df2:	22 81       	ldd	r18, Z+2	; 0x02
    2df4:	21 11       	cpse	r18, r1
    2df6:	24 c0       	rjmp	.+72     	; 0x2e40 <waiting_buffer_scan_tap+0xae>
                !waiting_buffer[i].event.pressed &&
                WITHIN_TAPPING_TERM(waiting_buffer[i].event)) {
    2df8:	23 81       	ldd	r18, Z+3	; 0x03
    2dfa:	34 81       	ldd	r19, Z+4	; 0x04
    2dfc:	24 17       	cp	r18, r20
    2dfe:	35 07       	cpc	r19, r21
    2e00:	10 f4       	brcc	.+4      	; 0x2e06 <waiting_buffer_scan_tap+0x74>
    2e02:	21 50       	subi	r18, 0x01	; 1
    2e04:	31 09       	sbc	r19, r1
    2e06:	24 1b       	sub	r18, r20
    2e08:	35 0b       	sbc	r19, r21
    2e0a:	28 3c       	cpi	r18, 0xC8	; 200
    2e0c:	31 05       	cpc	r19, r1
    2e0e:	c0 f4       	brcc	.+48     	; 0x2e40 <waiting_buffer_scan_tap+0xae>
            tapping_key.tap.count = 1;
    2e10:	20 91 a3 01 	lds	r18, 0x01A3
    2e14:	2f 70       	andi	r18, 0x0F	; 15
    2e16:	20 61       	ori	r18, 0x10	; 16
    2e18:	20 93 a3 01 	sts	0x01A3, r18
            waiting_buffer[i].tap.count = 1;
    2e1c:	26 e0       	ldi	r18, 0x06	; 6
    2e1e:	28 9f       	mul	r18, r24
    2e20:	f0 01       	movw	r30, r0
    2e22:	29 9f       	mul	r18, r25
    2e24:	f0 0d       	add	r31, r0
    2e26:	11 24       	eor	r1, r1
    2e28:	ed 58       	subi	r30, 0x8D	; 141
    2e2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2e2c:	80 81       	ld	r24, Z
    2e2e:	8f 70       	andi	r24, 0x0F	; 15
    2e30:	80 61       	ori	r24, 0x10	; 16
    2e32:	80 83       	st	Z, r24
            process_action(&tapping_key);
    2e34:	8e e9       	ldi	r24, 0x9E	; 158
    2e36:	91 e0       	ldi	r25, 0x01	; 1
    2e38:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>

            debug("waiting_buffer_scan_tap: found at ["); debug_dec(i); debug("]\n");
            debug_waiting_buffer();
    2e3c:	0c 94 9a 16 	jmp	0x2d34	; 0x2d34 <debug_waiting_buffer>
    // tapping already is settled
    if (tapping_key.tap.count > 0) return;
    // invalid state: tapping_key released && tap.count == 0
    if (!tapping_key.event.pressed) return;

    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2e40:	01 96       	adiw	r24, 0x01	; 1
    2e42:	87 70       	andi	r24, 0x07	; 7
    2e44:	be cf       	rjmp	.-132    	; 0x2dc2 <waiting_buffer_scan_tap+0x30>
    2e46:	08 95       	ret

00002e48 <process_tapping>:
 * Rule: Tap key is typed(pressed and released) within TAPPING_TERM.
 *       (without interfering by typing other key)
 */
/* return true when key event is processed or consumed. */
bool process_tapping(keyrecord_t *keyp)
{
    2e48:	cf 92       	push	r12
    2e4a:	df 92       	push	r13
    2e4c:	ef 92       	push	r14
    2e4e:	ff 92       	push	r15
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	62 97       	sbiw	r28, 0x12	; 18
    2e5e:	0f b6       	in	r0, 0x3f	; 63
    2e60:	f8 94       	cli
    2e62:	de bf       	out	0x3e, r29	; 62
    2e64:	0f be       	out	0x3f, r0	; 63
    2e66:	cd bf       	out	0x3d, r28	; 61
    2e68:	8c 01       	movw	r16, r24
    keyevent_t event = keyp->event;
    2e6a:	85 e0       	ldi	r24, 0x05	; 5
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	de 01       	movw	r26, r28
    2e70:	1d 96       	adiw	r26, 0x0d	; 13
    2e72:	01 90       	ld	r0, Z+
    2e74:	0d 92       	st	X+, r0
    2e76:	8a 95       	dec	r24
    2e78:	e1 f7       	brne	.-8      	; 0x2e72 <process_tapping+0x2a>
    2e7a:	d8 01       	movw	r26, r16
    2e7c:	4c 91       	ld	r20, X
    2e7e:	11 96       	adiw	r26, 0x01	; 1
    2e80:	5c 91       	ld	r21, X
    2e82:	11 97       	sbiw	r26, 0x01	; 1
    2e84:	12 96       	adiw	r26, 0x02	; 2
    2e86:	6c 91       	ld	r22, X
    2e88:	12 97       	sbiw	r26, 0x02	; 2
    2e8a:	13 96       	adiw	r26, 0x03	; 3
    2e8c:	cd 90       	ld	r12, X+
    2e8e:	dc 90       	ld	r13, X
    2e90:	14 97       	sbiw	r26, 0x04	; 4
    2e92:	30 91 9e 01 	lds	r19, 0x019E
    2e96:	70 91 9f 01 	lds	r23, 0x019F
    2e9a:	80 91 a1 01 	lds	r24, 0x01A1
    2e9e:	90 91 a2 01 	lds	r25, 0x01A2
    2ea2:	00 97       	sbiw	r24, 0x00	; 0
    2ea4:	09 f4       	brne	.+2      	; 0x2ea8 <process_tapping+0x60>
    2ea6:	6b c1       	rjmp	.+726    	; 0x317e <process_tapping+0x336>
    2ea8:	7f 3f       	cpi	r23, 0xFF	; 255
    2eaa:	19 f4       	brne	.+6      	; 0x2eb2 <process_tapping+0x6a>

    // if tapping
    if (IS_TAPPING_PRESSED()) {
    2eac:	3f 3f       	cpi	r19, 0xFF	; 255
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <process_tapping+0x6a>
    2eb0:	66 c1       	rjmp	.+716    	; 0x317e <process_tapping+0x336>
    2eb2:	e0 90 a0 01 	lds	r14, 0x01A0
    2eb6:	ee 20       	and	r14, r14
    2eb8:	09 f4       	brne	.+2      	; 0x2ebc <process_tapping+0x74>
    2eba:	c0 c0       	rjmp	.+384    	; 0x303c <process_tapping+0x1f4>
    2ebc:	20 91 a3 01 	lds	r18, 0x01A3
        if (WITHIN_TAPPING_TERM(event)) {
    2ec0:	c8 16       	cp	r12, r24
    2ec2:	d9 06       	cpc	r13, r25
    2ec4:	28 f0       	brcs	.+10     	; 0x2ed0 <process_tapping+0x88>
    2ec6:	f6 01       	movw	r30, r12
    2ec8:	e8 1b       	sub	r30, r24
    2eca:	f9 0b       	sbc	r31, r25
    2ecc:	cf 01       	movw	r24, r30
    2ece:	04 c0       	rjmp	.+8      	; 0x2ed8 <process_tapping+0x90>
    2ed0:	80 95       	com	r24
    2ed2:	90 95       	com	r25
    2ed4:	8c 0d       	add	r24, r12
    2ed6:	9d 1d       	adc	r25, r13
    2ed8:	ff 24       	eor	r15, r15
    2eda:	f3 94       	inc	r15
    2edc:	88 3c       	cpi	r24, 0xC8	; 200
    2ede:	91 05       	cpc	r25, r1
    2ee0:	78 f0       	brcs	.+30     	; 0x2f00 <process_tapping+0xb8>
    2ee2:	f1 2c       	mov	r15, r1
                }
            }
        }
        // after TAPPING_TERM
        else {
            if (tapping_key.tap.count == 0) {
    2ee4:	20 7f       	andi	r18, 0xF0	; 240
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <process_tapping+0xa2>
    2ee8:	c6 c0       	rjmp	.+396    	; 0x3076 <process_tapping+0x22e>
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
    2eea:	7c 2d       	mov	r23, r12
    2eec:	d9 8a       	std	Y+17, r13	; 0x11
    2eee:	c8 8a       	std	Y+16, r12	; 0x10
    2ef0:	89 89       	ldd	r24, Y+17	; 0x11
    2ef2:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <debug_event>
                process_action(&tapping_key);
    2ef6:	8e e9       	ldi	r24, 0x9E	; 158
    2ef8:	91 e0       	ldi	r25, 0x01	; 1
    2efa:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
    2efe:	b1 c0       	rjmp	.+354    	; 0x3062 <process_tapping+0x21a>
    keyevent_t event = keyp->event;

    // if tapping
    if (IS_TAPPING_PRESSED()) {
        if (WITHIN_TAPPING_TERM(event)) {
            if (tapping_key.tap.count == 0) {
    2f00:	82 2f       	mov	r24, r18
    2f02:	80 7f       	andi	r24, 0xF0	; 240
    2f04:	09 f0       	breq	.+2      	; 0x2f08 <process_tapping+0xc0>
    2f06:	46 c0       	rjmp	.+140    	; 0x2f94 <process_tapping+0x14c>
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f08:	75 13       	cpse	r23, r21
    2f0a:	14 c0       	rjmp	.+40     	; 0x2f34 <process_tapping+0xec>
    2f0c:	34 13       	cpse	r19, r20
    2f0e:	12 c0       	rjmp	.+36     	; 0x2f34 <process_tapping+0xec>
    2f10:	61 11       	cpse	r22, r1
    2f12:	10 c0       	rjmp	.+32     	; 0x2f34 <process_tapping+0xec>
                    // first tap!
                    debug("Tapping: First tap(0->1).\n");
                    tapping_key.tap.count = 1;
    2f14:	2f 70       	andi	r18, 0x0F	; 15
    2f16:	20 61       	ori	r18, 0x10	; 16
    2f18:	20 93 a3 01 	sts	0x01A3, r18
                    debug_tapping_key();
    2f1c:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <debug_tapping_key>
                    process_action(&tapping_key);
    2f20:	8e e9       	ldi	r24, 0x9E	; 158
    2f22:	91 e0       	ldi	r25, 0x01	; 1
    2f24:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>

                    // copy tapping state
                    keyp->tap = tapping_key.tap;
    2f28:	80 91 a3 01 	lds	r24, 0x01A3
    2f2c:	d8 01       	movw	r26, r16
    2f2e:	15 96       	adiw	r26, 0x05	; 5
    2f30:	8c 93       	st	X, r24
    2f32:	2e c0       	rjmp	.+92     	; 0x2f90 <process_tapping+0x148>
    2f34:	cd 28       	or	r12, r13
    2f36:	19 f1       	breq	.+70     	; 0x2f7e <process_tapping+0x136>
    2f38:	5f 3f       	cpi	r21, 0xFF	; 255
    2f3a:	11 f4       	brne	.+4      	; 0x2f40 <process_tapping+0xf8>
static inline bool IS_PRESSED(keyevent_t event) { return (!IS_NOEVENT(event) && event.pressed); }
static inline bool IS_RELEASED(keyevent_t event) { return (!IS_NOEVENT(event) && !event.pressed); }
    2f3c:	4f 3f       	cpi	r20, 0xFF	; 255
    2f3e:	f9 f0       	breq	.+62     	; 0x2f7e <process_tapping+0x136>
    2f40:	f6 2e       	mov	r15, r22
    2f42:	61 11       	cpse	r22, r1
    2f44:	1c c0       	rjmp	.+56     	; 0x2f7e <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f46:	80 91 6c 01 	lds	r24, 0x016C
    2f4a:	20 91 6d 01 	lds	r18, 0x016D
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f4e:	36 e0       	ldi	r19, 0x06	; 6
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f50:	82 17       	cp	r24, r18
    2f52:	09 f4       	brne	.+2      	; 0x2f56 <process_tapping+0x10e>
    2f54:	5a c0       	rjmp	.+180    	; 0x300a <process_tapping+0x1c2>
        if (KEYEQ(event.key, waiting_buffer[i].event.key) && event.pressed !=  waiting_buffer[i].event.pressed) {
    2f56:	90 e0       	ldi	r25, 0x00	; 0
    2f58:	38 9f       	mul	r19, r24
    2f5a:	f0 01       	movw	r30, r0
    2f5c:	39 9f       	mul	r19, r25
    2f5e:	f0 0d       	add	r31, r0
    2f60:	11 24       	eor	r1, r1
    2f62:	e2 59       	subi	r30, 0x92	; 146
    2f64:	fe 4f       	sbci	r31, 0xFE	; 254
    2f66:	71 81       	ldd	r23, Z+1	; 0x01
    2f68:	57 13       	cpse	r21, r23
    2f6a:	06 c0       	rjmp	.+12     	; 0x2f78 <process_tapping+0x130>
    2f6c:	70 81       	ld	r23, Z
    2f6e:	47 13       	cpse	r20, r23
    2f70:	03 c0       	rjmp	.+6      	; 0x2f78 <process_tapping+0x130>
    2f72:	72 81       	ldd	r23, Z+2	; 0x02
    2f74:	71 11       	cpse	r23, r1
    2f76:	03 c0       	rjmp	.+6      	; 0x2f7e <process_tapping+0x136>
    waiting_buffer_tail = 0;
}

bool waiting_buffer_typed(keyevent_t event)
{
    for (uint8_t i = waiting_buffer_tail; i != waiting_buffer_head; i = (i + 1) % WAITING_BUFFER_SIZE) {
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	87 70       	andi	r24, 0x07	; 7
    2f7c:	e9 cf       	rjmp	.-46     	; 0x2f50 <process_tapping+0x108>
                    process_action(keyp);
                    return true;
                }
                else {
                    // set interrupted flag when other key preesed during tapping
                    if (event.pressed) {
    2f7e:	f6 2e       	mov	r15, r22
    2f80:	66 23       	and	r22, r22
    2f82:	09 f4       	brne	.+2      	; 0x2f86 <process_tapping+0x13e>
    2f84:	18 c1       	rjmp	.+560    	; 0x31b6 <process_tapping+0x36e>
                        tapping_key.tap.interrupted = true;
    2f86:	80 91 a3 01 	lds	r24, 0x01A3
    2f8a:	81 60       	ori	r24, 0x01	; 1
    2f8c:	80 93 a3 01 	sts	0x01A3, r24
                    }
                    // enqueue 
                    return false;
    2f90:	f1 2c       	mov	r15, r1
    2f92:	11 c1       	rjmp	.+546    	; 0x31b6 <process_tapping+0x36e>
                }
            }
            // tap_count > 0
            else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    2f94:	75 13       	cpse	r23, r21
    2f96:	08 c0       	rjmp	.+16     	; 0x2fa8 <process_tapping+0x160>
    2f98:	34 13       	cpse	r19, r20
    2f9a:	06 c0       	rjmp	.+12     	; 0x2fa8 <process_tapping+0x160>
    2f9c:	61 11       	cpse	r22, r1
    2f9e:	04 c0       	rjmp	.+8      	; 0x2fa8 <process_tapping+0x160>
                    debug("Tapping: Tap release("); debug_dec(tapping_key.tap.count); debug(")\n");
                    keyp->tap = tapping_key.tap;
    2fa0:	80 91 a3 01 	lds	r24, 0x01A3
    2fa4:	d8 01       	movw	r26, r16
    2fa6:	c3 c0       	rjmp	.+390    	; 0x312e <process_tapping+0x2e6>
                    process_action(keyp);
                    tapping_key = *keyp;
                    debug_tapping_key();
                    return true;
                }
                else if (is_tap_key(event.key) && event.pressed) {
    2fa8:	4d 87       	std	Y+13, r20	; 0x0d
    2faa:	5e 87       	std	Y+14, r21	; 0x0e
    2fac:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fae:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fb0:	6a 8b       	std	Y+18, r22	; 0x12
    2fb2:	0e 94 55 16 	call	0x2caa	; 0x2caa <is_tap_key>
    2fb6:	6a 89       	ldd	r22, Y+18	; 0x12
    2fb8:	88 23       	and	r24, r24
    2fba:	e1 f1       	breq	.+120    	; 0x3034 <process_tapping+0x1ec>
    2fbc:	66 23       	and	r22, r22
    2fbe:	d1 f1       	breq	.+116    	; 0x3034 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    2fc0:	20 91 a3 01 	lds	r18, 0x01A3
    2fc4:	82 2f       	mov	r24, r18
    2fc6:	82 95       	swap	r24
    2fc8:	8f 70       	andi	r24, 0x0F	; 15
    2fca:	90 e0       	ldi	r25, 0x00	; 0
    2fcc:	02 97       	sbiw	r24, 0x02	; 2
    2fce:	74 f0       	brlt	.+28     	; 0x2fec <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    2fd0:	80 91 9e 01 	lds	r24, 0x019E
    2fd4:	90 91 9f 01 	lds	r25, 0x019F
    2fd8:	98 87       	std	Y+8, r25	; 0x08
    2fda:	8f 83       	std	Y+7, r24	; 0x07
    2fdc:	19 86       	std	Y+9, r1	; 0x09
    2fde:	db 86       	std	Y+11, r13	; 0x0b
    2fe0:	ca 86       	std	Y+10, r12	; 0x0a
    2fe2:	2c 87       	std	Y+12, r18	; 0x0c
    2fe4:	ce 01       	movw	r24, r28
    2fe6:	07 96       	adiw	r24, 0x07	; 7
    2fe8:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
                                .event.pressed = false
                        });
                    } else {
                        debug("Tapping: Start while last tap(1).\n");
                    }
                    tapping_key = *keyp;
    2fec:	86 e0       	ldi	r24, 0x06	; 6
    2fee:	f8 01       	movw	r30, r16
    2ff0:	ae e9       	ldi	r26, 0x9E	; 158
    2ff2:	b1 e0       	ldi	r27, 0x01	; 1
    2ff4:	01 90       	ld	r0, Z+
    2ff6:	0d 92       	st	X+, r0
    2ff8:	8a 95       	dec	r24
    2ffa:	e1 f7       	brne	.-8      	; 0x2ff4 <process_tapping+0x1ac>
                    waiting_buffer_scan_tap();
    2ffc:	0e 94 c9 16 	call	0x2d92	; 0x2d92 <waiting_buffer_scan_tap>
                    debug_tapping_key();
    3000:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <debug_tapping_key>
                    return true;
    3004:	ff 24       	eor	r15, r15
    3006:	f3 94       	inc	r15
    3008:	d6 c0       	rjmp	.+428    	; 0x31b6 <process_tapping+0x36e>
                 * Without this unexpected repeating will occur with having fast repeating setting
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
    300a:	4d 87       	std	Y+13, r20	; 0x0d
    300c:	5e 87       	std	Y+14, r21	; 0x0e
    300e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3010:	9e 85       	ldd	r25, Y+14	; 0x0e
    3012:	0e 94 35 1b 	call	0x366a	; 0x366a <layer_switch_get_action>
                    switch (action.kind.id) {
    3016:	29 2f       	mov	r18, r25
    3018:	22 95       	swap	r18
    301a:	2f 70       	andi	r18, 0x0F	; 15
    301c:	30 e0       	ldi	r19, 0x00	; 0
    301e:	22 30       	cpi	r18, 0x02	; 2
    3020:	31 05       	cpc	r19, r1
    3022:	0c f0       	brlt	.+2      	; 0x3026 <process_tapping+0x1de>
    3024:	bc c0       	rjmp	.+376    	; 0x319e <process_tapping+0x356>
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3026:	9f 70       	andi	r25, 0x0F	; 15
    3028:	09 f0       	breq	.+2      	; 0x302c <process_tapping+0x1e4>
    302a:	b6 c0       	rjmp	.+364    	; 0x3198 <process_tapping+0x350>
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
                            if (IS_MOD(action.key.code)) return false;
    302c:	80 5e       	subi	r24, 0xE0	; 224
    302e:	88 30       	cpi	r24, 0x08	; 8
    3030:	08 f4       	brcc	.+2      	; 0x3034 <process_tapping+0x1ec>
    3032:	c1 c0       	rjmp	.+386    	; 0x31b6 <process_tapping+0x36e>
                }
                else {
                    if (!IS_NOEVENT(event)) {
                        debug("Tapping: key event while last tap(>0).\n");
                    }
                    process_action(keyp);
    3034:	c8 01       	movw	r24, r16
    3036:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
    303a:	e4 cf       	rjmp	.-56     	; 0x3004 <process_tapping+0x1bc>
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    303c:	c8 16       	cp	r12, r24
    303e:	d9 06       	cpc	r13, r25
    3040:	08 f4       	brcc	.+2      	; 0x3044 <process_tapping+0x1fc>
    3042:	53 c0       	rjmp	.+166    	; 0x30ea <process_tapping+0x2a2>
    3044:	f6 01       	movw	r30, r12
    3046:	e8 1b       	sub	r30, r24
    3048:	f9 0b       	sbc	r31, r25
    304a:	cf 01       	movw	r24, r30
    304c:	88 3c       	cpi	r24, 0xC8	; 200
    304e:	91 05       	cpc	r25, r1
    3050:	08 f4       	brcc	.+2      	; 0x3054 <process_tapping+0x20c>
    3052:	50 c0       	rjmp	.+160    	; 0x30f4 <process_tapping+0x2ac>
    3054:	f1 2c       	mov	r15, r1
            }
        } else {
            // FIX: process_aciton here?
            // timeout. no sequential tap.
            debug("Tapping: End(Timeout after releasing last tap): ");
            debug_event(event); debug("\n");
    3056:	7c 2d       	mov	r23, r12
    3058:	d9 8a       	std	Y+17, r13	; 0x11
    305a:	c8 8a       	std	Y+16, r12	; 0x10
    305c:	89 89       	ldd	r24, Y+17	; 0x11
    305e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <debug_event>
        else {
            if (tapping_key.tap.count == 0) {
                debug("Tapping: End. Timeout. Not tap(0): ");
                debug_event(event); debug("\n");
                process_action(&tapping_key);
                tapping_key = (keyrecord_t){};
    3062:	ee e9       	ldi	r30, 0x9E	; 158
    3064:	f1 e0       	ldi	r31, 0x01	; 1
    3066:	86 e0       	ldi	r24, 0x06	; 6
    3068:	df 01       	movw	r26, r30
    306a:	1d 92       	st	X+, r1
    306c:	8a 95       	dec	r24
    306e:	e9 f7       	brne	.-6      	; 0x306a <process_tapping+0x222>
                debug_tapping_key();
    3070:	0e 94 bb 16 	call	0x2d76	; 0x2d76 <debug_tapping_key>
                return false;
    3074:	a0 c0       	rjmp	.+320    	; 0x31b6 <process_tapping+0x36e>
            }  else {
                if (IS_TAPPING_KEY(event.key) && !event.pressed) {
    3076:	75 13       	cpse	r23, r21
    3078:	14 c0       	rjmp	.+40     	; 0x30a2 <process_tapping+0x25a>
    307a:	34 13       	cpse	r19, r20
    307c:	12 c0       	rjmp	.+36     	; 0x30a2 <process_tapping+0x25a>
    307e:	61 11       	cpse	r22, r1
    3080:	10 c0       	rjmp	.+32     	; 0x30a2 <process_tapping+0x25a>
                    debug("Tapping: End. last timeout tap release(>0).");
                    keyp->tap = tapping_key.tap;
    3082:	80 91 a3 01 	lds	r24, 0x01A3
    3086:	f8 01       	movw	r30, r16
    3088:	85 83       	std	Z+5, r24	; 0x05
                    process_action(keyp);
    308a:	c8 01       	movw	r24, r16
    308c:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
                    tapping_key = (keyrecord_t){};
    3090:	86 e0       	ldi	r24, 0x06	; 6
    3092:	ee e9       	ldi	r30, 0x9E	; 158
    3094:	f1 e0       	ldi	r31, 0x01	; 1
    3096:	df 01       	movw	r26, r30
    3098:	1d 92       	st	X+, r1
    309a:	8a 95       	dec	r24
    309c:	e9 f7       	brne	.-6      	; 0x3098 <process_tapping+0x250>
                    return true;
    309e:	fe 2c       	mov	r15, r14
    30a0:	8a c0       	rjmp	.+276    	; 0x31b6 <process_tapping+0x36e>
                }
                else if (is_tap_key(event.key) && event.pressed) {
    30a2:	4d 87       	std	Y+13, r20	; 0x0d
    30a4:	5e 87       	std	Y+14, r21	; 0x0e
    30a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    30a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    30aa:	6a 8b       	std	Y+18, r22	; 0x12
    30ac:	0e 94 55 16 	call	0x2caa	; 0x2caa <is_tap_key>
    30b0:	6a 89       	ldd	r22, Y+18	; 0x12
    30b2:	88 23       	and	r24, r24
    30b4:	09 f4       	brne	.+2      	; 0x30b8 <process_tapping+0x270>
    30b6:	be cf       	rjmp	.-132    	; 0x3034 <process_tapping+0x1ec>
    30b8:	66 23       	and	r22, r22
    30ba:	09 f4       	brne	.+2      	; 0x30be <process_tapping+0x276>
    30bc:	bb cf       	rjmp	.-138    	; 0x3034 <process_tapping+0x1ec>
                    if (tapping_key.tap.count > 1) {
    30be:	20 91 a3 01 	lds	r18, 0x01A3
    30c2:	82 2f       	mov	r24, r18
    30c4:	82 95       	swap	r24
    30c6:	8f 70       	andi	r24, 0x0F	; 15
    30c8:	90 e0       	ldi	r25, 0x00	; 0
    30ca:	02 97       	sbiw	r24, 0x02	; 2
    30cc:	0c f4       	brge	.+2      	; 0x30d0 <process_tapping+0x288>
    30ce:	8e cf       	rjmp	.-228    	; 0x2fec <process_tapping+0x1a4>
                        debug("Tapping: Start new tap with releasing last timeout tap(>1).\n");
                        // unregister key
                        process_action(&(keyrecord_t){
    30d0:	80 91 9e 01 	lds	r24, 0x019E
    30d4:	90 91 9f 01 	lds	r25, 0x019F
    30d8:	9a 83       	std	Y+2, r25	; 0x02
    30da:	89 83       	std	Y+1, r24	; 0x01
    30dc:	1b 82       	std	Y+3, r1	; 0x03
    30de:	dd 82       	std	Y+5, r13	; 0x05
    30e0:	cc 82       	std	Y+4, r12	; 0x04
    30e2:	2e 83       	std	Y+6, r18	; 0x06
    30e4:	ce 01       	movw	r24, r28
    30e6:	01 96       	adiw	r24, 0x01	; 1
    30e8:	7f cf       	rjmp	.-258    	; 0x2fe8 <process_tapping+0x1a0>
    30ea:	80 95       	com	r24
    30ec:	90 95       	com	r25
                    return true;
                }
            }
        }
    } else if (IS_TAPPING_RELEASED()) {
        if (WITHIN_TAPPING_TERM(event)) {
    30ee:	8c 0d       	add	r24, r12
    30f0:	9d 1d       	adc	r25, r13
    30f2:	ac cf       	rjmp	.-168    	; 0x304c <process_tapping+0x204>
            if (event.pressed) {
    30f4:	f6 2e       	mov	r15, r22
    30f6:	66 23       	and	r22, r22
    30f8:	09 f4       	brne	.+2      	; 0x30fc <process_tapping+0x2b4>
    30fa:	9c cf       	rjmp	.-200    	; 0x3034 <process_tapping+0x1ec>
                if (IS_TAPPING_KEY(event.key)) {
    30fc:	75 13       	cpse	r23, r21
    30fe:	2e c0       	rjmp	.+92     	; 0x315c <process_tapping+0x314>
    3100:	34 13       	cpse	r19, r20
    3102:	2c c0       	rjmp	.+88     	; 0x315c <process_tapping+0x314>
                    if (!tapping_key.tap.interrupted && tapping_key.tap.count > 0) {
    3104:	20 91 a3 01 	lds	r18, 0x01A3
    3108:	20 fd       	sbrc	r18, 0
    310a:	1f c0       	rjmp	.+62     	; 0x314a <process_tapping+0x302>
    310c:	82 2f       	mov	r24, r18
    310e:	82 95       	swap	r24
    3110:	8f 70       	andi	r24, 0x0F	; 15
    3112:	d9 f0       	breq	.+54     	; 0x314a <process_tapping+0x302>
                        // sequential tap.
                        keyp->tap = tapping_key.tap;
    3114:	d8 01       	movw	r26, r16
    3116:	15 96       	adiw	r26, 0x05	; 5
    3118:	2c 93       	st	X, r18
    311a:	15 97       	sbiw	r26, 0x05	; 5
                        if (keyp->tap.count < 15) keyp->tap.count += 1;
    311c:	8f 30       	cpi	r24, 0x0F	; 15
    311e:	49 f0       	breq	.+18     	; 0x3132 <process_tapping+0x2ea>
    3120:	8f 5f       	subi	r24, 0xFF	; 255
    3122:	98 2f       	mov	r25, r24
    3124:	92 95       	swap	r25
    3126:	90 7f       	andi	r25, 0xF0	; 240
    3128:	82 2f       	mov	r24, r18
    312a:	8f 70       	andi	r24, 0x0F	; 15
    312c:	89 2b       	or	r24, r25
    312e:	15 96       	adiw	r26, 0x05	; 5
    3130:	8c 93       	st	X, r24
                        debug("Tapping: Tap press("); debug_dec(keyp->tap.count); debug(")\n");
                        process_action(keyp);
    3132:	c8 01       	movw	r24, r16
    3134:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
                        tapping_key = *keyp;
    3138:	86 e0       	ldi	r24, 0x06	; 6
    313a:	f8 01       	movw	r30, r16
    313c:	ae e9       	ldi	r26, 0x9E	; 158
    313e:	b1 e0       	ldi	r27, 0x01	; 1
    3140:	01 90       	ld	r0, Z+
    3142:	0d 92       	st	X+, r0
    3144:	8a 95       	dec	r24
    3146:	e1 f7       	brne	.-8      	; 0x3140 <process_tapping+0x2f8>
    3148:	93 cf       	rjmp	.-218    	; 0x3070 <process_tapping+0x228>
                        debug_tapping_key();
                        return true;
                    } else {
                        // FIX: start new tap again
                        tapping_key = *keyp;
    314a:	86 e0       	ldi	r24, 0x06	; 6
    314c:	f8 01       	movw	r30, r16
    314e:	ae e9       	ldi	r26, 0x9E	; 158
    3150:	b1 e0       	ldi	r27, 0x01	; 1
    3152:	01 90       	ld	r0, Z+
    3154:	0d 92       	st	X+, r0
    3156:	8a 95       	dec	r24
    3158:	e1 f7       	brne	.-8      	; 0x3152 <process_tapping+0x30a>
                        return true;
    315a:	2d c0       	rjmp	.+90     	; 0x31b6 <process_tapping+0x36e>
                    }
                } else if (is_tap_key(event.key)) {
    315c:	4d 87       	std	Y+13, r20	; 0x0d
    315e:	5e 87       	std	Y+14, r21	; 0x0e
    3160:	8d 85       	ldd	r24, Y+13	; 0x0d
    3162:	9e 85       	ldd	r25, Y+14	; 0x0e
    3164:	0e 94 55 16 	call	0x2caa	; 0x2caa <is_tap_key>
    3168:	81 11       	cpse	r24, r1
    316a:	40 cf       	rjmp	.-384    	; 0x2fec <process_tapping+0x1a4>
                    debug_tapping_key();
                    return true;
                } else {
                    // should none in buffer
                    // FIX: interrupted when other key is pressed
                    tapping_key.tap.interrupted = true;
    316c:	80 91 a3 01 	lds	r24, 0x01A3
    3170:	81 60       	ori	r24, 0x01	; 1
    3172:	80 93 a3 01 	sts	0x01A3, r24
                    process_action(keyp);
    3176:	c8 01       	movw	r24, r16
    3178:	0e 94 37 13 	call	0x266e	; 0x266e <process_action>
                    return true;
    317c:	1c c0       	rjmp	.+56     	; 0x31b6 <process_tapping+0x36e>
            return false;
        }
    }
    // not tapping state
    else {
        if (event.pressed && is_tap_key(event.key)) {
    317e:	66 23       	and	r22, r22
    3180:	09 f4       	brne	.+2      	; 0x3184 <process_tapping+0x33c>
    3182:	58 cf       	rjmp	.-336    	; 0x3034 <process_tapping+0x1ec>
    3184:	4d 87       	std	Y+13, r20	; 0x0d
    3186:	5e 87       	std	Y+14, r21	; 0x0e
    3188:	8d 85       	ldd	r24, Y+13	; 0x0d
    318a:	9e 85       	ldd	r25, Y+14	; 0x0e
    318c:	0e 94 55 16 	call	0x2caa	; 0x2caa <is_tap_key>
    3190:	88 23       	and	r24, r24
    3192:	09 f4       	brne	.+2      	; 0x3196 <process_tapping+0x34e>
    3194:	4f cf       	rjmp	.-354    	; 0x3034 <process_tapping+0x1ec>
    3196:	2a cf       	rjmp	.-428    	; 0x2fec <process_tapping+0x1a4>
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
                        case ACT_LMODS:
                        case ACT_RMODS:
                            if (action.key.mods && !action.key.code) return false;
    3198:	81 11       	cpse	r24, r1
    319a:	48 cf       	rjmp	.-368    	; 0x302c <process_tapping+0x1e4>
    319c:	0c c0       	rjmp	.+24     	; 0x31b6 <process_tapping+0x36e>
                 * https://github.com/tmk/tmk_keyboard/issues/60
                 */
                else if (IS_RELEASED(event) && !waiting_buffer_typed(event)) {
                    // Modifier should be retained till end of this tapping.
                    action_t action = layer_switch_get_action(event.key);
                    switch (action.kind.id) {
    319e:	24 30       	cpi	r18, 0x04	; 4
    31a0:	31 05       	cpc	r19, r1
    31a2:	0c f0       	brlt	.+2      	; 0x31a6 <process_tapping+0x35e>
    31a4:	47 cf       	rjmp	.-370    	; 0x3034 <process_tapping+0x1ec>
                            if (action.key.mods && !action.key.code) return false;
                            if (IS_MOD(action.key.code)) return false;
                            break;
                        case ACT_LMODS_TAP:
                        case ACT_RMODS_TAP:
                            if (action.key.mods && keyp->tap.count == 0) return false;
    31a6:	9f 70       	andi	r25, 0x0F	; 15
    31a8:	09 f4       	brne	.+2      	; 0x31ac <process_tapping+0x364>
    31aa:	40 cf       	rjmp	.-384    	; 0x302c <process_tapping+0x1e4>
    31ac:	f8 01       	movw	r30, r16
    31ae:	95 81       	ldd	r25, Z+5	; 0x05
    31b0:	90 7f       	andi	r25, 0xF0	; 240
    31b2:	09 f0       	breq	.+2      	; 0x31b6 <process_tapping+0x36e>
    31b4:	3b cf       	rjmp	.-394    	; 0x302c <process_tapping+0x1e4>
        } else {
            process_action(keyp);
            return true;
        }
    }
}
    31b6:	8f 2d       	mov	r24, r15
    31b8:	62 96       	adiw	r28, 0x12	; 18
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	df 90       	pop	r13
    31d2:	cf 90       	pop	r12
    31d4:	08 95       	ret

000031d6 <action_tapping_process>:
static void debug_tapping_key(void);
static void debug_waiting_buffer(void);


void action_tapping_process(keyrecord_t record)
{
    31d6:	1f 93       	push	r17
    31d8:	cf 93       	push	r28
    31da:	df 93       	push	r29
    31dc:	cd b7       	in	r28, 0x3d	; 61
    31de:	de b7       	in	r29, 0x3e	; 62
    31e0:	2c 97       	sbiw	r28, 0x0c	; 12
    31e2:	0f b6       	in	r0, 0x3f	; 63
    31e4:	f8 94       	cli
    31e6:	de bf       	out	0x3e, r29	; 62
    31e8:	0f be       	out	0x3f, r0	; 63
    31ea:	cd bf       	out	0x3d, r28	; 61
    31ec:	4f 83       	std	Y+7, r20	; 0x07
    31ee:	58 87       	std	Y+8, r21	; 0x08
    31f0:	69 87       	std	Y+9, r22	; 0x09
    31f2:	7a 87       	std	Y+10, r23	; 0x0a
    31f4:	8b 87       	std	Y+11, r24	; 0x0b
    31f6:	9c 87       	std	Y+12, r25	; 0x0c
    if (process_tapping(&record)) {
    31f8:	ce 01       	movw	r24, r28
    31fa:	07 96       	adiw	r24, 0x07	; 7
    31fc:	0e 94 24 17 	call	0x2e48	; 0x2e48 <process_tapping>
    3200:	88 23       	and	r24, r24
    3202:	69 f0       	breq	.+26     	; 0x321e <action_tapping_process+0x48>
    3204:	8f 81       	ldd	r24, Y+7	; 0x07
    3206:	98 85       	ldd	r25, Y+8	; 0x08

/* Rules for No Event:
 * 1) (time == 0) to handle (keyevent_t){} as empty event
 * 2) Matrix(255, 255) to make TICK event available
 */
static inline bool IS_NOEVENT(keyevent_t event) { return event.time == 0 || (event.key.row == 255 && event.key.col == 255); }
    3208:	2a 85       	ldd	r18, Y+10	; 0x0a
    320a:	3b 85       	ldd	r19, Y+11	; 0x0b
    320c:	23 2b       	or	r18, r19
    320e:	f1 f1       	breq	.+124    	; 0x328c <action_tapping_process+0xb6>
    3210:	9f 3f       	cpi	r25, 0xFF	; 255
    3212:	09 f0       	breq	.+2      	; 0x3216 <action_tapping_process+0x40>
    3214:	63 c0       	rjmp	.+198    	; 0x32dc <action_tapping_process+0x106>
    3216:	8f 3f       	cpi	r24, 0xFF	; 255
    3218:	09 f0       	breq	.+2      	; 0x321c <action_tapping_process+0x46>
    321a:	60 c0       	rjmp	.+192    	; 0x32dc <action_tapping_process+0x106>
    321c:	37 c0       	rjmp	.+110    	; 0x328c <action_tapping_process+0xb6>
    321e:	86 e0       	ldi	r24, 0x06	; 6
    3220:	fe 01       	movw	r30, r28
    3222:	37 96       	adiw	r30, 0x07	; 7
    3224:	de 01       	movw	r26, r28
    3226:	11 96       	adiw	r26, 0x01	; 1
    3228:	01 90       	ld	r0, Z+
    322a:	0d 92       	st	X+, r0
    322c:	8a 95       	dec	r24
    322e:	e1 f7       	brne	.-8      	; 0x3228 <action_tapping_process+0x52>
    3230:	6f 81       	ldd	r22, Y+7	; 0x07
    3232:	78 85       	ldd	r23, Y+8	; 0x08
    3234:	ea 85       	ldd	r30, Y+10	; 0x0a
    3236:	fb 85       	ldd	r31, Y+11	; 0x0b
    3238:	30 97       	sbiw	r30, 0x00	; 0
    323a:	41 f1       	breq	.+80     	; 0x328c <action_tapping_process+0xb6>
    323c:	7f 3f       	cpi	r23, 0xFF	; 255
    323e:	11 f4       	brne	.+4      	; 0x3244 <action_tapping_process+0x6e>
    3240:	6f 3f       	cpi	r22, 0xFF	; 255
    3242:	21 f1       	breq	.+72     	; 0x328c <action_tapping_process+0xb6>
{
    if (IS_NOEVENT(record.event)) {
        return true;
    }

    if ((waiting_buffer_head + 1) % WAITING_BUFFER_SIZE == waiting_buffer_tail) {
    3244:	20 91 6d 01 	lds	r18, 0x016D
    3248:	30 e0       	ldi	r19, 0x00	; 0
    324a:	c9 01       	movw	r24, r18
    324c:	01 96       	adiw	r24, 0x01	; 1
    324e:	87 70       	andi	r24, 0x07	; 7
    3250:	99 27       	eor	r25, r25
    3252:	40 91 6c 01 	lds	r20, 0x016C
    3256:	50 e0       	ldi	r21, 0x00	; 0
    3258:	84 17       	cp	r24, r20
    325a:	95 07       	cpc	r25, r21
    325c:	09 f4       	brne	.+2      	; 0x3260 <action_tapping_process+0x8a>
    325e:	47 c0       	rjmp	.+142    	; 0x32ee <action_tapping_process+0x118>
        debug("waiting_buffer_enq: Over flow.\n");
        return false;
    }

    waiting_buffer[waiting_buffer_head] = record;
    3260:	69 83       	std	Y+1, r22	; 0x01
    3262:	7a 83       	std	Y+2, r23	; 0x02
    3264:	fd 83       	std	Y+5, r31	; 0x05
    3266:	ec 83       	std	Y+4, r30	; 0x04
    3268:	96 e0       	ldi	r25, 0x06	; 6
    326a:	92 9f       	mul	r25, r18
    326c:	d0 01       	movw	r26, r0
    326e:	93 9f       	mul	r25, r19
    3270:	b0 0d       	add	r27, r0
    3272:	11 24       	eor	r1, r1
    3274:	a2 59       	subi	r26, 0x92	; 146
    3276:	be 4f       	sbci	r27, 0xFE	; 254
    3278:	fe 01       	movw	r30, r28
    327a:	31 96       	adiw	r30, 0x01	; 1
    327c:	01 90       	ld	r0, Z+
    327e:	0d 92       	st	X+, r0
    3280:	9a 95       	dec	r25
    3282:	e1 f7       	brne	.-8      	; 0x327c <action_tapping_process+0xa6>
    waiting_buffer_head = (waiting_buffer_head + 1) % WAITING_BUFFER_SIZE;
    3284:	80 93 6d 01 	sts	0x016D, r24

    debug("waiting_buffer_enq: "); debug_waiting_buffer();
    3288:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <debug_waiting_buffer>
    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    328c:	16 e0       	ldi	r17, 0x06	; 6

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    328e:	80 91 6c 01 	lds	r24, 0x016C
    3292:	90 91 6d 01 	lds	r25, 0x016D
    3296:	89 17       	cp	r24, r25
    3298:	c1 f1       	breq	.+112    	; 0x330a <action_tapping_process+0x134>
        if (process_tapping(&waiting_buffer[waiting_buffer_tail])) {
    329a:	18 9f       	mul	r17, r24
    329c:	c0 01       	movw	r24, r0
    329e:	11 24       	eor	r1, r1
    32a0:	82 59       	subi	r24, 0x92	; 146
    32a2:	9e 4f       	sbci	r25, 0xFE	; 254
    32a4:	0e 94 24 17 	call	0x2e48	; 0x2e48 <process_tapping>
    32a8:	88 23       	and	r24, r24
    32aa:	79 f1       	breq	.+94     	; 0x330a <action_tapping_process+0x134>
            debug("processed: waiting_buffer["); debug_dec(waiting_buffer_tail); debug("] = ");
            debug_record(waiting_buffer[waiting_buffer_tail]); debug("\n\n");
    32ac:	e0 91 6c 01 	lds	r30, 0x016C
    32b0:	1e 9f       	mul	r17, r30
    32b2:	f0 01       	movw	r30, r0
    32b4:	11 24       	eor	r1, r1
    32b6:	e2 59       	subi	r30, 0x92	; 146
    32b8:	fe 4f       	sbci	r31, 0xFE	; 254
    32ba:	40 81       	ld	r20, Z
    32bc:	51 81       	ldd	r21, Z+1	; 0x01
    32be:	62 81       	ldd	r22, Z+2	; 0x02
    32c0:	73 81       	ldd	r23, Z+3	; 0x03
    32c2:	84 81       	ldd	r24, Z+4	; 0x04
    32c4:	95 81       	ldd	r25, Z+5	; 0x05
    32c6:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <debug_record>

    // process waiting_buffer
    if (!IS_NOEVENT(record.event) && waiting_buffer_head != waiting_buffer_tail) {
        debug("---- action_exec: process waiting_buffer -----\n");
    }
    for (; waiting_buffer_tail != waiting_buffer_head; waiting_buffer_tail = (waiting_buffer_tail + 1) % WAITING_BUFFER_SIZE) {
    32ca:	80 91 6c 01 	lds	r24, 0x016C
    32ce:	90 e0       	ldi	r25, 0x00	; 0
    32d0:	01 96       	adiw	r24, 0x01	; 1
    32d2:	87 70       	andi	r24, 0x07	; 7
    32d4:	99 27       	eor	r25, r25
    32d6:	80 93 6c 01 	sts	0x016C, r24
    32da:	d9 cf       	rjmp	.-78     	; 0x328e <action_tapping_process+0xb8>

void action_tapping_process(keyrecord_t record)
{
    if (process_tapping(&record)) {
        if (!IS_NOEVENT(record.event)) {
            debug("processed: "); debug_record(record); debug("\n");
    32dc:	4f 81       	ldd	r20, Y+7	; 0x07
    32de:	58 85       	ldd	r21, Y+8	; 0x08
    32e0:	69 85       	ldd	r22, Y+9	; 0x09
    32e2:	7a 85       	ldd	r23, Y+10	; 0x0a
    32e4:	8b 85       	ldd	r24, Y+11	; 0x0b
    32e6:	9c 85       	ldd	r25, Y+12	; 0x0c
    32e8:	0e 94 8a 16 	call	0x2d14	; 0x2d14 <debug_record>
    32ec:	cf cf       	rjmp	.-98     	; 0x328c <action_tapping_process+0xb6>
        }
    } else {
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
    32ee:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <clear_keyboard>
    return true;
}

void waiting_buffer_clear(void)
{
    waiting_buffer_head = 0;
    32f2:	10 92 6d 01 	sts	0x016D, r1
    waiting_buffer_tail = 0;
    32f6:	10 92 6c 01 	sts	0x016C, r1
        if (!waiting_buffer_enq(record)) {
            // clear all in case of overflow.
            debug("OVERFLOW: CLEAR ALL STATES\n");
            clear_keyboard();
            waiting_buffer_clear();
            tapping_key = (keyrecord_t){};
    32fa:	ee e9       	ldi	r30, 0x9E	; 158
    32fc:	f1 e0       	ldi	r31, 0x01	; 1
    32fe:	86 e0       	ldi	r24, 0x06	; 6
    3300:	df 01       	movw	r26, r30
    3302:	1d 92       	st	X+, r1
    3304:	8a 95       	dec	r24
    3306:	e9 f7       	brne	.-6      	; 0x3302 <action_tapping_process+0x12c>
    3308:	c1 cf       	rjmp	.-126    	; 0x328c <action_tapping_process+0xb6>
        }
    }
    if (!IS_NOEVENT(record.event)) {
        debug("\n");
    }
}
    330a:	2c 96       	adiw	r28, 0x0c	; 12
    330c:	0f b6       	in	r0, 0x3f	; 63
    330e:	f8 94       	cli
    3310:	de bf       	out	0x3e, r29	; 62
    3312:	0f be       	out	0x3f, r0	; 63
    3314:	cd bf       	out	0x3d, r28	; 61
    3316:	df 91       	pop	r29
    3318:	cf 91       	pop	r28
    331a:	1f 91       	pop	r17
    331c:	08 95       	ret

0000331e <action_macro_play>:

#ifndef NO_ACTION_MACRO

#define MACRO_READ()  (macro = MACRO_GET(macro_p++))
void action_macro_play(const macro_t *macro_p)
{
    331e:	df 92       	push	r13
    3320:	ef 92       	push	r14
    3322:	ff 92       	push	r15
    3324:	0f 93       	push	r16
    3326:	1f 93       	push	r17
    3328:	cf 93       	push	r28
    332a:	df 93       	push	r29
    332c:	fc 01       	movw	r30, r24
    macro_t macro = END;
    uint8_t interval = 0;

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    332e:	89 2b       	or	r24, r25
    3330:	09 f4       	brne	.+2      	; 0x3334 <action_macro_play+0x16>
    3332:	8a c0       	rjmp	.+276    	; 0x3448 <action_macro_play+0x12a>
    3334:	e1 2c       	mov	r14, r1
    3336:	f1 2c       	mov	r15, r1
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    add_weak_mods(MOD_BIT(macro));
    3338:	dd 24       	eor	r13, r13
    333a:	d3 94       	inc	r13

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    333c:	ef 01       	movw	r28, r30
    333e:	21 96       	adiw	r28, 0x01	; 1
    3340:	84 91       	lpm	r24, Z
    3342:	85 37       	cpi	r24, 0x75	; 117
    3344:	09 f4       	brne	.+2      	; 0x3348 <action_macro_play+0x2a>
    3346:	61 c0       	rjmp	.+194    	; 0x340a <action_macro_play+0xec>
    3348:	58 f4       	brcc	.+22     	; 0x3360 <action_macro_play+0x42>
    334a:	84 37       	cpi	r24, 0x74	; 116
    334c:	08 f0       	brcs	.+2      	; 0x3350 <action_macro_play+0x32>
    334e:	4e c0       	rjmp	.+156    	; 0x33ec <action_macro_play+0xce>
    3350:	84 30       	cpi	r24, 0x04	; 4
    3352:	08 f0       	brcs	.+2      	; 0x3356 <action_macro_play+0x38>
    3354:	6a c0       	rjmp	.+212    	; 0x342a <action_macro_play+0x10c>
    3356:	81 30       	cpi	r24, 0x01	; 1
    3358:	d1 f0       	breq	.+52     	; 0x338e <action_macro_play+0x70>
    335a:	82 30       	cpi	r24, 0x02	; 2
    335c:	71 f1       	breq	.+92     	; 0x33ba <action_macro_play+0x9c>
    335e:	74 c0       	rjmp	.+232    	; 0x3448 <action_macro_play+0x12a>
    3360:	88 37       	cpi	r24, 0x78	; 120
    3362:	09 f4       	brne	.+2      	; 0x3366 <action_macro_play+0x48>
    3364:	5d c0       	rjmp	.+186    	; 0x3420 <action_macro_play+0x102>
    3366:	50 f4       	brcc	.+20     	; 0x337c <action_macro_play+0x5e>
    3368:	86 37       	cpi	r24, 0x76	; 118
    336a:	09 f4       	brne	.+2      	; 0x336e <action_macro_play+0x50>
    336c:	55 c0       	rjmp	.+170    	; 0x3418 <action_macro_play+0xfa>
    336e:	87 37       	cpi	r24, 0x77	; 119
    3370:	09 f0       	breq	.+2      	; 0x3374 <action_macro_play+0x56>
    3372:	6a c0       	rjmp	.+212    	; 0x3448 <action_macro_play+0x12a>
                break;
            case MOD_STORE:
                mod_storage = get_mods();
                break;
            case MOD_RESTORE:
                set_mods(mod_storage);
    3374:	8e 2d       	mov	r24, r14
    3376:	0e 94 c2 1b 	call	0x3784	; 0x3784 <set_mods>
    337a:	54 c0       	rjmp	.+168    	; 0x3424 <action_macro_play+0x106>

    uint8_t mod_storage = 0;

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
    337c:	9c e7       	ldi	r25, 0x7C	; 124
    337e:	98 0f       	add	r25, r24
    3380:	90 37       	cpi	r25, 0x70	; 112
    3382:	08 f0       	brcs	.+2      	; 0x3386 <action_macro_play+0x68>
    3384:	61 c0       	rjmp	.+194    	; 0x3448 <action_macro_play+0x12a>
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
                break;
            case 0x84 ... 0xF3:
                dprintf("UP(%02X)\n", macro);
                unregister_code(macro&0x7F);
    3386:	8f 77       	andi	r24, 0x7F	; 127
    3388:	0e 94 da 12 	call	0x25b4	; 0x25b4 <unregister_code>
                break;
    338c:	50 c0       	rjmp	.+160    	; 0x342e <action_macro_play+0x110>

    if (!macro_p) return;
    while (true) {
        switch (MACRO_READ()) {
            case KEY_DOWN:
                MACRO_READ();
    338e:	8f 01       	movw	r16, r30
    3390:	0e 5f       	subi	r16, 0xFE	; 254
    3392:	1f 4f       	sbci	r17, 0xFF	; 255
    3394:	fe 01       	movw	r30, r28
    3396:	84 91       	lpm	r24, Z
                dprintf("KEY_DOWN(%02X)\n", macro);
                if (IS_MOD(macro)) {
    3398:	90 e2       	ldi	r25, 0x20	; 32
    339a:	98 0f       	add	r25, r24
    339c:	98 30       	cpi	r25, 0x08	; 8
    339e:	50 f4       	brcc	.+20     	; 0x33b4 <action_macro_play+0x96>
                    add_weak_mods(MOD_BIT(macro));
    33a0:	87 70       	andi	r24, 0x07	; 7
    33a2:	fd 2d       	mov	r31, r13
    33a4:	01 c0       	rjmp	.+2      	; 0x33a8 <action_macro_play+0x8a>
    33a6:	ff 0f       	add	r31, r31
    33a8:	8a 95       	dec	r24
    33aa:	ea f7       	brpl	.-6      	; 0x33a6 <action_macro_play+0x88>
    33ac:	8f 2f       	mov	r24, r31
    33ae:	0e 94 c8 1b 	call	0x3790	; 0x3790 <add_weak_mods>
    33b2:	14 c0       	rjmp	.+40     	; 0x33dc <action_macro_play+0xbe>
                    send_keyboard_report();
                } else {
                    register_code(macro);
    33b4:	0e 94 07 12 	call	0x240e	; 0x240e <register_code>
    33b8:	13 c0       	rjmp	.+38     	; 0x33e0 <action_macro_play+0xc2>
                }
                break;
            case KEY_UP:
                MACRO_READ();
    33ba:	8f 01       	movw	r16, r30
    33bc:	0e 5f       	subi	r16, 0xFE	; 254
    33be:	1f 4f       	sbci	r17, 0xFF	; 255
    33c0:	fe 01       	movw	r30, r28
    33c2:	c4 91       	lpm	r28, Z
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
    33c4:	80 e2       	ldi	r24, 0x20	; 32
    33c6:	8c 0f       	add	r24, r28
    33c8:	88 30       	cpi	r24, 0x08	; 8
    33ca:	60 f4       	brcc	.+24     	; 0x33e4 <action_macro_play+0xc6>
                    del_weak_mods(MOD_BIT(macro));
    33cc:	c7 70       	andi	r28, 0x07	; 7
    33ce:	8d 2d       	mov	r24, r13
    33d0:	01 c0       	rjmp	.+2      	; 0x33d4 <action_macro_play+0xb6>
    33d2:	88 0f       	add	r24, r24
    33d4:	ca 95       	dec	r28
    33d6:	ea f7       	brpl	.-6      	; 0x33d2 <action_macro_play+0xb4>
    33d8:	0e 94 ce 1b 	call	0x379c	; 0x379c <del_weak_mods>
                    send_keyboard_report();
    33dc:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
                } else {
                    register_code(macro);
                }
                break;
            case KEY_UP:
                MACRO_READ();
    33e0:	e8 01       	movw	r28, r16
    33e2:	25 c0       	rjmp	.+74     	; 0x342e <action_macro_play+0x110>
                dprintf("KEY_UP(%02X)\n", macro);
                if (IS_MOD(macro)) {
                    del_weak_mods(MOD_BIT(macro));
                    send_keyboard_report();
                } else {
                    unregister_code(macro);
    33e4:	8c 2f       	mov	r24, r28
    33e6:	0e 94 da 12 	call	0x25b4	; 0x25b4 <unregister_code>
    33ea:	fa cf       	rjmp	.-12     	; 0x33e0 <action_macro_play+0xc2>
                }
                break;
            case WAIT:
                MACRO_READ();
    33ec:	9f 01       	movw	r18, r30
    33ee:	2e 5f       	subi	r18, 0xFE	; 254
    33f0:	3f 4f       	sbci	r19, 0xFF	; 255
    33f2:	fe 01       	movw	r30, r28
    33f4:	c4 91       	lpm	r28, Z
                dprintf("WAIT(%u)\n", macro);
                { uint8_t ms = macro; while (ms--) wait_ms(1); }
    33f6:	cc 23       	and	r28, r28
    33f8:	69 f0       	breq	.+26     	; 0x3414 <action_macro_play+0xf6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    33fa:	8f e9       	ldi	r24, 0x9F	; 159
    33fc:	9f e0       	ldi	r25, 0x0F	; 15
    33fe:	01 97       	sbiw	r24, 0x01	; 1
    3400:	f1 f7       	brne	.-4      	; 0x33fe <action_macro_play+0xe0>
    3402:	00 c0       	rjmp	.+0      	; 0x3404 <action_macro_play+0xe6>
    3404:	00 00       	nop
    3406:	c1 50       	subi	r28, 0x01	; 1
    3408:	f6 cf       	rjmp	.-20     	; 0x33f6 <action_macro_play+0xd8>
                break;
            case INTERVAL:
                interval = MACRO_READ();
    340a:	9f 01       	movw	r18, r30
    340c:	2e 5f       	subi	r18, 0xFE	; 254
    340e:	3f 4f       	sbci	r19, 0xFF	; 255
    3410:	fe 01       	movw	r30, r28
    3412:	f4 90       	lpm	r15, Z
    3414:	e9 01       	movw	r28, r18
                dprintf("INTERVAL(%u)\n", interval);
                break;
    3416:	0b c0       	rjmp	.+22     	; 0x342e <action_macro_play+0x110>
            case MOD_STORE:
                mod_storage = get_mods();
    3418:	0e 94 b2 1b 	call	0x3764	; 0x3764 <get_mods>
    341c:	e8 2e       	mov	r14, r24
                break;
    341e:	07 c0       	rjmp	.+14     	; 0x342e <action_macro_play+0x110>
            case MOD_RESTORE:
                set_mods(mod_storage);
                send_keyboard_report();
                break;
            case MOD_CLEAR:
                clear_mods();
    3420:	0e 94 c5 1b 	call	0x378a	; 0x378a <clear_mods>
                send_keyboard_report();
    3424:	0e 94 ef 1b 	call	0x37de	; 0x37de <send_keyboard_report>
                break;
    3428:	02 c0       	rjmp	.+4      	; 0x342e <action_macro_play+0x110>
            case 0x04 ... 0x73:
                dprintf("DOWN(%02X)\n", macro);
                register_code(macro);
    342a:	0e 94 07 12 	call	0x240e	; 0x240e <register_code>
            case END:
            default:
                return;
        }
        // interval
        { uint8_t ms = interval; while (ms--) wait_ms(1); }
    342e:	8f 2d       	mov	r24, r15
    3430:	88 23       	and	r24, r24
    3432:	41 f0       	breq	.+16     	; 0x3444 <action_macro_play+0x126>
    3434:	ef e9       	ldi	r30, 0x9F	; 159
    3436:	ff e0       	ldi	r31, 0x0F	; 15
    3438:	31 97       	sbiw	r30, 0x01	; 1
    343a:	f1 f7       	brne	.-4      	; 0x3438 <action_macro_play+0x11a>
    343c:	00 c0       	rjmp	.+0      	; 0x343e <action_macro_play+0x120>
    343e:	00 00       	nop
    3440:	81 50       	subi	r24, 0x01	; 1
    3442:	f6 cf       	rjmp	.-20     	; 0x3430 <action_macro_play+0x112>
    3444:	fe 01       	movw	r30, r28
    3446:	7a cf       	rjmp	.-268    	; 0x333c <action_macro_play+0x1e>
    }
}
    3448:	df 91       	pop	r29
    344a:	cf 91       	pop	r28
    344c:	1f 91       	pop	r17
    344e:	0f 91       	pop	r16
    3450:	ff 90       	pop	r15
    3452:	ef 90       	pop	r14
    3454:	df 90       	pop	r13
    3456:	08 95       	ret

00003458 <default_layer_state_set>:

static void default_layer_state_set(uint32_t state)
{
    debug("default_layer_state: ");
    default_layer_debug(); debug(" to ");
    default_layer_state = state;
    3458:	60 93 a8 01 	sts	0x01A8, r22
    345c:	70 93 a9 01 	sts	0x01A9, r23
    3460:	80 93 aa 01 	sts	0x01AA, r24
    3464:	90 93 ab 01 	sts	0x01AB, r25
    hook_default_layer_change(default_layer_state);
    3468:	0e 94 5a 1c 	call	0x38b4	; 0x38b4 <hook_default_layer_change>
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
    346c:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <clear_keyboard_but_mods>

00003470 <layer_state_set>:

static void layer_state_set(uint32_t state)
{
    dprint("layer_state: ");
    layer_debug(); dprint(" to ");
    layer_state = state;
    3470:	60 93 a4 01 	sts	0x01A4, r22
    3474:	70 93 a5 01 	sts	0x01A5, r23
    3478:	80 93 a6 01 	sts	0x01A6, r24
    347c:	90 93 a7 01 	sts	0x01A7, r25
    hook_layer_change(layer_state);
    3480:	0e 94 5b 1c 	call	0x38b6	; 0x38b6 <hook_layer_change>
    layer_debug(); dprintln();
    clear_keyboard_but_mods(); // To avoid stuck keys
    3484:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <clear_keyboard_but_mods>

00003488 <default_layer_debug>:
    default_layer_debug(); debug("\n");
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void default_layer_debug(void)
{
    3488:	08 95       	ret

0000348a <default_layer_set>:
    dprintf("%08lX(%u)", default_layer_state, biton32(default_layer_state));
}

void default_layer_set(uint32_t state)
{
    default_layer_state_set(state);
    348a:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <default_layer_state_set>

0000348e <default_layer_or>:
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    348e:	0f 93       	push	r16
    3490:	1f 93       	push	r17
    default_layer_state_set(default_layer_state | state);
    3492:	00 91 a8 01 	lds	r16, 0x01A8
    3496:	10 91 a9 01 	lds	r17, 0x01A9
    349a:	20 91 aa 01 	lds	r18, 0x01AA
    349e:	30 91 ab 01 	lds	r19, 0x01AB
    34a2:	60 2b       	or	r22, r16
    34a4:	71 2b       	or	r23, r17
    34a6:	82 2b       	or	r24, r18
    34a8:	93 2b       	or	r25, r19
}
    34aa:	1f 91       	pop	r17
    34ac:	0f 91       	pop	r16
}

#ifndef NO_ACTION_LAYER
void default_layer_or(uint32_t state)
{
    default_layer_state_set(default_layer_state | state);
    34ae:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <default_layer_state_set>

000034b2 <default_layer_and>:
}
void default_layer_and(uint32_t state)
{
    34b2:	0f 93       	push	r16
    34b4:	1f 93       	push	r17
    default_layer_state_set(default_layer_state & state);
    34b6:	00 91 a8 01 	lds	r16, 0x01A8
    34ba:	10 91 a9 01 	lds	r17, 0x01A9
    34be:	20 91 aa 01 	lds	r18, 0x01AA
    34c2:	30 91 ab 01 	lds	r19, 0x01AB
    34c6:	60 23       	and	r22, r16
    34c8:	71 23       	and	r23, r17
    34ca:	82 23       	and	r24, r18
    34cc:	93 23       	and	r25, r19
}
    34ce:	1f 91       	pop	r17
    34d0:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state | state);
}
void default_layer_and(uint32_t state)
{
    default_layer_state_set(default_layer_state & state);
    34d2:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <default_layer_state_set>

000034d6 <default_layer_xor>:
}
void default_layer_xor(uint32_t state)
{
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    default_layer_state_set(default_layer_state ^ state);
    34da:	00 91 a8 01 	lds	r16, 0x01A8
    34de:	10 91 a9 01 	lds	r17, 0x01A9
    34e2:	20 91 aa 01 	lds	r18, 0x01AA
    34e6:	30 91 ab 01 	lds	r19, 0x01AB
    34ea:	60 27       	eor	r22, r16
    34ec:	71 27       	eor	r23, r17
    34ee:	82 27       	eor	r24, r18
    34f0:	93 27       	eor	r25, r19
}
    34f2:	1f 91       	pop	r17
    34f4:	0f 91       	pop	r16
{
    default_layer_state_set(default_layer_state & state);
}
void default_layer_xor(uint32_t state)
{
    default_layer_state_set(default_layer_state ^ state);
    34f6:	0c 94 2c 1a 	jmp	0x3458	; 0x3458 <default_layer_state_set>

000034fa <layer_clear>:
    clear_keyboard_but_mods(); // To avoid stuck keys
}

void layer_clear(void)
{
    layer_state_set(0);
    34fa:	60 e0       	ldi	r22, 0x00	; 0
    34fc:	70 e0       	ldi	r23, 0x00	; 0
    34fe:	cb 01       	movw	r24, r22
    3500:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

00003504 <layer_move>:
}

void layer_move(uint8_t layer)
{
    3504:	0f 93       	push	r16
    3506:	1f 93       	push	r17
    layer_state_set(1UL<<layer);
    3508:	41 e0       	ldi	r20, 0x01	; 1
    350a:	50 e0       	ldi	r21, 0x00	; 0
    350c:	60 e0       	ldi	r22, 0x00	; 0
    350e:	70 e0       	ldi	r23, 0x00	; 0
    3510:	8a 01       	movw	r16, r20
    3512:	9b 01       	movw	r18, r22
    3514:	04 c0       	rjmp	.+8      	; 0x351e <layer_move+0x1a>
    3516:	00 0f       	add	r16, r16
    3518:	11 1f       	adc	r17, r17
    351a:	22 1f       	adc	r18, r18
    351c:	33 1f       	adc	r19, r19
    351e:	8a 95       	dec	r24
    3520:	d2 f7       	brpl	.-12     	; 0x3516 <layer_move+0x12>
    3522:	c9 01       	movw	r24, r18
    3524:	b8 01       	movw	r22, r16
}
    3526:	1f 91       	pop	r17
    3528:	0f 91       	pop	r16
    layer_state_set(0);
}

void layer_move(uint8_t layer)
{
    layer_state_set(1UL<<layer);
    352a:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

0000352e <layer_on>:
}

void layer_on(uint8_t layer)
{
    352e:	0f 93       	push	r16
    3530:	1f 93       	push	r17
    layer_state_set(layer_state | (1UL<<layer));
    3532:	41 e0       	ldi	r20, 0x01	; 1
    3534:	50 e0       	ldi	r21, 0x00	; 0
    3536:	60 e0       	ldi	r22, 0x00	; 0
    3538:	70 e0       	ldi	r23, 0x00	; 0
    353a:	04 c0       	rjmp	.+8      	; 0x3544 <layer_on+0x16>
    353c:	44 0f       	add	r20, r20
    353e:	55 1f       	adc	r21, r21
    3540:	66 1f       	adc	r22, r22
    3542:	77 1f       	adc	r23, r23
    3544:	8a 95       	dec	r24
    3546:	d2 f7       	brpl	.-12     	; 0x353c <layer_on+0xe>
    3548:	80 91 a4 01 	lds	r24, 0x01A4
    354c:	90 91 a5 01 	lds	r25, 0x01A5
    3550:	a0 91 a6 01 	lds	r26, 0x01A6
    3554:	b0 91 a7 01 	lds	r27, 0x01A7
    3558:	8a 01       	movw	r16, r20
    355a:	9b 01       	movw	r18, r22
    355c:	08 2b       	or	r16, r24
    355e:	19 2b       	or	r17, r25
    3560:	2a 2b       	or	r18, r26
    3562:	3b 2b       	or	r19, r27
    3564:	c9 01       	movw	r24, r18
    3566:	b8 01       	movw	r22, r16
}
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    layer_state_set(1UL<<layer);
}

void layer_on(uint8_t layer)
{
    layer_state_set(layer_state | (1UL<<layer));
    356c:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

00003570 <layer_off>:
}

void layer_off(uint8_t layer)
{
    3570:	0f 93       	push	r16
    3572:	1f 93       	push	r17
    layer_state_set(layer_state & ~(1UL<<layer));
    3574:	41 e0       	ldi	r20, 0x01	; 1
    3576:	50 e0       	ldi	r21, 0x00	; 0
    3578:	60 e0       	ldi	r22, 0x00	; 0
    357a:	70 e0       	ldi	r23, 0x00	; 0
    357c:	04 c0       	rjmp	.+8      	; 0x3586 <layer_off+0x16>
    357e:	44 0f       	add	r20, r20
    3580:	55 1f       	adc	r21, r21
    3582:	66 1f       	adc	r22, r22
    3584:	77 1f       	adc	r23, r23
    3586:	8a 95       	dec	r24
    3588:	d2 f7       	brpl	.-12     	; 0x357e <layer_off+0xe>
    358a:	40 95       	com	r20
    358c:	50 95       	com	r21
    358e:	60 95       	com	r22
    3590:	70 95       	com	r23
    3592:	80 91 a4 01 	lds	r24, 0x01A4
    3596:	90 91 a5 01 	lds	r25, 0x01A5
    359a:	a0 91 a6 01 	lds	r26, 0x01A6
    359e:	b0 91 a7 01 	lds	r27, 0x01A7
    35a2:	8a 01       	movw	r16, r20
    35a4:	9b 01       	movw	r18, r22
    35a6:	08 23       	and	r16, r24
    35a8:	19 23       	and	r17, r25
    35aa:	2a 23       	and	r18, r26
    35ac:	3b 23       	and	r19, r27
    35ae:	c9 01       	movw	r24, r18
    35b0:	b8 01       	movw	r22, r16
}
    35b2:	1f 91       	pop	r17
    35b4:	0f 91       	pop	r16
    layer_state_set(layer_state | (1UL<<layer));
}

void layer_off(uint8_t layer)
{
    layer_state_set(layer_state & ~(1UL<<layer));
    35b6:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

000035ba <layer_invert>:
}

void layer_invert(uint8_t layer)
{
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    layer_state_set(layer_state ^ (1UL<<layer));
    35be:	41 e0       	ldi	r20, 0x01	; 1
    35c0:	50 e0       	ldi	r21, 0x00	; 0
    35c2:	60 e0       	ldi	r22, 0x00	; 0
    35c4:	70 e0       	ldi	r23, 0x00	; 0
    35c6:	04 c0       	rjmp	.+8      	; 0x35d0 <layer_invert+0x16>
    35c8:	44 0f       	add	r20, r20
    35ca:	55 1f       	adc	r21, r21
    35cc:	66 1f       	adc	r22, r22
    35ce:	77 1f       	adc	r23, r23
    35d0:	8a 95       	dec	r24
    35d2:	d2 f7       	brpl	.-12     	; 0x35c8 <layer_invert+0xe>
    35d4:	80 91 a4 01 	lds	r24, 0x01A4
    35d8:	90 91 a5 01 	lds	r25, 0x01A5
    35dc:	a0 91 a6 01 	lds	r26, 0x01A6
    35e0:	b0 91 a7 01 	lds	r27, 0x01A7
    35e4:	8a 01       	movw	r16, r20
    35e6:	9b 01       	movw	r18, r22
    35e8:	08 27       	eor	r16, r24
    35ea:	19 27       	eor	r17, r25
    35ec:	2a 27       	eor	r18, r26
    35ee:	3b 27       	eor	r19, r27
    35f0:	c9 01       	movw	r24, r18
    35f2:	b8 01       	movw	r22, r16
}
    35f4:	1f 91       	pop	r17
    35f6:	0f 91       	pop	r16
    layer_state_set(layer_state & ~(1UL<<layer));
}

void layer_invert(uint8_t layer)
{
    layer_state_set(layer_state ^ (1UL<<layer));
    35f8:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

000035fc <layer_or>:
}

void layer_or(uint32_t state)
{
    35fc:	0f 93       	push	r16
    35fe:	1f 93       	push	r17
    layer_state_set(layer_state | state);
    3600:	00 91 a4 01 	lds	r16, 0x01A4
    3604:	10 91 a5 01 	lds	r17, 0x01A5
    3608:	20 91 a6 01 	lds	r18, 0x01A6
    360c:	30 91 a7 01 	lds	r19, 0x01A7
    3610:	60 2b       	or	r22, r16
    3612:	71 2b       	or	r23, r17
    3614:	82 2b       	or	r24, r18
    3616:	93 2b       	or	r25, r19
}
    3618:	1f 91       	pop	r17
    361a:	0f 91       	pop	r16
    layer_state_set(layer_state ^ (1UL<<layer));
}

void layer_or(uint32_t state)
{
    layer_state_set(layer_state | state);
    361c:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

00003620 <layer_and>:
}
void layer_and(uint32_t state)
{
    3620:	0f 93       	push	r16
    3622:	1f 93       	push	r17
    layer_state_set(layer_state & state);
    3624:	00 91 a4 01 	lds	r16, 0x01A4
    3628:	10 91 a5 01 	lds	r17, 0x01A5
    362c:	20 91 a6 01 	lds	r18, 0x01A6
    3630:	30 91 a7 01 	lds	r19, 0x01A7
    3634:	60 23       	and	r22, r16
    3636:	71 23       	and	r23, r17
    3638:	82 23       	and	r24, r18
    363a:	93 23       	and	r25, r19
}
    363c:	1f 91       	pop	r17
    363e:	0f 91       	pop	r16
{
    layer_state_set(layer_state | state);
}
void layer_and(uint32_t state)
{
    layer_state_set(layer_state & state);
    3640:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

00003644 <layer_xor>:
}
void layer_xor(uint32_t state)
{
    3644:	0f 93       	push	r16
    3646:	1f 93       	push	r17
    layer_state_set(layer_state ^ state);
    3648:	00 91 a4 01 	lds	r16, 0x01A4
    364c:	10 91 a5 01 	lds	r17, 0x01A5
    3650:	20 91 a6 01 	lds	r18, 0x01A6
    3654:	30 91 a7 01 	lds	r19, 0x01A7
    3658:	60 27       	eor	r22, r16
    365a:	71 27       	eor	r23, r17
    365c:	82 27       	eor	r24, r18
    365e:	93 27       	eor	r25, r19
}
    3660:	1f 91       	pop	r17
    3662:	0f 91       	pop	r16
{
    layer_state_set(layer_state & state);
}
void layer_xor(uint32_t state)
{
    layer_state_set(layer_state ^ state);
    3664:	0c 94 38 1a 	jmp	0x3470	; 0x3470 <layer_state_set>

00003668 <layer_debug>:
}

void layer_debug(void)
{
    3668:	08 95       	ret

0000366a <layer_switch_get_action>:
#endif



action_t layer_switch_get_action(keypos_t key)
{
    366a:	cf 92       	push	r12
    366c:	df 92       	push	r13
    366e:	ef 92       	push	r14
    3670:	ff 92       	push	r15
    3672:	0f 93       	push	r16
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	8c 01       	movw	r16, r24
    action_t action = { .code = ACTION_TRANSPARENT };

#ifndef NO_ACTION_LAYER
    uint32_t layers = layer_state | default_layer_state;
    367c:	c0 90 a8 01 	lds	r12, 0x01A8
    3680:	d0 90 a9 01 	lds	r13, 0x01A9
    3684:	e0 90 aa 01 	lds	r14, 0x01AA
    3688:	f0 90 ab 01 	lds	r15, 0x01AB
    368c:	40 91 a4 01 	lds	r20, 0x01A4
    3690:	50 91 a5 01 	lds	r21, 0x01A5
    3694:	60 91 a6 01 	lds	r22, 0x01A6
    3698:	70 91 a7 01 	lds	r23, 0x01A7
    369c:	c4 2a       	or	r12, r20
    369e:	d5 2a       	or	r13, r21
    36a0:	e6 2a       	or	r14, r22
    36a2:	f7 2a       	or	r15, r23
    36a4:	cf e1       	ldi	r28, 0x1F	; 31
    36a6:	d0 e0       	ldi	r29, 0x00	; 0
    /* check top layer first */
    for (int8_t i = 31; i >= 0; i--) {
        if (layers & (1UL<<i)) {
    36a8:	d7 01       	movw	r26, r14
    36aa:	c6 01       	movw	r24, r12
    36ac:	0c 2e       	mov	r0, r28
    36ae:	04 c0       	rjmp	.+8      	; 0x36b8 <layer_switch_get_action+0x4e>
    36b0:	b6 95       	lsr	r27
    36b2:	a7 95       	ror	r26
    36b4:	97 95       	ror	r25
    36b6:	87 95       	ror	r24
    36b8:	0a 94       	dec	r0
    36ba:	d2 f7       	brpl	.-12     	; 0x36b0 <layer_switch_get_action+0x46>
    36bc:	80 ff       	sbrs	r24, 0
    36be:	07 c0       	rjmp	.+14     	; 0x36ce <layer_switch_get_action+0x64>
            action = action_for_key(i, key);
    36c0:	b8 01       	movw	r22, r16
    36c2:	8c 2f       	mov	r24, r28
    36c4:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <action_for_key>
            if (action.code != ACTION_TRANSPARENT) {
    36c8:	81 30       	cpi	r24, 0x01	; 1
    36ca:	91 05       	cpc	r25, r1
    36cc:	31 f4       	brne	.+12     	; 0x36da <layer_switch_get_action+0x70>
    36ce:	21 97       	sbiw	r28, 0x01	; 1
    36d0:	58 f7       	brcc	.-42     	; 0x36a8 <layer_switch_get_action+0x3e>
                return action;
            }
        }
    }
    /* fall back to layer 0 */
    action = action_for_key(0, key);
    36d2:	b8 01       	movw	r22, r16
    36d4:	80 e0       	ldi	r24, 0x00	; 0
    36d6:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <action_for_key>
    return action;
#else
    action = action_for_key(biton32(default_layer_state), key);
    return action;
#endif
}
    36da:	df 91       	pop	r29
    36dc:	cf 91       	pop	r28
    36de:	1f 91       	pop	r17
    36e0:	0f 91       	pop	r16
    36e2:	ff 90       	pop	r15
    36e4:	ef 90       	pop	r14
    36e6:	df 90       	pop	r13
    36e8:	cf 90       	pop	r12
    36ea:	08 95       	ret

000036ec <add_key>:
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    36ec:	20 91 0c 01 	lds	r18, 0x010C
    36f0:	30 91 0d 01 	lds	r19, 0x010D
    36f4:	f9 01       	movw	r30, r18
    36f6:	32 96       	adiw	r30, 0x02	; 2
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    36f8:	9f ef       	ldi	r25, 0xFF	; 255
    // add to tail
    keyboard_report->keys[cb_tail] = code;
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    36fa:	40 e0       	ldi	r20, 0x00	; 0
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    36fc:	51 91       	ld	r21, Z+
    36fe:	58 17       	cp	r21, r24
    3700:	89 f0       	breq	.+34     	; 0x3724 <add_key+0x38>
            break;
        }
        if (empty == -1 && keyboard_report->keys[i] == 0) {
    3702:	9f 3f       	cpi	r25, 0xFF	; 255
    3704:	19 f4       	brne	.+6      	; 0x370c <add_key+0x20>
    3706:	51 11       	cpse	r21, r1
    3708:	01 c0       	rjmp	.+2      	; 0x370c <add_key+0x20>
    370a:	94 2f       	mov	r25, r20
    370c:	4f 5f       	subi	r20, 0xFF	; 255
    cb_tail = RO_INC(cb_tail);
    cb_count++;
#else
    int8_t i = 0;
    int8_t empty = -1;
    for (; i < KEYBOARD_REPORT_KEYS; i++) {
    370e:	46 30       	cpi	r20, 0x06	; 6
    3710:	a9 f7       	brne	.-22     	; 0x36fc <add_key+0x10>
        if (empty == -1 && keyboard_report->keys[i] == 0) {
            empty = i;
        }
    }
    if (i == KEYBOARD_REPORT_KEYS) {
        if (empty != -1) {
    3712:	9f 3f       	cpi	r25, 0xFF	; 255
    3714:	39 f0       	breq	.+14     	; 0x3724 <add_key+0x38>
            keyboard_report->keys[empty] = code;
    3716:	f9 01       	movw	r30, r18
    3718:	e9 0f       	add	r30, r25
    371a:	f1 1d       	adc	r31, r1
    371c:	97 fd       	sbrc	r25, 7
    371e:	fa 95       	dec	r31
    3720:	82 83       	std	Z+2, r24	; 0x02
    3722:	08 95       	ret
    3724:	08 95       	ret

00003726 <del_key>:
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
        if (keyboard_report->keys[i] == code) {
    3726:	20 91 0c 01 	lds	r18, 0x010C
    372a:	30 91 0d 01 	lds	r19, 0x010D
    372e:	f9 01       	movw	r30, r18
    3730:	32 96       	adiw	r30, 0x02	; 2
    3732:	28 5f       	subi	r18, 0xF8	; 248
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
    3736:	90 81       	ld	r25, Z
    3738:	98 13       	cpse	r25, r24
    373a:	01 c0       	rjmp	.+2      	; 0x373e <del_key+0x18>
            keyboard_report->keys[i] = 0;
    373c:	10 82       	st	Z, r1
    373e:	31 96       	adiw	r30, 0x01	; 1
            }
            i = RO_INC(i);
        } while (i != cb_tail);
    }
#else
    for (uint8_t i = 0; i < KEYBOARD_REPORT_KEYS; i++) {
    3740:	e2 17       	cp	r30, r18
    3742:	f3 07       	cpc	r31, r19
    3744:	c1 f7       	brne	.-16     	; 0x3736 <del_key+0x10>
        del_key_bit(key);
        return;
    }
#endif
    del_key_byte(key);
}
    3746:	08 95       	ret

00003748 <clear_keys>:

void clear_keys(void)
{
    3748:	81 e0       	ldi	r24, 0x01	; 1
    374a:	90 e0       	ldi	r25, 0x00	; 0
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        keyboard_report->raw[i] = 0;
    374c:	e0 91 0c 01 	lds	r30, 0x010C
    3750:	f0 91 0d 01 	lds	r31, 0x010D
    3754:	e8 0f       	add	r30, r24
    3756:	f9 1f       	adc	r31, r25
    3758:	10 82       	st	Z, r1
    375a:	01 96       	adiw	r24, 0x01	; 1
}

void clear_keys(void)
{
    // not clear mods
    for (int8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    375c:	88 30       	cpi	r24, 0x08	; 8
    375e:	91 05       	cpc	r25, r1
    3760:	a9 f7       	brne	.-22     	; 0x374c <clear_keys+0x4>
        keyboard_report->raw[i] = 0;
    }
}
    3762:	08 95       	ret

00003764 <get_mods>:


/* modifier */
uint8_t get_mods(void) { return real_mods; }
    3764:	80 91 b6 01 	lds	r24, 0x01B6
    3768:	08 95       	ret

0000376a <add_mods>:
void add_mods(uint8_t mods) { real_mods |= mods; }
    376a:	90 91 b6 01 	lds	r25, 0x01B6
    376e:	89 2b       	or	r24, r25
    3770:	80 93 b6 01 	sts	0x01B6, r24
    3774:	08 95       	ret

00003776 <del_mods>:
void del_mods(uint8_t mods) { real_mods &= ~mods; }
    3776:	80 95       	com	r24
    3778:	90 91 b6 01 	lds	r25, 0x01B6
    377c:	89 23       	and	r24, r25
    377e:	80 93 b6 01 	sts	0x01B6, r24
    3782:	08 95       	ret

00003784 <set_mods>:
void set_mods(uint8_t mods) { real_mods = mods; }
    3784:	80 93 b6 01 	sts	0x01B6, r24
    3788:	08 95       	ret

0000378a <clear_mods>:
void clear_mods(void) { real_mods = 0; }
    378a:	10 92 b6 01 	sts	0x01B6, r1
    378e:	08 95       	ret

00003790 <add_weak_mods>:

/* weak modifier */
uint8_t get_weak_mods(void) { return weak_mods; }
void add_weak_mods(uint8_t mods) { weak_mods |= mods; }
    3790:	90 91 b5 01 	lds	r25, 0x01B5
    3794:	89 2b       	or	r24, r25
    3796:	80 93 b5 01 	sts	0x01B5, r24
    379a:	08 95       	ret

0000379c <del_weak_mods>:
void del_weak_mods(uint8_t mods) { weak_mods &= ~mods; }
    379c:	80 95       	com	r24
    379e:	90 91 b5 01 	lds	r25, 0x01B5
    37a2:	89 23       	and	r24, r25
    37a4:	80 93 b5 01 	sts	0x01B5, r24
    37a8:	08 95       	ret

000037aa <clear_weak_mods>:
void set_weak_mods(uint8_t mods) { weak_mods = mods; }
void clear_weak_mods(void) { weak_mods = 0; }
    37aa:	10 92 b5 01 	sts	0x01B5, r1
    37ae:	08 95       	ret

000037b0 <set_oneshot_mods>:

/* Oneshot modifier */
#ifndef NO_ACTION_ONESHOT
void set_oneshot_mods(uint8_t mods)
{
    oneshot_mods = mods;
    37b0:	80 93 ac 01 	sts	0x01AC, r24
    37b4:	08 95       	ret

000037b6 <clear_oneshot_mods>:
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    37b6:	10 92 ac 01 	sts	0x01AC, r1
    37ba:	08 95       	ret

000037bc <has_anykey>:
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    37bc:	80 91 0c 01 	lds	r24, 0x010C
    37c0:	90 91 0d 01 	lds	r25, 0x010D
    37c4:	fc 01       	movw	r30, r24
    37c6:	31 96       	adiw	r30, 0x01	; 1
    37c8:	9c 01       	movw	r18, r24
    37ca:	28 5f       	subi	r18, 0xF8	; 248
    37cc:	3f 4f       	sbci	r19, 0xFF	; 255
/*
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    37ce:	80 e0       	ldi	r24, 0x00	; 0
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
        if (keyboard_report->raw[i])
    37d0:	91 91       	ld	r25, Z+
    37d2:	91 11       	cpse	r25, r1
            cnt++;
    37d4:	8f 5f       	subi	r24, 0xFF	; 255
 * inspect keyboard state
 */
uint8_t has_anykey(void)
{
    uint8_t cnt = 0;
    for (uint8_t i = 1; i < KEYBOARD_REPORT_SIZE; i++) {
    37d6:	e2 17       	cp	r30, r18
    37d8:	f3 07       	cpc	r31, r19
    37da:	d1 f7       	brne	.-12     	; 0x37d0 <has_anykey+0x14>
        if (keyboard_report->raw[i])
            cnt++;
    }
    return cnt;
}
    37dc:	08 95       	ret

000037de <send_keyboard_report>:
#endif
#endif


void send_keyboard_report(void) {
    keyboard_report->mods  = real_mods;
    37de:	e0 91 0c 01 	lds	r30, 0x010C
    37e2:	f0 91 0d 01 	lds	r31, 0x010D
    37e6:	80 91 b6 01 	lds	r24, 0x01B6
    37ea:	80 83       	st	Z, r24
    keyboard_report->mods |= weak_mods;
    37ec:	e0 91 0c 01 	lds	r30, 0x010C
    37f0:	f0 91 0d 01 	lds	r31, 0x010D
    37f4:	90 81       	ld	r25, Z
    37f6:	80 91 b5 01 	lds	r24, 0x01B5
    37fa:	89 2b       	or	r24, r25
    37fc:	80 83       	st	Z, r24
#ifndef NO_ACTION_ONESHOT
    if (oneshot_mods) {
    37fe:	80 91 ac 01 	lds	r24, 0x01AC
    3802:	88 23       	and	r24, r24
    3804:	61 f0       	breq	.+24     	; 0x381e <send_keyboard_report+0x40>
        if (TIMER_DIFF_16(timer_read(), oneshot_time) >= ONESHOT_TIMEOUT) {
            dprintf("Oneshot: timeout\n");
            clear_oneshot_mods();
        }
#endif
        keyboard_report->mods |= oneshot_mods;
    3806:	e0 91 0c 01 	lds	r30, 0x010C
    380a:	f0 91 0d 01 	lds	r31, 0x010D
    380e:	90 81       	ld	r25, Z
    3810:	89 2b       	or	r24, r25
    3812:	80 83       	st	Z, r24
        if (has_anykey()) {
    3814:	0e 94 de 1b 	call	0x37bc	; 0x37bc <has_anykey>
    3818:	81 11       	cpse	r24, r1
    oneshot_time = timer_read();
#endif
}
void clear_oneshot_mods(void)
{
    oneshot_mods = 0;
    381a:	10 92 ac 01 	sts	0x01AC, r1
        if (has_anykey()) {
            clear_oneshot_mods();
        }
    }
#endif
    host_keyboard_send(keyboard_report);
    381e:	80 91 0c 01 	lds	r24, 0x010C
    3822:	90 91 0d 01 	lds	r25, 0x010D
    3826:	0c 94 6b 10 	jmp	0x20d6	; 0x20d6 <host_keyboard_send>

0000382a <print_set_sendchar>:
#define sendchar(c)    xputc(c)


void print_set_sendchar(int8_t (*sendchar_func)(uint8_t))
{
    xdev_out(sendchar_func);
    382a:	90 93 33 01 	sts	0x0133, r25
    382e:	80 93 32 01 	sts	0x0132, r24
    3832:	08 95       	ret

00003834 <bitrev>:



uint8_t bitrev(uint8_t bits)
{
    bits = (bits & 0x0f)<<4 | (bits & 0xf0)>>4;
    3834:	82 95       	swap	r24
    bits = (bits & 0b00110011)<<2 | (bits & 0b11001100)>>2;
    3836:	98 2f       	mov	r25, r24
    3838:	9c 7c       	andi	r25, 0xCC	; 204
    383a:	39 2f       	mov	r19, r25
    383c:	36 95       	lsr	r19
    383e:	36 95       	lsr	r19
    3840:	28 2f       	mov	r18, r24
    3842:	23 73       	andi	r18, 0x33	; 51
    3844:	44 e0       	ldi	r20, 0x04	; 4
    3846:	24 9f       	mul	r18, r20
    3848:	c0 01       	movw	r24, r0
    384a:	11 24       	eor	r1, r1
    384c:	93 2f       	mov	r25, r19
    384e:	98 2b       	or	r25, r24
    bits = (bits & 0b01010101)<<1 | (bits & 0b10101010)>>1;
    3850:	29 2f       	mov	r18, r25
    3852:	2a 7a       	andi	r18, 0xAA	; 170
    3854:	26 95       	lsr	r18
    3856:	89 2f       	mov	r24, r25
    3858:	85 75       	andi	r24, 0x55	; 85
    385a:	88 0f       	add	r24, r24
    return bits;
}
    385c:	82 2b       	or	r24, r18
    385e:	08 95       	ret

00003860 <bitrev16>:

uint16_t bitrev16(uint16_t bits)
{
    3860:	1f 93       	push	r17
    3862:	cf 93       	push	r28
    3864:	df 93       	push	r29
    3866:	1f 92       	push	r1
    3868:	cd b7       	in	r28, 0x3d	; 61
    386a:	de b7       	in	r29, 0x3e	; 62
    bits = bitrev(bits & 0x00ff)<<8 | bitrev((bits & 0xff00)>>8);
    386c:	99 83       	std	Y+1, r25	; 0x01
    386e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <bitrev>
    3872:	18 2f       	mov	r17, r24
    3874:	99 81       	ldd	r25, Y+1	; 0x01
    3876:	89 2f       	mov	r24, r25
    3878:	0e 94 1a 1c 	call	0x3834	; 0x3834 <bitrev>
    387c:	21 2f       	mov	r18, r17
    387e:	30 e0       	ldi	r19, 0x00	; 0
    3880:	32 2f       	mov	r19, r18
    3882:	22 27       	eor	r18, r18
    return bits;
}
    3884:	a9 01       	movw	r20, r18
    3886:	48 2b       	or	r20, r24
    3888:	ca 01       	movw	r24, r20
    388a:	0f 90       	pop	r0
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	08 95       	ret

00003894 <hook_keyboard_loop>:
/* -------------------------------------------------
 * Definitions of default hooks
 * ------------------------------------------------- */

__attribute__((weak))
void hook_keyboard_loop(void) {}
    3894:	08 95       	ret

00003896 <hook_matrix_change>:

__attribute__((weak))
void hook_matrix_change(keyevent_t event) {
    3896:	cf 93       	push	r28
    3898:	df 93       	push	r29
    389a:	00 d0       	rcall	.+0      	; 0x389c <hook_matrix_change+0x6>
    389c:	00 d0       	rcall	.+0      	; 0x389e <hook_matrix_change+0x8>
    389e:	1f 92       	push	r1
    38a0:	cd b7       	in	r28, 0x3d	; 61
    38a2:	de b7       	in	r29, 0x3e	; 62
    (void)event;
}
    38a4:	0f 90       	pop	r0
    38a6:	0f 90       	pop	r0
    38a8:	0f 90       	pop	r0
    38aa:	0f 90       	pop	r0
    38ac:	0f 90       	pop	r0
    38ae:	df 91       	pop	r29
    38b0:	cf 91       	pop	r28
    38b2:	08 95       	ret

000038b4 <hook_default_layer_change>:

__attribute__((weak))
void hook_default_layer_change(uint32_t default_layer_state) {
    38b4:	08 95       	ret

000038b6 <hook_layer_change>:
    (void)default_layer_state;
}

__attribute__((weak))
void hook_layer_change(uint32_t layer_state) {
    38b6:	08 95       	ret

000038b8 <hook_keyboard_leds_change>:
    (void)layer_state;
}

__attribute__((weak))
void hook_keyboard_leds_change(uint8_t led_status) {
    keyboard_set_leds(led_status);
    38b8:	0c 94 c5 11 	jmp	0x238a	; 0x238a <keyboard_set_leds>

000038bc <hook_bootmagic>:
}

__attribute__((weak))
void hook_bootmagic(void) {}
    38bc:	08 95       	ret

000038be <suspend_power_down>:
 */
static uint8_t wdt_timeout = 0;
static void power_down(uint8_t wdto)
{
#ifdef PROTOCOL_LUFA
    if (USB_DeviceState == DEVICE_STATE_Configured) return;
    38be:	80 91 cc 01 	lds	r24, 0x01CC
    38c2:	84 30       	cpi	r24, 0x04	; 4
    38c4:	21 f1       	breq	.+72     	; 0x390e <suspend_power_down+0x50>
#endif
    wdt_timeout = wdto;
    38c6:	10 92 b8 01 	sts	0x01B8, r1

    // Watchdog Interrupt Mode
    wdt_intr_enable(wdto);
    38ca:	20 e4       	ldi	r18, 0x40	; 64
    38cc:	88 e1       	ldi	r24, 0x18	; 24
    38ce:	90 e0       	ldi	r25, 0x00	; 0
    38d0:	0f b6       	in	r0, 0x3f	; 63
    38d2:	f8 94       	cli
    38d4:	a8 95       	wdr
    38d6:	80 93 60 00 	sts	0x0060, r24
    38da:	0f be       	out	0x3f, r0	; 63
    38dc:	20 93 60 00 	sts	0x0060, r18
    // See PicoPower application note
    // - I/O port input with pullup
    // - prescale clock
    // - BOD disable
    // - Power Reduction Register PRR
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
    38e0:	83 b7       	in	r24, 0x33	; 51
    38e2:	81 7f       	andi	r24, 0xF1	; 241
    38e4:	84 60       	ori	r24, 0x04	; 4
    38e6:	83 bf       	out	0x33, r24	; 51
    sleep_enable();
    38e8:	83 b7       	in	r24, 0x33	; 51
    38ea:	81 60       	ori	r24, 0x01	; 1
    38ec:	83 bf       	out	0x33, r24	; 51
    sei();
    38ee:	78 94       	sei
    sleep_cpu();
    38f0:	88 95       	sleep
    sleep_disable();
    38f2:	83 b7       	in	r24, 0x33	; 51
    38f4:	8e 7f       	andi	r24, 0xFE	; 254
    38f6:	83 bf       	out	0x33, r24	; 51
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	a8 95       	wdr
    38fe:	80 91 60 00 	lds	r24, 0x0060
    3902:	88 61       	ori	r24, 0x18	; 24
    3904:	80 93 60 00 	sts	0x0060, r24
    3908:	10 92 60 00 	sts	0x0060, r1
    390c:	0f be       	out	0x3f, r0	; 63
    390e:	08 95       	ret

00003910 <matrix_power_up>:
void suspend_power_down(void)
{
    power_down(WDTO_15MS);
}

__attribute__ ((weak)) void matrix_power_up(void) {}
    3910:	08 95       	ret

00003912 <matrix_power_down>:
__attribute__ ((weak)) void matrix_power_down(void) {}
    3912:	08 95       	ret

00003914 <suspend_wakeup_condition>:
bool suspend_wakeup_condition(void)
{
    3914:	cf 93       	push	r28
    matrix_power_up();
    3916:	0e 94 88 1c 	call	0x3910	; 0x3910 <matrix_power_up>
    matrix_scan();
    391a:	0e 94 fd 06 	call	0xdfa	; 0xdfa <matrix_scan>
    matrix_power_down();
    391e:	0e 94 89 1c 	call	0x3912	; 0x3912 <matrix_power_down>
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3922:	c0 e0       	ldi	r28, 0x00	; 0
        if (matrix_get_row(r)) return true;
    3924:	8c 2f       	mov	r24, r28
    3926:	0e 94 73 08 	call	0x10e6	; 0x10e6 <matrix_get_row>
    392a:	89 2b       	or	r24, r25
    392c:	29 f4       	brne	.+10     	; 0x3938 <suspend_wakeup_condition+0x24>
bool suspend_wakeup_condition(void)
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    392e:	cf 5f       	subi	r28, 0xFF	; 255
    3930:	c6 30       	cpi	r28, 0x06	; 6
    3932:	c1 f7       	brne	.-16     	; 0x3924 <suspend_wakeup_condition+0x10>
        if (matrix_get_row(r)) return true;
    }
    return false;
    3934:	80 e0       	ldi	r24, 0x00	; 0
    3936:	01 c0       	rjmp	.+2      	; 0x393a <suspend_wakeup_condition+0x26>
{
    matrix_power_up();
    matrix_scan();
    matrix_power_down();
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        if (matrix_get_row(r)) return true;
    3938:	81 e0       	ldi	r24, 0x01	; 1
    }
    return false;
}
    393a:	cf 91       	pop	r28
    393c:	08 95       	ret

0000393e <suspend_wakeup_init>:

// run immediately after wakeup
void suspend_wakeup_init(void)
{
    // clear keyboard state
    clear_keyboard();
    393e:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <clear_keyboard>

00003942 <__vector_12>:
}

#ifndef NO_SUSPEND_POWER_DOWN
/* watchdog timeout */
ISR(WDT_vect)
{
    3942:	1f 92       	push	r1
    3944:	0f 92       	push	r0
    3946:	0f b6       	in	r0, 0x3f	; 63
    3948:	0f 92       	push	r0
    394a:	11 24       	eor	r1, r1
    394c:	8f 93       	push	r24
    394e:	9f 93       	push	r25
    3950:	af 93       	push	r26
    3952:	bf 93       	push	r27
    // compensate timer for sleep
    switch (wdt_timeout) {
    3954:	80 91 b8 01 	lds	r24, 0x01B8
    3958:	81 11       	cpse	r24, r1
    395a:	13 c0       	rjmp	.+38     	; 0x3982 <__vector_12+0x40>
        case WDTO_15MS:
            timer_count += 15 + 2;  // WDTO_15MS + 2(from observation)
    395c:	80 91 b9 01 	lds	r24, 0x01B9
    3960:	90 91 ba 01 	lds	r25, 0x01BA
    3964:	a0 91 bb 01 	lds	r26, 0x01BB
    3968:	b0 91 bc 01 	lds	r27, 0x01BC
    396c:	41 96       	adiw	r24, 0x11	; 17
    396e:	a1 1d       	adc	r26, r1
    3970:	b1 1d       	adc	r27, r1
    3972:	80 93 b9 01 	sts	0x01B9, r24
    3976:	90 93 ba 01 	sts	0x01BA, r25
    397a:	a0 93 bb 01 	sts	0x01BB, r26
    397e:	b0 93 bc 01 	sts	0x01BC, r27
            break;
        default:
            ;
    }
}
    3982:	bf 91       	pop	r27
    3984:	af 91       	pop	r26
    3986:	9f 91       	pop	r25
    3988:	8f 91       	pop	r24
    398a:	0f 90       	pop	r0
    398c:	0f be       	out	0x3f, r0	; 63
    398e:	0f 90       	pop	r0
    3990:	1f 90       	pop	r1
    3992:	18 95       	reti

00003994 <timer_init>:
volatile uint32_t timer_count = 0;

void timer_init(void)
{
    // Timer0 CTC mode
    TCCR0A = 0x02;
    3994:	82 e0       	ldi	r24, 0x02	; 2
    3996:	84 bd       	out	0x24, r24	; 36
#if TIMER_PRESCALER == 1
    TCCR0B = 0x01;
#elif TIMER_PRESCALER == 8
    TCCR0B = 0x02;
#elif TIMER_PRESCALER == 64
    TCCR0B = 0x03;
    3998:	93 e0       	ldi	r25, 0x03	; 3
    399a:	95 bd       	out	0x25, r25	; 37
    TCCR0B = 0x05;
#else
#   error "Timer prescaler value is NOT vaild."
#endif

    OCR0A = TIMER_RAW_TOP;
    399c:	9a ef       	ldi	r25, 0xFA	; 250
    399e:	97 bd       	out	0x27, r25	; 39
    TIMSK0 = (1<<OCIE0A);
    39a0:	80 93 6e 00 	sts	0x006E, r24
    39a4:	08 95       	ret

000039a6 <timer_read>:
inline
uint16_t timer_read(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    39a6:	2f b7       	in	r18, 0x3f	; 63
    cli();
    39a8:	f8 94       	cli
    t = timer_count;
    39aa:	80 91 b9 01 	lds	r24, 0x01B9
    39ae:	90 91 ba 01 	lds	r25, 0x01BA
    39b2:	a0 91 bb 01 	lds	r26, 0x01BB
    39b6:	b0 91 bc 01 	lds	r27, 0x01BC
    SREG = sreg;
    39ba:	2f bf       	out	0x3f, r18	; 63

    return (t & 0xFFFF);
}
    39bc:	08 95       	ret

000039be <timer_read32>:
inline
uint32_t timer_read32(void)
{
    uint32_t t;

    uint8_t sreg = SREG;
    39be:	2f b7       	in	r18, 0x3f	; 63
    cli();
    39c0:	f8 94       	cli
    t = timer_count;
    39c2:	60 91 b9 01 	lds	r22, 0x01B9
    39c6:	70 91 ba 01 	lds	r23, 0x01BA
    39ca:	80 91 bb 01 	lds	r24, 0x01BB
    39ce:	90 91 bc 01 	lds	r25, 0x01BC
    SREG = sreg;
    39d2:	2f bf       	out	0x3f, r18	; 63

    return t;
}
    39d4:	08 95       	ret

000039d6 <timer_elapsed>:

inline
uint16_t timer_elapsed(uint16_t last)
{
    39d6:	cf 92       	push	r12
    39d8:	df 92       	push	r13
    39da:	ef 92       	push	r14
    39dc:	ff 92       	push	r15
    39de:	0f 93       	push	r16
    39e0:	1f 93       	push	r17
    uint32_t t;

    uint8_t sreg = SREG;
    39e2:	2f b7       	in	r18, 0x3f	; 63
    cli();
    39e4:	f8 94       	cli
    t = timer_count;
    39e6:	40 91 b9 01 	lds	r20, 0x01B9
    39ea:	50 91 ba 01 	lds	r21, 0x01BA
    39ee:	60 91 bb 01 	lds	r22, 0x01BB
    39f2:	70 91 bc 01 	lds	r23, 0x01BC
    SREG = sreg;
    39f6:	2f bf       	out	0x3f, r18	; 63

    return TIMER_DIFF_16((t & 0xFFFF), last);
    39f8:	6a 01       	movw	r12, r20
    39fa:	7b 01       	movw	r14, r22
    39fc:	ee 24       	eor	r14, r14
    39fe:	ff 24       	eor	r15, r15
    3a00:	8c 01       	movw	r16, r24
    3a02:	20 e0       	ldi	r18, 0x00	; 0
    3a04:	30 e0       	ldi	r19, 0x00	; 0
    3a06:	c0 16       	cp	r12, r16
    3a08:	d1 06       	cpc	r13, r17
    3a0a:	e2 06       	cpc	r14, r18
    3a0c:	f3 06       	cpc	r15, r19
    3a0e:	10 f4       	brcc	.+4      	; 0x3a14 <timer_elapsed+0x3e>
    3a10:	41 50       	subi	r20, 0x01	; 1
    3a12:	51 09       	sbc	r21, r1
    3a14:	9a 01       	movw	r18, r20
    3a16:	28 1b       	sub	r18, r24
    3a18:	39 0b       	sbc	r19, r25
    3a1a:	c9 01       	movw	r24, r18
}
    3a1c:	1f 91       	pop	r17
    3a1e:	0f 91       	pop	r16
    3a20:	ff 90       	pop	r15
    3a22:	ef 90       	pop	r14
    3a24:	df 90       	pop	r13
    3a26:	cf 90       	pop	r12
    3a28:	08 95       	ret

00003a2a <__vector_21>:
    return TIMER_DIFF_32(t, last);
}

// excecuted once per 1ms.(excess for just timer count?)
ISR(TIMER0_COMPA_vect)
{
    3a2a:	1f 92       	push	r1
    3a2c:	0f 92       	push	r0
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	0f 92       	push	r0
    3a32:	11 24       	eor	r1, r1
    3a34:	8f 93       	push	r24
    3a36:	9f 93       	push	r25
    3a38:	af 93       	push	r26
    3a3a:	bf 93       	push	r27
    timer_count++;
    3a3c:	80 91 b9 01 	lds	r24, 0x01B9
    3a40:	90 91 ba 01 	lds	r25, 0x01BA
    3a44:	a0 91 bb 01 	lds	r26, 0x01BB
    3a48:	b0 91 bc 01 	lds	r27, 0x01BC
    3a4c:	01 96       	adiw	r24, 0x01	; 1
    3a4e:	a1 1d       	adc	r26, r1
    3a50:	b1 1d       	adc	r27, r1
    3a52:	80 93 b9 01 	sts	0x01B9, r24
    3a56:	90 93 ba 01 	sts	0x01BA, r25
    3a5a:	a0 93 bb 01 	sts	0x01BB, r26
    3a5e:	b0 93 bc 01 	sts	0x01BC, r27
}
    3a62:	bf 91       	pop	r27
    3a64:	af 91       	pop	r26
    3a66:	9f 91       	pop	r25
    3a68:	8f 91       	pop	r24
    3a6a:	0f 90       	pop	r0
    3a6c:	0f be       	out	0x3f, r0	; 63
    3a6e:	0f 90       	pop	r0
    3a70:	1f 90       	pop	r1
    3a72:	18 95       	reti

00003a74 <bootloader_jump>:
uint32_t reset_key  __attribute__ ((section (".noinit")));

/* initialize MCU status by watchdog reset */
void bootloader_jump(void) {
#ifdef PROTOCOL_LUFA
    USB_Disable();
    3a74:	0e 94 78 0d 	call	0x1af0	; 0x1af0 <USB_Disable>
    cli();
    3a78:	f8 94       	cli
    3a7a:	2f ef       	ldi	r18, 0xFF	; 255
    3a7c:	87 ea       	ldi	r24, 0xA7	; 167
    3a7e:	91 e6       	ldi	r25, 0x61	; 97
    3a80:	21 50       	subi	r18, 0x01	; 1
    3a82:	80 40       	sbci	r24, 0x00	; 0
    3a84:	90 40       	sbci	r25, 0x00	; 0
    3a86:	e1 f7       	brne	.-8      	; 0x3a80 <bootloader_jump+0xc>
    3a88:	00 c0       	rjmp	.+0      	; 0x3a8a <bootloader_jump+0x16>
    3a8a:	00 00       	nop
    UCSR1B = 0;
    _delay_ms(5);
#endif

    // watchdog reset
    reset_key = BOOTLOADER_RESET_KEY;
    3a8c:	87 e0       	ldi	r24, 0x07	; 7
    3a8e:	90 eb       	ldi	r25, 0xB0	; 176
    3a90:	dc 01       	movw	r26, r24
    3a92:	80 93 d6 01 	sts	0x01D6, r24
    3a96:	90 93 d7 01 	sts	0x01D7, r25
    3a9a:	a0 93 d8 01 	sts	0x01D8, r26
    3a9e:	b0 93 d9 01 	sts	0x01D9, r27
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    3aa2:	9c e0       	ldi	r25, 0x0C	; 12
    3aa4:	88 e1       	ldi	r24, 0x18	; 24
    3aa6:	0f b6       	in	r0, 0x3f	; 63
    3aa8:	f8 94       	cli
    3aaa:	a8 95       	wdr
    3aac:	80 93 60 00 	sts	0x0060, r24
    3ab0:	0f be       	out	0x3f, r0	; 63
    3ab2:	90 93 60 00 	sts	0x0060, r25
    wdt_enable(WDTO_250MS);
    for (;;);
    3ab6:	ff cf       	rjmp	.-2      	; 0x3ab6 <bootloader_jump+0x42>

00003ab8 <keycode_to_action>:

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3ab8:	8d 3b       	cpi	r24, 0xBD	; 189
    3aba:	50 f4       	brcc	.+20     	; 0x3ad0 <keycode_to_action+0x18>
    3abc:	88 3a       	cpi	r24, 0xA8	; 168
    3abe:	70 f5       	brcc	.+92     	; 0x3b1c <keycode_to_action+0x64>
    3ac0:	85 3a       	cpi	r24, 0xA5	; 165
    3ac2:	18 f5       	brcc	.+70     	; 0x3b0a <keycode_to_action+0x52>
    3ac4:	84 30       	cpi	r24, 0x04	; 4
    3ac6:	f8 f4       	brcc	.+62     	; 0x3b06 <keycode_to_action+0x4e>
    3ac8:	81 30       	cpi	r24, 0x01	; 1
    3aca:	09 f4       	brne	.+2      	; 0x3ace <keycode_to_action+0x16>
    3acc:	6c c0       	rjmp	.+216    	; 0x3ba6 <keycode_to_action+0xee>
    3ace:	68 c0       	rjmp	.+208    	; 0x3ba0 <keycode_to_action+0xe8>
    3ad0:	88 3e       	cpi	r24, 0xE8	; 232
    3ad2:	98 f4       	brcc	.+38     	; 0x3afa <keycode_to_action+0x42>
    3ad4:	80 3e       	cpi	r24, 0xE0	; 224
    3ad6:	b8 f4       	brcc	.+46     	; 0x3b06 <keycode_to_action+0x4e>
    3ad8:	8f 3b       	cpi	r24, 0xBF	; 191
    3ada:	09 f0       	breq	.+2      	; 0x3ade <keycode_to_action+0x26>
    3adc:	61 c0       	rjmp	.+194    	; 0x3ba0 <keycode_to_action+0xe8>
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
    3ade:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <clear_keyboard>
    3ae2:	2f ef       	ldi	r18, 0xFF	; 255
    3ae4:	80 e7       	ldi	r24, 0x70	; 112
    3ae6:	92 e0       	ldi	r25, 0x02	; 2
    3ae8:	21 50       	subi	r18, 0x01	; 1
    3aea:	80 40       	sbci	r24, 0x00	; 0
    3aec:	90 40       	sbci	r25, 0x00	; 0
    3aee:	e1 f7       	brne	.-8      	; 0x3ae8 <keycode_to_action+0x30>
    3af0:	00 c0       	rjmp	.+0      	; 0x3af2 <keycode_to_action+0x3a>
    3af2:	00 00       	nop
            wait_ms(50);
            bootloader_jump(); // not return
    3af4:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <bootloader_jump>
    3af8:	53 c0       	rjmp	.+166    	; 0x3ba0 <keycode_to_action+0xe8>

/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    switch (keycode) {
    3afa:	80 3f       	cpi	r24, 0xF0	; 240
    3afc:	08 f4       	brcc	.+2      	; 0x3b00 <keycode_to_action+0x48>
    3afe:	50 c0       	rjmp	.+160    	; 0x3ba0 <keycode_to_action+0xe8>
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
    3b00:	90 e0       	ldi	r25, 0x00	; 0
    3b02:	90 65       	ori	r25, 0x50	; 80
            break;
    3b04:	08 95       	ret
{
    action_t action = {};
    switch (keycode) {
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
    3b06:	90 e0       	ldi	r25, 0x00	; 0
            break;
    3b08:	08 95       	ret
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3b0a:	85 3a       	cpi	r24, 0xA5	; 165
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <keycode_to_action+0x58>
    3b0e:	4e c0       	rjmp	.+156    	; 0x3bac <keycode_to_action+0xf4>
    3b10:	86 3a       	cpi	r24, 0xA6	; 166
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <keycode_to_action+0x5e>
    3b14:	4e c0       	rjmp	.+156    	; 0x3bb2 <keycode_to_action+0xfa>
    3b16:	83 e8       	ldi	r24, 0x83	; 131
    3b18:	90 e4       	ldi	r25, 0x40	; 64
    3b1a:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3b1c:	88 3a       	cpi	r24, 0xA8	; 168
    3b1e:	09 f4       	brne	.+2      	; 0x3b22 <keycode_to_action+0x6a>
    3b20:	4b c0       	rjmp	.+150    	; 0x3bb8 <keycode_to_action+0x100>
    3b22:	89 3a       	cpi	r24, 0xA9	; 169
    3b24:	09 f4       	brne	.+2      	; 0x3b28 <keycode_to_action+0x70>
    3b26:	4b c0       	rjmp	.+150    	; 0x3bbe <keycode_to_action+0x106>
    3b28:	8a 3a       	cpi	r24, 0xAA	; 170
    3b2a:	09 f4       	brne	.+2      	; 0x3b2e <keycode_to_action+0x76>
    3b2c:	4b c0       	rjmp	.+150    	; 0x3bc4 <keycode_to_action+0x10c>
    3b2e:	8b 3a       	cpi	r24, 0xAB	; 171
    3b30:	09 f4       	brne	.+2      	; 0x3b34 <keycode_to_action+0x7c>
    3b32:	4b c0       	rjmp	.+150    	; 0x3bca <keycode_to_action+0x112>
    3b34:	8c 3a       	cpi	r24, 0xAC	; 172
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <keycode_to_action+0x82>
    3b38:	4b c0       	rjmp	.+150    	; 0x3bd0 <keycode_to_action+0x118>
    3b3a:	8d 3a       	cpi	r24, 0xAD	; 173
    3b3c:	09 f4       	brne	.+2      	; 0x3b40 <keycode_to_action+0x88>
    3b3e:	4b c0       	rjmp	.+150    	; 0x3bd6 <keycode_to_action+0x11e>
    3b40:	8e 3a       	cpi	r24, 0xAE	; 174
    3b42:	09 f4       	brne	.+2      	; 0x3b46 <keycode_to_action+0x8e>
    3b44:	4b c0       	rjmp	.+150    	; 0x3bdc <keycode_to_action+0x124>
    3b46:	8f 3a       	cpi	r24, 0xAF	; 175
    3b48:	09 f4       	brne	.+2      	; 0x3b4c <keycode_to_action+0x94>
    3b4a:	4b c0       	rjmp	.+150    	; 0x3be2 <keycode_to_action+0x12a>
    3b4c:	81 3b       	cpi	r24, 0xB1	; 177
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <keycode_to_action+0x9a>
    3b50:	4b c0       	rjmp	.+150    	; 0x3be8 <keycode_to_action+0x130>
    3b52:	80 3b       	cpi	r24, 0xB0	; 176
    3b54:	09 f4       	brne	.+2      	; 0x3b58 <keycode_to_action+0xa0>
    3b56:	4b c0       	rjmp	.+150    	; 0x3bee <keycode_to_action+0x136>
    3b58:	82 3b       	cpi	r24, 0xB2	; 178
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <keycode_to_action+0xa6>
    3b5c:	4b c0       	rjmp	.+150    	; 0x3bf4 <keycode_to_action+0x13c>
    3b5e:	83 3b       	cpi	r24, 0xB3	; 179
    3b60:	09 f4       	brne	.+2      	; 0x3b64 <keycode_to_action+0xac>
    3b62:	4b c0       	rjmp	.+150    	; 0x3bfa <keycode_to_action+0x142>
    3b64:	84 3b       	cpi	r24, 0xB4	; 180
    3b66:	09 f4       	brne	.+2      	; 0x3b6a <keycode_to_action+0xb2>
    3b68:	4b c0       	rjmp	.+150    	; 0x3c00 <keycode_to_action+0x148>
    3b6a:	85 3b       	cpi	r24, 0xB5	; 181
    3b6c:	09 f4       	brne	.+2      	; 0x3b70 <keycode_to_action+0xb8>
    3b6e:	4b c0       	rjmp	.+150    	; 0x3c06 <keycode_to_action+0x14e>
    3b70:	86 3b       	cpi	r24, 0xB6	; 182
    3b72:	09 f4       	brne	.+2      	; 0x3b76 <keycode_to_action+0xbe>
    3b74:	4b c0       	rjmp	.+150    	; 0x3c0c <keycode_to_action+0x154>
    3b76:	87 3b       	cpi	r24, 0xB7	; 183
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <keycode_to_action+0xc4>
    3b7a:	4b c0       	rjmp	.+150    	; 0x3c12 <keycode_to_action+0x15a>
    3b7c:	88 3b       	cpi	r24, 0xB8	; 184
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <keycode_to_action+0xca>
    3b80:	4b c0       	rjmp	.+150    	; 0x3c18 <keycode_to_action+0x160>
    3b82:	89 3b       	cpi	r24, 0xB9	; 185
    3b84:	09 f4       	brne	.+2      	; 0x3b88 <keycode_to_action+0xd0>
    3b86:	4b c0       	rjmp	.+150    	; 0x3c1e <keycode_to_action+0x166>
    3b88:	8a 3b       	cpi	r24, 0xBA	; 186
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <keycode_to_action+0xd6>
    3b8c:	4b c0       	rjmp	.+150    	; 0x3c24 <keycode_to_action+0x16c>
    3b8e:	8b 3b       	cpi	r24, 0xBB	; 187
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <keycode_to_action+0xdc>
    3b92:	4b c0       	rjmp	.+150    	; 0x3c2a <keycode_to_action+0x172>
    3b94:	8c 3b       	cpi	r24, 0xBC	; 188
    3b96:	09 f4       	brne	.+2      	; 0x3b9a <keycode_to_action+0xe2>
    3b98:	4b c0       	rjmp	.+150    	; 0x3c30 <keycode_to_action+0x178>
    3b9a:	80 e0       	ldi	r24, 0x00	; 0
    3b9c:	94 e4       	ldi	r25, 0x44	; 68
    3b9e:	08 95       	ret


/* translates keycode to action */
static action_t keycode_to_action(uint8_t keycode)
{
    action_t action = {};
    3ba0:	80 e0       	ldi	r24, 0x00	; 0
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
            break;
        case KC_BOOTLOADER:
            clear_keyboard();
            wait_ms(50);
            bootloader_jump(); // not return
            break;
    3ba4:	08 95       	ret
            break;
        case KC_MS_UP ... KC_MS_ACCEL2:
            action.code = ACTION_MOUSEKEY(keycode);
            break;
        case KC_TRNS:
            action.code = ACTION_TRANSPARENT;
    3ba6:	81 e0       	ldi	r24, 0x01	; 1
    3ba8:	90 e0       	ldi	r25, 0x00	; 0
    3baa:	08 95       	ret
        case KC_A ... KC_EXSEL:
        case KC_LCTRL ... KC_RGUI:
            action.code = ACTION_KEY(keycode);
            break;
        case KC_SYSTEM_POWER ... KC_SYSTEM_WAKE:
            action.code = ACTION_USAGE_SYSTEM(KEYCODE2SYSTEM(keycode));
    3bac:	81 e8       	ldi	r24, 0x81	; 129
    3bae:	90 e4       	ldi	r25, 0x40	; 64
    3bb0:	08 95       	ret
    3bb2:	82 e8       	ldi	r24, 0x82	; 130
    3bb4:	90 e4       	ldi	r25, 0x40	; 64
    3bb6:	08 95       	ret
            break;
        case KC_AUDIO_MUTE ... KC_WWW_FAVORITES:
            action.code = ACTION_USAGE_CONSUMER(KEYCODE2CONSUMER(keycode));
    3bb8:	82 ee       	ldi	r24, 0xE2	; 226
    3bba:	94 e4       	ldi	r25, 0x44	; 68
    3bbc:	08 95       	ret
    3bbe:	89 ee       	ldi	r24, 0xE9	; 233
    3bc0:	94 e4       	ldi	r25, 0x44	; 68
    3bc2:	08 95       	ret
    3bc4:	8a ee       	ldi	r24, 0xEA	; 234
    3bc6:	94 e4       	ldi	r25, 0x44	; 68
    3bc8:	08 95       	ret
    3bca:	85 eb       	ldi	r24, 0xB5	; 181
    3bcc:	94 e4       	ldi	r25, 0x44	; 68
    3bce:	08 95       	ret
    3bd0:	86 eb       	ldi	r24, 0xB6	; 182
    3bd2:	94 e4       	ldi	r25, 0x44	; 68
    3bd4:	08 95       	ret
    3bd6:	83 eb       	ldi	r24, 0xB3	; 179
    3bd8:	94 e4       	ldi	r25, 0x44	; 68
    3bda:	08 95       	ret
    3bdc:	84 eb       	ldi	r24, 0xB4	; 180
    3bde:	94 e4       	ldi	r25, 0x44	; 68
    3be0:	08 95       	ret
    3be2:	87 eb       	ldi	r24, 0xB7	; 183
    3be4:	94 e4       	ldi	r25, 0x44	; 68
    3be6:	08 95       	ret
    3be8:	8c ec       	ldi	r24, 0xCC	; 204
    3bea:	94 e4       	ldi	r25, 0x44	; 68
    3bec:	08 95       	ret
    3bee:	8d ec       	ldi	r24, 0xCD	; 205
    3bf0:	94 e4       	ldi	r25, 0x44	; 68
    3bf2:	08 95       	ret
    3bf4:	83 e8       	ldi	r24, 0x83	; 131
    3bf6:	95 e4       	ldi	r25, 0x45	; 69
    3bf8:	08 95       	ret
    3bfa:	8a e8       	ldi	r24, 0x8A	; 138
    3bfc:	95 e4       	ldi	r25, 0x45	; 69
    3bfe:	08 95       	ret
    3c00:	82 e9       	ldi	r24, 0x92	; 146
    3c02:	95 e4       	ldi	r25, 0x45	; 69
    3c04:	08 95       	ret
    3c06:	84 e9       	ldi	r24, 0x94	; 148
    3c08:	95 e4       	ldi	r25, 0x45	; 69
    3c0a:	08 95       	ret
    3c0c:	81 e2       	ldi	r24, 0x21	; 33
    3c0e:	96 e4       	ldi	r25, 0x46	; 70
    3c10:	08 95       	ret
    3c12:	83 e2       	ldi	r24, 0x23	; 35
    3c14:	96 e4       	ldi	r25, 0x46	; 70
    3c16:	08 95       	ret
    3c18:	84 e2       	ldi	r24, 0x24	; 36
    3c1a:	96 e4       	ldi	r25, 0x46	; 70
    3c1c:	08 95       	ret
    3c1e:	85 e2       	ldi	r24, 0x25	; 37
    3c20:	96 e4       	ldi	r25, 0x46	; 70
    3c22:	08 95       	ret
    3c24:	86 e2       	ldi	r24, 0x26	; 38
    3c26:	96 e4       	ldi	r25, 0x46	; 70
    3c28:	08 95       	ret
    3c2a:	87 e2       	ldi	r24, 0x27	; 39
    3c2c:	96 e4       	ldi	r25, 0x46	; 70
    3c2e:	08 95       	ret
    3c30:	8a e2       	ldi	r24, 0x2A	; 42
    3c32:	96 e4       	ldi	r25, 0x46	; 70
        default:
            action.code = ACTION_NO;
            break;
    }
    return action;
}
    3c34:	08 95       	ret

00003c36 <action_for_key>:


/* converts key to action */
action_t action_for_key(uint8_t layer, keypos_t key)
{
    uint8_t keycode = keymap_key_to_keycode(layer, key);
    3c36:	0e 94 ac 06 	call	0xd58	; 0xd58 <keymap_key_to_keycode>
    switch (keycode) {
    3c3a:	80 3e       	cpi	r24, 0xE0	; 224
    3c3c:	a8 f4       	brcc	.+42     	; 0x3c68 <action_for_key+0x32>
    3c3e:	80 3c       	cpi	r24, 0xC0	; 192
    3c40:	00 f5       	brcc	.+64     	; 0x3c82 <action_for_key+0x4c>
    3c42:	81 33       	cpi	r24, 0x31	; 49
    3c44:	09 f4       	brne	.+2      	; 0x3c48 <action_for_key+0x12>
    3c46:	5c c0       	rjmp	.+184    	; 0x3d00 <action_for_key+0xca>
    3c48:	38 f4       	brcc	.+14     	; 0x3c58 <action_for_key+0x22>
    3c4a:	89 32       	cpi	r24, 0x29	; 41
    3c4c:	09 f4       	brne	.+2      	; 0x3c50 <action_for_key+0x1a>
    3c4e:	52 c0       	rjmp	.+164    	; 0x3cf4 <action_for_key+0xbe>
    3c50:	8a 32       	cpi	r24, 0x2A	; 42
    3c52:	09 f4       	brne	.+2      	; 0x3c56 <action_for_key+0x20>
    3c54:	5b c0       	rjmp	.+182    	; 0x3d0c <action_for_key+0xd6>
    3c56:	5f c0       	rjmp	.+190    	; 0x3d16 <action_for_key+0xe0>
    3c58:	89 33       	cpi	r24, 0x39	; 57
    3c5a:	b1 f0       	breq	.+44     	; 0x3c88 <action_for_key+0x52>
    3c5c:	82 38       	cpi	r24, 0x82	; 130
    3c5e:	a1 f0       	breq	.+40     	; 0x3c88 <action_for_key+0x52>
    3c60:	85 33       	cpi	r24, 0x35	; 53
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <action_for_key+0x30>
    3c64:	41 c0       	rjmp	.+130    	; 0x3ce8 <action_for_key+0xb2>
    3c66:	57 c0       	rjmp	.+174    	; 0x3d16 <action_for_key+0xe0>
    3c68:	83 3e       	cpi	r24, 0xE3	; 227
    3c6a:	41 f1       	breq	.+80     	; 0x3cbc <action_for_key+0x86>
    3c6c:	28 f4       	brcc	.+10     	; 0x3c78 <action_for_key+0x42>
    3c6e:	80 3e       	cpi	r24, 0xE0	; 224
    3c70:	99 f0       	breq	.+38     	; 0x3c98 <action_for_key+0x62>
    3c72:	82 3e       	cpi	r24, 0xE2	; 226
    3c74:	b9 f0       	breq	.+46     	; 0x3ca4 <action_for_key+0x6e>
    3c76:	4f c0       	rjmp	.+158    	; 0x3d16 <action_for_key+0xe0>
    3c78:	86 3e       	cpi	r24, 0xE6	; 230
    3c7a:	31 f1       	breq	.+76     	; 0x3cc8 <action_for_key+0x92>
    3c7c:	87 3e       	cpi	r24, 0xE7	; 231
    3c7e:	71 f1       	breq	.+92     	; 0x3cdc <action_for_key+0xa6>
    3c80:	4a c0       	rjmp	.+148    	; 0x3d16 <action_for_key+0xe0>
        case KC_FN0 ... KC_FN31:
            return keymap_fn_to_action(keycode);
    3c82:	0e 94 be 06 	call	0xd7c	; 0xd7c <keymap_fn_to_action>
    3c86:	08 95       	ret
#ifdef BOOTMAGIC_ENABLE
        case KC_CAPSLOCK:
        case KC_LOCKING_CAPS:
            if (keymap_config.swap_control_capslock || keymap_config.capslock_to_control) {
    3c88:	90 91 d5 01 	lds	r25, 0x01D5
    3c8c:	90 fd       	sbrc	r25, 0
    3c8e:	02 c0       	rjmp	.+4      	; 0x3c94 <action_for_key+0x5e>
    3c90:	91 ff       	sbrs	r25, 1
    3c92:	41 c0       	rjmp	.+130    	; 0x3d16 <action_for_key+0xe0>
                return keycode_to_action(KC_LCTL);
    3c94:	80 ee       	ldi	r24, 0xE0	; 224
    3c96:	3f c0       	rjmp	.+126    	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(keycode);
        case KC_LCTL:
            if (keymap_config.swap_control_capslock) {
    3c98:	80 91 d5 01 	lds	r24, 0x01D5
    3c9c:	80 ff       	sbrs	r24, 0
    3c9e:	fa cf       	rjmp	.-12     	; 0x3c94 <action_for_key+0x5e>
                return keycode_to_action(KC_CAPSLOCK);
    3ca0:	89 e3       	ldi	r24, 0x39	; 57
    3ca2:	39 c0       	rjmp	.+114    	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LCTL);
        case KC_LALT:
            if (keymap_config.swap_lalt_lgui) {
    3ca4:	80 91 d5 01 	lds	r24, 0x01D5
    3ca8:	82 ff       	sbrs	r24, 2
    3caa:	0c c0       	rjmp	.+24     	; 0x3cc4 <action_for_key+0x8e>
                if (keymap_config.no_gui) {
    3cac:	80 91 d5 01 	lds	r24, 0x01D5
    3cb0:	84 ff       	sbrs	r24, 4
    3cb2:	02 c0       	rjmp	.+4      	; 0x3cb8 <action_for_key+0x82>
                    return keycode_to_action(ACTION_NO);
    3cb4:	80 e0       	ldi	r24, 0x00	; 0
    3cb6:	2f c0       	rjmp	.+94     	; 0x3d16 <action_for_key+0xe0>
                }
                return keycode_to_action(KC_LGUI);
    3cb8:	83 ee       	ldi	r24, 0xE3	; 227
    3cba:	2d c0       	rjmp	.+90     	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_LALT);
        case KC_LGUI:
            if (keymap_config.swap_lalt_lgui) {
    3cbc:	80 91 d5 01 	lds	r24, 0x01D5
    3cc0:	82 ff       	sbrs	r24, 2
    3cc2:	f4 cf       	rjmp	.-24     	; 0x3cac <action_for_key+0x76>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_LGUI);
            }
            return keycode_to_action(KC_LALT);
    3cc4:	82 ee       	ldi	r24, 0xE2	; 226
    3cc6:	27 c0       	rjmp	.+78     	; 0x3d16 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_LGUI);
        case KC_RALT:
            if (keymap_config.swap_ralt_rgui) {
    3cc8:	80 91 d5 01 	lds	r24, 0x01D5
    3ccc:	83 ff       	sbrs	r24, 3
    3cce:	0a c0       	rjmp	.+20     	; 0x3ce4 <action_for_key+0xae>
                if (keymap_config.no_gui) {
    3cd0:	80 91 d5 01 	lds	r24, 0x01D5
    3cd4:	84 fd       	sbrc	r24, 4
    3cd6:	ee cf       	rjmp	.-36     	; 0x3cb4 <action_for_key+0x7e>
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
    3cd8:	87 ee       	ldi	r24, 0xE7	; 231
    3cda:	1d c0       	rjmp	.+58     	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_RALT);
        case KC_RGUI:
            if (keymap_config.swap_ralt_rgui) {
    3cdc:	80 91 d5 01 	lds	r24, 0x01D5
    3ce0:	83 ff       	sbrs	r24, 3
    3ce2:	f6 cf       	rjmp	.-20     	; 0x3cd0 <action_for_key+0x9a>
                if (keymap_config.no_gui) {
                    return keycode_to_action(ACTION_NO);
                }
                return keycode_to_action(KC_RGUI);
            }
            return keycode_to_action(KC_RALT);
    3ce4:	86 ee       	ldi	r24, 0xE6	; 230
    3ce6:	17 c0       	rjmp	.+46     	; 0x3d16 <action_for_key+0xe0>
            if (keymap_config.no_gui) {
                return keycode_to_action(ACTION_NO);
            }
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
    3ce8:	80 91 d5 01 	lds	r24, 0x01D5
    3cec:	85 ff       	sbrs	r24, 5
    3cee:	06 c0       	rjmp	.+12     	; 0x3cfc <action_for_key+0xc6>
                return keycode_to_action(KC_ESC);
    3cf0:	89 e2       	ldi	r24, 0x29	; 41
    3cf2:	11 c0       	rjmp	.+34     	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_GRAVE);
        case KC_ESC:
            if (keymap_config.swap_grave_esc) {
    3cf4:	80 91 d5 01 	lds	r24, 0x01D5
    3cf8:	85 ff       	sbrs	r24, 5
    3cfa:	fa cf       	rjmp	.-12     	; 0x3cf0 <action_for_key+0xba>
            return keycode_to_action(KC_RGUI);
        case KC_GRAVE:
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_ESC);
            }
            return keycode_to_action(KC_GRAVE);
    3cfc:	85 e3       	ldi	r24, 0x35	; 53
    3cfe:	0b c0       	rjmp	.+22     	; 0x3d16 <action_for_key+0xe0>
            if (keymap_config.swap_grave_esc) {
                return keycode_to_action(KC_GRAVE);
            }
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
    3d00:	80 91 d5 01 	lds	r24, 0x01D5
    3d04:	86 ff       	sbrs	r24, 6
    3d06:	06 c0       	rjmp	.+12     	; 0x3d14 <action_for_key+0xde>
                return keycode_to_action(KC_BSPACE);
    3d08:	8a e2       	ldi	r24, 0x2A	; 42
    3d0a:	05 c0       	rjmp	.+10     	; 0x3d16 <action_for_key+0xe0>
            }
            return keycode_to_action(KC_BSLASH);
        case KC_BSPACE:
            if (keymap_config.swap_backslash_backspace) {
    3d0c:	80 91 d5 01 	lds	r24, 0x01D5
    3d10:	86 ff       	sbrs	r24, 6
    3d12:	fa cf       	rjmp	.-12     	; 0x3d08 <action_for_key+0xd2>
            return keycode_to_action(KC_ESC);
        case KC_BSLASH:
            if (keymap_config.swap_backslash_backspace) {
                return keycode_to_action(KC_BSPACE);
            }
            return keycode_to_action(KC_BSLASH);
    3d14:	81 e3       	ldi	r24, 0x31	; 49
                return keycode_to_action(KC_BSLASH);
            }
            return keycode_to_action(KC_BSPACE);
#endif
        default:
            return keycode_to_action(keycode);
    3d16:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <keycode_to_action>
    }
}
    3d1a:	08 95       	ret

00003d1c <action_get_macro>:
{
    (void)record;
    (void)id;
    (void)opt;
    return MACRO_NONE;
}
    3d1c:	80 e0       	ldi	r24, 0x00	; 0
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	08 95       	ret

00003d22 <action_function>:

/* Function */
__attribute__ ((weak))
void action_function(keyrecord_t *record, uint8_t id, uint8_t opt)
{
    3d22:	08 95       	ret

00003d24 <scan_key>:
        default_layer_set((uint32_t)default_layer);
    }
}

static bool scan_key(uint16_t code)
{
    3d24:	af 92       	push	r10
    3d26:	bf 92       	push	r11
    3d28:	cf 92       	push	r12
    3d2a:	df 92       	push	r13
    3d2c:	ef 92       	push	r14
    3d2e:	ff 92       	push	r15
    3d30:	0f 93       	push	r16
    3d32:	1f 93       	push	r17
    3d34:	cf 93       	push	r28
    3d36:	7c 01       	movw	r14, r24
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d38:	c0 e0       	ldi	r28, 0x00	; 0
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3d3a:	cc 24       	eor	r12, r12
    3d3c:	c3 94       	inc	r12
    3d3e:	d1 2c       	mov	r13, r1
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
    3d40:	8c 2f       	mov	r24, r28
    3d42:	0e 94 73 08 	call	0x10e6	; 0x10e6 <matrix_get_row>
    3d46:	5c 01       	movw	r10, r24
    3d48:	00 e0       	ldi	r16, 0x00	; 0
    3d4a:	10 e0       	ldi	r17, 0x00	; 0
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
            if (matrix_row & ((matrix_row_t)1<<c)) {
    3d4c:	c6 01       	movw	r24, r12
    3d4e:	00 2e       	mov	r0, r16
    3d50:	02 c0       	rjmp	.+4      	; 0x3d56 <scan_key+0x32>
    3d52:	88 0f       	add	r24, r24
    3d54:	99 1f       	adc	r25, r25
    3d56:	0a 94       	dec	r0
    3d58:	e2 f7       	brpl	.-8      	; 0x3d52 <scan_key+0x2e>
    3d5a:	8a 21       	and	r24, r10
    3d5c:	9b 21       	and	r25, r11
    3d5e:	89 2b       	or	r24, r25
    3d60:	b1 f0       	breq	.+44     	; 0x3d8e <scan_key+0x6a>
                // read key from Layer 0
                action_t action = action_for_key(0, (keypos_t){ .row = r, .col = c });
    3d62:	60 2f       	mov	r22, r16
    3d64:	7c 2f       	mov	r23, r28
    3d66:	80 e0       	ldi	r24, 0x00	; 0
    3d68:	0e 94 1b 1e 	call	0x3c36	; 0x3c36 <action_for_key>
    3d6c:	9c 01       	movw	r18, r24
                if (action.code == code ||
    3d6e:	8e 15       	cp	r24, r14
    3d70:	9f 05       	cpc	r25, r15
    3d72:	59 f0       	breq	.+22     	; 0x3d8a <scan_key+0x66>
    3d74:	83 2f       	mov	r24, r19
    3d76:	80 7e       	andi	r24, 0xE0	; 224
    3d78:	93 2f       	mov	r25, r19
    3d7a:	90 7c       	andi	r25, 0xC0	; 192
    3d7c:	11 f0       	breq	.+4      	; 0x3d82 <scan_key+0x5e>
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
    3d7e:	80 3a       	cpi	r24, 0xA0	; 160
    3d80:	31 f4       	brne	.+12     	; 0x3d8e <scan_key+0x6a>
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
                     action.key.code == code)) {
    3d82:	30 e0       	ldi	r19, 0x00	; 0
                    ((action.kind.id == ACT_LMODS ||
                      action.kind.id == ACT_RMODS ||
                      action.kind.id == ACT_LMODS_TAP ||
                      action.kind.id == ACT_RMODS_TAP ||
                      action.kind.id == ACT_LAYER_TAP ||
                      action.kind.id == ACT_LAYER_TAP_EXT) &&
    3d84:	2e 15       	cp	r18, r14
    3d86:	3f 05       	cpc	r19, r15
    3d88:	11 f4       	brne	.+4      	; 0x3d8e <scan_key+0x6a>
                     action.key.code == code)) {
                    return true;
    3d8a:	81 e0       	ldi	r24, 0x01	; 1
    3d8c:	09 c0       	rjmp	.+18     	; 0x3da0 <scan_key+0x7c>
    3d8e:	0f 5f       	subi	r16, 0xFF	; 255
    3d90:	1f 4f       	sbci	r17, 0xFF	; 255

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
        matrix_row_t matrix_row = matrix_get_row(r);
        for (uint8_t c = 0; c < MATRIX_COLS; c++) {
    3d92:	00 31       	cpi	r16, 0x10	; 16
    3d94:	11 05       	cpc	r17, r1
    3d96:	d1 f6       	brne	.-76     	; 0x3d4c <scan_key+0x28>
    }
}

static bool scan_key(uint16_t code)
{
    for (uint8_t r = 0; r < MATRIX_ROWS; r++) {
    3d98:	cf 5f       	subi	r28, 0xFF	; 255
    3d9a:	c6 30       	cpi	r28, 0x06	; 6
    3d9c:	89 f6       	brne	.-94     	; 0x3d40 <scan_key+0x1c>
                    return true;
                }
            }
        }
    }
    return false;
    3d9e:	80 e0       	ldi	r24, 0x00	; 0
}
    3da0:	cf 91       	pop	r28
    3da2:	1f 91       	pop	r17
    3da4:	0f 91       	pop	r16
    3da6:	ff 90       	pop	r15
    3da8:	ef 90       	pop	r14
    3daa:	df 90       	pop	r13
    3dac:	cf 90       	pop	r12
    3dae:	bf 90       	pop	r11
    3db0:	af 90       	pop	r10
    3db2:	08 95       	ret

00003db4 <bootmagic_scan_key>:

bool bootmagic_scan_key(uint16_t code)
{
    3db4:	cf 93       	push	r28
    3db6:	df 93       	push	r29
    3db8:	ec 01       	movw	r28, r24
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;
    3dba:	8c e2       	ldi	r24, 0x2C	; 44
    3dbc:	90 e0       	ldi	r25, 0x00	; 0
    3dbe:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <scan_key>
    3dc2:	88 23       	and	r24, r24
    3dc4:	29 f0       	breq	.+10     	; 0x3dd0 <bootmagic_scan_key+0x1c>

    return scan_key(code);
    3dc6:	ce 01       	movw	r24, r28
}
    3dc8:	df 91       	pop	r29
    3dca:	cf 91       	pop	r28

bool bootmagic_scan_key(uint16_t code)
{
    if (!scan_key(BOOTMAGIC_KEY_SALT)) return false;

    return scan_key(code);
    3dcc:	0c 94 92 1e 	jmp	0x3d24	; 0x3d24 <scan_key>
}
    3dd0:	80 e0       	ldi	r24, 0x00	; 0
    3dd2:	df 91       	pop	r29
    3dd4:	cf 91       	pop	r28
    3dd6:	08 95       	ret

00003dd8 <bootmagic>:
#include "hook.h"

keymap_config_t keymap_config;

void bootmagic(void)
{
    3dd8:	cf 93       	push	r28
    /* check signature */
    if (!eeconfig_is_enabled()) {
    3dda:	0e 94 4d 20 	call	0x409a	; 0x409a <eeconfig_is_enabled>
    3dde:	81 11       	cpse	r24, r1
    3de0:	02 c0       	rjmp	.+4      	; 0x3de6 <bootmagic+0xe>
        eeconfig_init();
    3de2:	0e 94 33 20 	call	0x4066	; 0x4066 <eeconfig_init>
    }

    /* do scans in case of bounce */
    print("bootmagic scan: ... ");
    3de6:	89 ee       	ldi	r24, 0xE9	; 233
    3de8:	93 e0       	ldi	r25, 0x03	; 3
    3dea:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    uint8_t scan = 100;
    while (scan--) { matrix_scan(); wait_ms(10); }
    3dee:	c5 e6       	ldi	r28, 0x65	; 101
    3df0:	c1 50       	subi	r28, 0x01	; 1
    3df2:	49 f0       	breq	.+18     	; 0x3e06 <bootmagic+0x2e>
    3df4:	0e 94 fd 06 	call	0xdfa	; 0xdfa <matrix_scan>
    3df8:	8f e3       	ldi	r24, 0x3F	; 63
    3dfa:	9c e9       	ldi	r25, 0x9C	; 156
    3dfc:	01 97       	sbiw	r24, 0x01	; 1
    3dfe:	f1 f7       	brne	.-4      	; 0x3dfc <bootmagic+0x24>
    3e00:	00 c0       	rjmp	.+0      	; 0x3e02 <bootmagic+0x2a>
    3e02:	00 00       	nop
    3e04:	f5 cf       	rjmp	.-22     	; 0x3df0 <bootmagic+0x18>
    print("done.\n");
    3e06:	82 ee       	ldi	r24, 0xE2	; 226
    3e08:	93 e0       	ldi	r25, 0x03	; 3
    3e0a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>

    /* bootmagic skip */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SKIP)) {
    3e0e:	89 e2       	ldi	r24, 0x29	; 41
    3e10:	90 e0       	ldi	r25, 0x00	; 0
    3e12:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e16:	81 11       	cpse	r24, r1
    3e18:	24 c1       	rjmp	.+584    	; 0x4062 <bootmagic+0x28a>
        return;
    }

    /* eeconfig clear */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_EEPROM_CLEAR)) {
    3e1a:	8a e2       	ldi	r24, 0x2A	; 42
    3e1c:	90 e0       	ldi	r25, 0x00	; 0
    3e1e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e22:	81 11       	cpse	r24, r1
        eeconfig_init();
    3e24:	0e 94 33 20 	call	0x4066	; 0x4066 <eeconfig_init>
    }

    /* bootloader */
    if (bootmagic_scan_key(BOOTMAGIC_KEY_BOOTLOADER)) {
    3e28:	85 e0       	ldi	r24, 0x05	; 5
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e30:	81 11       	cpse	r24, r1
        bootloader_jump();
    3e32:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <bootloader_jump>
    }

    /* user-defined checks */
    hook_bootmagic();
    3e36:	0e 94 5e 1c 	call	0x38bc	; 0x38bc <hook_bootmagic>

    /* debug enable */
    debug_config.raw = eeconfig_read_debug();
    3e3a:	0e 94 58 20 	call	0x40b0	; 0x40b0 <eeconfig_read_debug>
    3e3e:	80 93 b7 01 	sts	0x01B7, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_ENABLE)) {
    3e42:	87 e0       	ldi	r24, 0x07	; 7
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e4a:	88 23       	and	r24, r24
    3e4c:	c1 f1       	breq	.+112    	; 0x3ebe <bootmagic+0xe6>
        if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MATRIX)) {
    3e4e:	8b e1       	ldi	r24, 0x1B	; 27
    3e50:	90 e0       	ldi	r25, 0x00	; 0
    3e52:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e56:	88 23       	and	r24, r24
    3e58:	51 f0       	breq	.+20     	; 0x3e6e <bootmagic+0x96>
            debug_config.matrix = !debug_config.matrix;
    3e5a:	80 91 b7 01 	lds	r24, 0x01B7
    3e5e:	81 fb       	bst	r24, 1
    3e60:	22 27       	eor	r18, r18
    3e62:	20 f9       	bld	r18, 0
    3e64:	91 e0       	ldi	r25, 0x01	; 1
    3e66:	92 27       	eor	r25, r18
    3e68:	90 fb       	bst	r25, 0
    3e6a:	81 f9       	bld	r24, 1
    3e6c:	0f c0       	rjmp	.+30     	; 0x3e8c <bootmagic+0xb4>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_KEYBOARD)) {
    3e6e:	8e e0       	ldi	r24, 0x0E	; 14
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e76:	88 23       	and	r24, r24
    3e78:	61 f0       	breq	.+24     	; 0x3e92 <bootmagic+0xba>
            debug_config.keyboard = !debug_config.keyboard;
    3e7a:	80 91 b7 01 	lds	r24, 0x01B7
    3e7e:	82 fb       	bst	r24, 2
    3e80:	22 27       	eor	r18, r18
    3e82:	20 f9       	bld	r18, 0
    3e84:	91 e0       	ldi	r25, 0x01	; 1
    3e86:	92 27       	eor	r25, r18
    3e88:	90 fb       	bst	r25, 0
    3e8a:	82 f9       	bld	r24, 2
    3e8c:	80 93 b7 01 	sts	0x01B7, r24
    3e90:	16 c0       	rjmp	.+44     	; 0x3ebe <bootmagic+0xe6>
        } else if (bootmagic_scan_key(BOOTMAGIC_KEY_DEBUG_MOUSE)) {
    3e92:	80 e1       	ldi	r24, 0x10	; 16
    3e94:	90 e0       	ldi	r25, 0x00	; 0
    3e96:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3e9a:	90 91 b7 01 	lds	r25, 0x01B7
    3e9e:	88 23       	and	r24, r24
    3ea0:	41 f0       	breq	.+16     	; 0x3eb2 <bootmagic+0xda>
            debug_config.mouse = !debug_config.mouse;
    3ea2:	93 fb       	bst	r25, 3
    3ea4:	22 27       	eor	r18, r18
    3ea6:	20 f9       	bld	r18, 0
    3ea8:	81 e0       	ldi	r24, 0x01	; 1
    3eaa:	82 27       	eor	r24, r18
    3eac:	80 fb       	bst	r24, 0
    3eae:	93 f9       	bld	r25, 3
    3eb0:	04 c0       	rjmp	.+8      	; 0x3eba <bootmagic+0xe2>
        } else {
            debug_config.enable = !debug_config.enable;
    3eb2:	89 2f       	mov	r24, r25
    3eb4:	80 95       	com	r24
    3eb6:	80 fb       	bst	r24, 0
    3eb8:	90 f9       	bld	r25, 0
    3eba:	90 93 b7 01 	sts	0x01B7, r25
        }
    }
    eeconfig_write_debug(debug_config.raw);
    3ebe:	80 91 b7 01 	lds	r24, 0x01B7
    3ec2:	0e 94 5c 20 	call	0x40b8	; 0x40b8 <eeconfig_write_debug>

    /* keymap config */
    keymap_config.raw = eeconfig_read_keymap();
    3ec6:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <eeconfig_read_keymap>
    3eca:	80 93 d5 01 	sts	0x01D5, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_CONTROL_CAPSLOCK)) {
    3ece:	80 ee       	ldi	r24, 0xE0	; 224
    3ed0:	90 e0       	ldi	r25, 0x00	; 0
    3ed2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3ed6:	88 23       	and	r24, r24
    3ed8:	41 f0       	breq	.+16     	; 0x3eea <bootmagic+0x112>
        keymap_config.swap_control_capslock = !keymap_config.swap_control_capslock;
    3eda:	80 91 d5 01 	lds	r24, 0x01D5
    3ede:	98 2f       	mov	r25, r24
    3ee0:	90 95       	com	r25
    3ee2:	90 fb       	bst	r25, 0
    3ee4:	80 f9       	bld	r24, 0
    3ee6:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_CAPSLOCK_TO_CONTROL)) {
    3eea:	89 e3       	ldi	r24, 0x39	; 57
    3eec:	90 e0       	ldi	r25, 0x00	; 0
    3eee:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3ef2:	88 23       	and	r24, r24
    3ef4:	59 f0       	breq	.+22     	; 0x3f0c <bootmagic+0x134>
        keymap_config.capslock_to_control = !keymap_config.capslock_to_control;
    3ef6:	80 91 d5 01 	lds	r24, 0x01D5
    3efa:	81 fb       	bst	r24, 1
    3efc:	22 27       	eor	r18, r18
    3efe:	20 f9       	bld	r18, 0
    3f00:	91 e0       	ldi	r25, 0x01	; 1
    3f02:	92 27       	eor	r25, r18
    3f04:	90 fb       	bst	r25, 0
    3f06:	81 f9       	bld	r24, 1
    3f08:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_LALT_LGUI)) {
    3f0c:	82 ee       	ldi	r24, 0xE2	; 226
    3f0e:	90 e0       	ldi	r25, 0x00	; 0
    3f10:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3f14:	88 23       	and	r24, r24
    3f16:	59 f0       	breq	.+22     	; 0x3f2e <bootmagic+0x156>
        keymap_config.swap_lalt_lgui = !keymap_config.swap_lalt_lgui;
    3f18:	80 91 d5 01 	lds	r24, 0x01D5
    3f1c:	82 fb       	bst	r24, 2
    3f1e:	22 27       	eor	r18, r18
    3f20:	20 f9       	bld	r18, 0
    3f22:	91 e0       	ldi	r25, 0x01	; 1
    3f24:	92 27       	eor	r25, r18
    3f26:	90 fb       	bst	r25, 0
    3f28:	82 f9       	bld	r24, 2
    3f2a:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_RALT_RGUI)) {
    3f2e:	86 ee       	ldi	r24, 0xE6	; 230
    3f30:	90 e0       	ldi	r25, 0x00	; 0
    3f32:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3f36:	88 23       	and	r24, r24
    3f38:	59 f0       	breq	.+22     	; 0x3f50 <bootmagic+0x178>
        keymap_config.swap_ralt_rgui = !keymap_config.swap_ralt_rgui;
    3f3a:	80 91 d5 01 	lds	r24, 0x01D5
    3f3e:	83 fb       	bst	r24, 3
    3f40:	22 27       	eor	r18, r18
    3f42:	20 f9       	bld	r18, 0
    3f44:	91 e0       	ldi	r25, 0x01	; 1
    3f46:	92 27       	eor	r25, r18
    3f48:	90 fb       	bst	r25, 0
    3f4a:	83 f9       	bld	r24, 3
    3f4c:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_NO_GUI)) {
    3f50:	83 ee       	ldi	r24, 0xE3	; 227
    3f52:	90 e0       	ldi	r25, 0x00	; 0
    3f54:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3f58:	88 23       	and	r24, r24
    3f5a:	59 f0       	breq	.+22     	; 0x3f72 <bootmagic+0x19a>
        keymap_config.no_gui = !keymap_config.no_gui;
    3f5c:	80 91 d5 01 	lds	r24, 0x01D5
    3f60:	84 fb       	bst	r24, 4
    3f62:	22 27       	eor	r18, r18
    3f64:	20 f9       	bld	r18, 0
    3f66:	91 e0       	ldi	r25, 0x01	; 1
    3f68:	92 27       	eor	r25, r18
    3f6a:	90 fb       	bst	r25, 0
    3f6c:	84 f9       	bld	r24, 4
    3f6e:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_GRAVE_ESC)) {
    3f72:	85 e3       	ldi	r24, 0x35	; 53
    3f74:	90 e0       	ldi	r25, 0x00	; 0
    3f76:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3f7a:	88 23       	and	r24, r24
    3f7c:	59 f0       	breq	.+22     	; 0x3f94 <bootmagic+0x1bc>
        keymap_config.swap_grave_esc = !keymap_config.swap_grave_esc;
    3f7e:	80 91 d5 01 	lds	r24, 0x01D5
    3f82:	85 fb       	bst	r24, 5
    3f84:	22 27       	eor	r18, r18
    3f86:	20 f9       	bld	r18, 0
    3f88:	91 e0       	ldi	r25, 0x01	; 1
    3f8a:	92 27       	eor	r25, r18
    3f8c:	90 fb       	bst	r25, 0
    3f8e:	85 f9       	bld	r24, 5
    3f90:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_KEY_SWAP_BACKSLASH_BACKSPACE)) {
    3f94:	81 e3       	ldi	r24, 0x31	; 49
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3f9c:	88 23       	and	r24, r24
    3f9e:	59 f0       	breq	.+22     	; 0x3fb6 <bootmagic+0x1de>
        keymap_config.swap_backslash_backspace = !keymap_config.swap_backslash_backspace;
    3fa0:	80 91 d5 01 	lds	r24, 0x01D5
    3fa4:	86 fb       	bst	r24, 6
    3fa6:	22 27       	eor	r18, r18
    3fa8:	20 f9       	bld	r18, 0
    3faa:	91 e0       	ldi	r25, 0x01	; 1
    3fac:	92 27       	eor	r25, r18
    3fae:	90 fb       	bst	r25, 0
    3fb0:	86 f9       	bld	r24, 6
    3fb2:	80 93 d5 01 	sts	0x01D5, r24
    }
    if (bootmagic_scan_key(BOOTMAGIC_HOST_NKRO)) {
    3fb6:	81 e1       	ldi	r24, 0x11	; 17
    3fb8:	90 e0       	ldi	r25, 0x00	; 0
    3fba:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3fbe:	88 23       	and	r24, r24
    3fc0:	59 f0       	breq	.+22     	; 0x3fd8 <bootmagic+0x200>
        keymap_config.nkro = !keymap_config.nkro;
    3fc2:	80 91 d5 01 	lds	r24, 0x01D5
    3fc6:	87 fb       	bst	r24, 7
    3fc8:	22 27       	eor	r18, r18
    3fca:	20 f9       	bld	r18, 0
    3fcc:	91 e0       	ldi	r25, 0x01	; 1
    3fce:	92 27       	eor	r25, r18
    3fd0:	90 fb       	bst	r25, 0
    3fd2:	87 f9       	bld	r24, 7
    3fd4:	80 93 d5 01 	sts	0x01D5, r24
    }
    eeconfig_write_keymap(keymap_config.raw);
    3fd8:	80 91 d5 01 	lds	r24, 0x01D5
    3fdc:	0e 94 6e 20 	call	0x40dc	; 0x40dc <eeconfig_write_keymap>
    keyboard_nkro = keymap_config.nkro;
#endif

    /* default layer */
    uint8_t default_layer = 0;
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_0)) { default_layer |= (1<<0); }
    3fe0:	87 e2       	ldi	r24, 0x27	; 39
    3fe2:	90 e0       	ldi	r25, 0x00	; 0
    3fe4:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3fe8:	c8 2f       	mov	r28, r24
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_1)) { default_layer |= (1<<1); }
    3fea:	8e e1       	ldi	r24, 0x1E	; 30
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3ff2:	81 11       	cpse	r24, r1
    3ff4:	c2 60       	ori	r28, 0x02	; 2
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_2)) { default_layer |= (1<<2); }
    3ff6:	8f e1       	ldi	r24, 0x1F	; 31
    3ff8:	90 e0       	ldi	r25, 0x00	; 0
    3ffa:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    3ffe:	81 11       	cpse	r24, r1
    4000:	c4 60       	ori	r28, 0x04	; 4
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_3)) { default_layer |= (1<<3); }
    4002:	80 e2       	ldi	r24, 0x20	; 32
    4004:	90 e0       	ldi	r25, 0x00	; 0
    4006:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    400a:	81 11       	cpse	r24, r1
    400c:	c8 60       	ori	r28, 0x08	; 8
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_4)) { default_layer |= (1<<4); }
    400e:	81 e2       	ldi	r24, 0x21	; 33
    4010:	90 e0       	ldi	r25, 0x00	; 0
    4012:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    4016:	81 11       	cpse	r24, r1
    4018:	c0 61       	ori	r28, 0x10	; 16
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_5)) { default_layer |= (1<<5); }
    401a:	82 e2       	ldi	r24, 0x22	; 34
    401c:	90 e0       	ldi	r25, 0x00	; 0
    401e:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    4022:	81 11       	cpse	r24, r1
    4024:	c0 62       	ori	r28, 0x20	; 32
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_6)) { default_layer |= (1<<6); }
    4026:	83 e2       	ldi	r24, 0x23	; 35
    4028:	90 e0       	ldi	r25, 0x00	; 0
    402a:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    402e:	81 11       	cpse	r24, r1
    4030:	c0 64       	ori	r28, 0x40	; 64
    if (bootmagic_scan_key(BOOTMAGIC_KEY_DEFAULT_LAYER_7)) { default_layer |= (1<<7); }
    4032:	84 e2       	ldi	r24, 0x24	; 36
    4034:	90 e0       	ldi	r25, 0x00	; 0
    4036:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <bootmagic_scan_key>
    403a:	88 23       	and	r24, r24
    403c:	11 f0       	breq	.+4      	; 0x4042 <bootmagic+0x26a>
    403e:	c0 68       	ori	r28, 0x80	; 128
    4040:	02 c0       	rjmp	.+4      	; 0x4046 <bootmagic+0x26e>
    if (default_layer) {
    4042:	cc 23       	and	r28, r28
    4044:	29 f0       	breq	.+10     	; 0x4050 <bootmagic+0x278>
        eeconfig_write_default_layer(default_layer);
    4046:	8c 2f       	mov	r24, r28
    4048:	0e 94 65 20 	call	0x40ca	; 0x40ca <eeconfig_write_default_layer>
        default_layer_set((uint32_t)default_layer);
    404c:	6c 2f       	mov	r22, r28
    404e:	03 c0       	rjmp	.+6      	; 0x4056 <bootmagic+0x27e>
    } else {
        default_layer = eeconfig_read_default_layer();
    4050:	0e 94 61 20 	call	0x40c2	; 0x40c2 <eeconfig_read_default_layer>
        default_layer_set((uint32_t)default_layer);
    4054:	68 2f       	mov	r22, r24
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	80 e0       	ldi	r24, 0x00	; 0
    405a:	90 e0       	ldi	r25, 0x00	; 0
    }
}
    405c:	cf 91       	pop	r28
    if (default_layer) {
        eeconfig_write_default_layer(default_layer);
        default_layer_set((uint32_t)default_layer);
    } else {
        default_layer = eeconfig_read_default_layer();
        default_layer_set((uint32_t)default_layer);
    405e:	0c 94 45 1a 	jmp	0x348a	; 0x348a <default_layer_set>
    }
}
    4062:	cf 91       	pop	r28
    4064:	08 95       	ret

00004066 <eeconfig_init>:
#include <avr/eeprom.h>
#include "eeconfig.h"

void eeconfig_init(void)
{
    eeprom_write_word(EECONFIG_MAGIC,          EECONFIG_MAGIC_NUMBER);
    4066:	6d ee       	ldi	r22, 0xED	; 237
    4068:	7e ef       	ldi	r23, 0xFE	; 254
    406a:	80 e0       	ldi	r24, 0x00	; 0
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	0e 94 aa 29 	call	0x5354	; 0x5354 <eeprom_write_word>
    eeprom_write_byte(EECONFIG_DEBUG,          0);
    4072:	60 e0       	ldi	r22, 0x00	; 0
    4074:	82 e0       	ldi	r24, 0x02	; 2
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 9c 29 	call	0x5338	; 0x5338 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_DEFAULT_LAYER,  0);
    407c:	60 e0       	ldi	r22, 0x00	; 0
    407e:	83 e0       	ldi	r24, 0x03	; 3
    4080:	90 e0       	ldi	r25, 0x00	; 0
    4082:	0e 94 9c 29 	call	0x5338	; 0x5338 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_KEYMAP,         0);
    4086:	60 e0       	ldi	r22, 0x00	; 0
    4088:	84 e0       	ldi	r24, 0x04	; 4
    408a:	90 e0       	ldi	r25, 0x00	; 0
    408c:	0e 94 9c 29 	call	0x5338	; 0x5338 <eeprom_write_byte>
    eeprom_write_byte(EECONFIG_MOUSEKEY_ACCEL, 0);
    4090:	60 e0       	ldi	r22, 0x00	; 0
    4092:	85 e0       	ldi	r24, 0x05	; 5
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <eeprom_write_byte>

0000409a <eeconfig_is_enabled>:
    eeprom_write_word(EECONFIG_MAGIC, 0xFFFF);
}

bool eeconfig_is_enabled(void)
{
    return (eeprom_read_word(EECONFIG_MAGIC) == EECONFIG_MAGIC_NUMBER);
    409a:	80 e0       	ldi	r24, 0x00	; 0
    409c:	90 e0       	ldi	r25, 0x00	; 0
    409e:	0e 94 96 29 	call	0x532c	; 0x532c <eeprom_read_word>
    40a2:	21 e0       	ldi	r18, 0x01	; 1
    40a4:	8d 3e       	cpi	r24, 0xED	; 237
    40a6:	9e 4f       	sbci	r25, 0xFE	; 254
    40a8:	09 f0       	breq	.+2      	; 0x40ac <eeconfig_is_enabled+0x12>
    40aa:	20 e0       	ldi	r18, 0x00	; 0
}
    40ac:	82 2f       	mov	r24, r18
    40ae:	08 95       	ret

000040b0 <eeconfig_read_debug>:

uint8_t eeconfig_read_debug(void)      { return eeprom_read_byte(EECONFIG_DEBUG); }
    40b0:	82 e0       	ldi	r24, 0x02	; 2
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0c 94 8e 29 	jmp	0x531c	; 0x531c <eeprom_read_byte>

000040b8 <eeconfig_write_debug>:
void eeconfig_write_debug(uint8_t val) { eeprom_write_byte(EECONFIG_DEBUG, val); }
    40b8:	68 2f       	mov	r22, r24
    40ba:	82 e0       	ldi	r24, 0x02	; 2
    40bc:	90 e0       	ldi	r25, 0x00	; 0
    40be:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <eeprom_write_byte>

000040c2 <eeconfig_read_default_layer>:

uint8_t eeconfig_read_default_layer(void)      { return eeprom_read_byte(EECONFIG_DEFAULT_LAYER); }
    40c2:	83 e0       	ldi	r24, 0x03	; 3
    40c4:	90 e0       	ldi	r25, 0x00	; 0
    40c6:	0c 94 8e 29 	jmp	0x531c	; 0x531c <eeprom_read_byte>

000040ca <eeconfig_write_default_layer>:
void eeconfig_write_default_layer(uint8_t val) { eeprom_write_byte(EECONFIG_DEFAULT_LAYER, val); }
    40ca:	68 2f       	mov	r22, r24
    40cc:	83 e0       	ldi	r24, 0x03	; 3
    40ce:	90 e0       	ldi	r25, 0x00	; 0
    40d0:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <eeprom_write_byte>

000040d4 <eeconfig_read_keymap>:

uint8_t eeconfig_read_keymap(void)      { return eeprom_read_byte(EECONFIG_KEYMAP); }
    40d4:	84 e0       	ldi	r24, 0x04	; 4
    40d6:	90 e0       	ldi	r25, 0x00	; 0
    40d8:	0c 94 8e 29 	jmp	0x531c	; 0x531c <eeprom_read_byte>

000040dc <eeconfig_write_keymap>:
void eeconfig_write_keymap(uint8_t val) { eeprom_write_byte(EECONFIG_KEYMAP, val); }
    40dc:	68 2f       	mov	r22, r24
    40de:	84 e0       	ldi	r24, 0x04	; 4
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <eeprom_write_byte>

000040e6 <move_unit>:


static uint8_t move_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    40e6:	80 91 bf 01 	lds	r24, 0x01BF
    40ea:	80 ff       	sbrs	r24, 0
    40ec:	0b c0       	rjmp	.+22     	; 0x4104 <move_unit+0x1e>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/4;
    40ee:	60 91 11 01 	lds	r22, 0x0111
    40f2:	85 e0       	ldi	r24, 0x05	; 5
    40f4:	68 9f       	mul	r22, r24
    40f6:	b0 01       	movw	r22, r0
    40f8:	11 24       	eor	r1, r1
    40fa:	75 95       	asr	r23
    40fc:	67 95       	ror	r22
    40fe:	75 95       	asr	r23
    4100:	67 95       	ror	r22
    4102:	2b c0       	rjmp	.+86     	; 0x415a <move_unit+0x74>
    } else if (mousekey_accel & (1<<1)) {
    4104:	81 ff       	sbrs	r24, 1
    4106:	09 c0       	rjmp	.+18     	; 0x411a <move_unit+0x34>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    4108:	60 91 11 01 	lds	r22, 0x0111
    410c:	85 e0       	ldi	r24, 0x05	; 5
    410e:	68 9f       	mul	r22, r24
    4110:	b0 01       	movw	r22, r0
    4112:	11 24       	eor	r1, r1
    4114:	75 95       	asr	r23
    4116:	67 95       	ror	r22
    4118:	20 c0       	rjmp	.+64     	; 0x415a <move_unit+0x74>
    } else if (mousekey_accel & (1<<2)) {
    411a:	82 ff       	sbrs	r24, 2
    411c:	07 c0       	rjmp	.+14     	; 0x412c <move_unit+0x46>
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    411e:	60 91 11 01 	lds	r22, 0x0111
    4122:	85 e0       	ldi	r24, 0x05	; 5
    4124:	68 9f       	mul	r22, r24
    4126:	b0 01       	movw	r22, r0
    4128:	11 24       	eor	r1, r1
    412a:	17 c0       	rjmp	.+46     	; 0x415a <move_unit+0x74>
    } else if (mousekey_repeat == 0) {
    412c:	90 91 c0 01 	lds	r25, 0x01C0
    4130:	99 23       	and	r25, r25
    4132:	d1 f0       	breq	.+52     	; 0x4168 <move_unit+0x82>
        unit = MOUSEKEY_MOVE_DELTA;
    } else if (mousekey_repeat >= mk_time_to_max) {
    4134:	60 91 10 01 	lds	r22, 0x0110
    4138:	96 17       	cp	r25, r22
    413a:	88 f7       	brcc	.-30     	; 0x411e <move_unit+0x38>
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    413c:	20 91 11 01 	lds	r18, 0x0111
    4140:	85 e0       	ldi	r24, 0x05	; 5
    4142:	28 9f       	mul	r18, r24
    4144:	90 01       	movw	r18, r0
    4146:	11 24       	eor	r1, r1
    4148:	92 9f       	mul	r25, r18
    414a:	a0 01       	movw	r20, r0
    414c:	93 9f       	mul	r25, r19
    414e:	50 0d       	add	r21, r0
    4150:	11 24       	eor	r1, r1
    4152:	70 e0       	ldi	r23, 0x00	; 0
    4154:	ca 01       	movw	r24, r20
    4156:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__divmodhi4>
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    415a:	60 38       	cpi	r22, 0x80	; 128
    415c:	71 05       	cpc	r23, r1
    415e:	40 f4       	brcc	.+16     	; 0x4170 <move_unit+0x8a>
    4160:	61 15       	cp	r22, r1
    4162:	71 05       	cpc	r23, r1
    4164:	39 f0       	breq	.+14     	; 0x4174 <move_unit+0x8e>
    4166:	02 c0       	rjmp	.+4      	; 0x416c <move_unit+0x86>
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_MOVE_DELTA;
    4168:	65 e0       	ldi	r22, 0x05	; 5
    416a:	70 e0       	ldi	r23, 0x00	; 0
    } else if (mousekey_repeat >= mk_time_to_max) {
        unit = MOUSEKEY_MOVE_DELTA * mk_max_speed;
    } else {
        unit = (MOUSEKEY_MOVE_DELTA * mk_max_speed * mousekey_repeat) / mk_time_to_max;
    }
    return (unit > MOUSEKEY_MOVE_MAX ? MOUSEKEY_MOVE_MAX : (unit == 0 ? 1 : unit));
    416c:	86 2f       	mov	r24, r22
    416e:	08 95       	ret
    4170:	8f e7       	ldi	r24, 0x7F	; 127
    4172:	08 95       	ret
    4174:	81 e0       	ldi	r24, 0x01	; 1
}
    4176:	08 95       	ret

00004178 <wheel_unit>:

static uint8_t wheel_unit(void)
{
    uint16_t unit;
    if (mousekey_accel & (1<<0)) {
    4178:	80 91 bf 01 	lds	r24, 0x01BF
    417c:	80 ff       	sbrs	r24, 0
    417e:	08 c0       	rjmp	.+16     	; 0x4190 <wheel_unit+0x18>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/4;
    4180:	60 91 0f 01 	lds	r22, 0x010F
    4184:	70 e0       	ldi	r23, 0x00	; 0
    4186:	75 95       	asr	r23
    4188:	67 95       	ror	r22
    418a:	75 95       	asr	r23
    418c:	67 95       	ror	r22
    418e:	21 c0       	rjmp	.+66     	; 0x41d2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<1)) {
    4190:	81 ff       	sbrs	r24, 1
    4192:	06 c0       	rjmp	.+12     	; 0x41a0 <wheel_unit+0x28>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    4194:	60 91 0f 01 	lds	r22, 0x010F
    4198:	70 e0       	ldi	r23, 0x00	; 0
    419a:	75 95       	asr	r23
    419c:	67 95       	ror	r22
    419e:	19 c0       	rjmp	.+50     	; 0x41d2 <wheel_unit+0x5a>
    } else if (mousekey_accel & (1<<2)) {
    41a0:	82 ff       	sbrs	r24, 2
    41a2:	04 c0       	rjmp	.+8      	; 0x41ac <wheel_unit+0x34>
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    41a4:	60 91 0f 01 	lds	r22, 0x010F
    41a8:	70 e0       	ldi	r23, 0x00	; 0
    41aa:	10 c0       	rjmp	.+32     	; 0x41cc <wheel_unit+0x54>
    } else if (mousekey_repeat == 0) {
    41ac:	90 91 c0 01 	lds	r25, 0x01C0
    41b0:	99 23       	and	r25, r25
    41b2:	c1 f0       	breq	.+48     	; 0x41e4 <wheel_unit+0x6c>
        unit = MOUSEKEY_WHEEL_DELTA;
    } else if (mousekey_repeat >= mk_wheel_time_to_max) {
    41b4:	60 91 0e 01 	lds	r22, 0x010E
    41b8:	96 17       	cp	r25, r22
    41ba:	a0 f7       	brcc	.-24     	; 0x41a4 <wheel_unit+0x2c>
        unit = MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed;
    } else {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed * mousekey_repeat) / mk_wheel_time_to_max;
    41bc:	80 91 0f 01 	lds	r24, 0x010F
    41c0:	89 9f       	mul	r24, r25
    41c2:	c0 01       	movw	r24, r0
    41c4:	11 24       	eor	r1, r1
    41c6:	70 e0       	ldi	r23, 0x00	; 0
    41c8:	0e 94 60 29 	call	0x52c0	; 0x52c0 <__divmodhi4>
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
    41cc:	60 38       	cpi	r22, 0x80	; 128
    41ce:	71 05       	cpc	r23, r1
    41d0:	28 f4       	brcc	.+10     	; 0x41dc <wheel_unit+0x64>
    41d2:	61 15       	cp	r22, r1
    41d4:	71 05       	cpc	r23, r1
    41d6:	21 f0       	breq	.+8      	; 0x41e0 <wheel_unit+0x68>
    41d8:	86 2f       	mov	r24, r22
    41da:	08 95       	ret
    41dc:	8f e7       	ldi	r24, 0x7F	; 127
    41de:	08 95       	ret
    41e0:	81 e0       	ldi	r24, 0x01	; 1
    41e2:	08 95       	ret
    } else if (mousekey_accel & (1<<1)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed)/2;
    } else if (mousekey_accel & (1<<2)) {
        unit = (MOUSEKEY_WHEEL_DELTA * mk_wheel_max_speed);
    } else if (mousekey_repeat == 0) {
        unit = MOUSEKEY_WHEEL_DELTA;
    41e4:	61 e0       	ldi	r22, 0x01	; 1
    41e6:	70 e0       	ldi	r23, 0x00	; 0
    41e8:	f4 cf       	rjmp	.-24     	; 0x41d2 <wheel_unit+0x5a>

000041ea <mousekey_on>:
    mousekey_send();
}

void mousekey_on(uint8_t code)
{
    if      (code == KC_MS_UP)       mouse_report.y = move_unit() * -1;
    41ea:	80 3f       	cpi	r24, 0xF0	; 240
    41ec:	21 f4       	brne	.+8      	; 0x41f6 <mousekey_on+0xc>
    41ee:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    41f2:	81 95       	neg	r24
    41f4:	04 c0       	rjmp	.+8      	; 0x41fe <mousekey_on+0x14>
    else if (code == KC_MS_DOWN)     mouse_report.y = move_unit();
    41f6:	81 3f       	cpi	r24, 0xF1	; 241
    41f8:	29 f4       	brne	.+10     	; 0x4204 <mousekey_on+0x1a>
    41fa:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    41fe:	80 93 c3 01 	sts	0x01C3, r24
    4202:	08 95       	ret
    else if (code == KC_MS_LEFT)     mouse_report.x = move_unit() * -1;
    4204:	82 3f       	cpi	r24, 0xF2	; 242
    4206:	21 f4       	brne	.+8      	; 0x4210 <mousekey_on+0x26>
    4208:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    420c:	81 95       	neg	r24
    420e:	04 c0       	rjmp	.+8      	; 0x4218 <mousekey_on+0x2e>
    else if (code == KC_MS_RIGHT)    mouse_report.x = move_unit();
    4210:	83 3f       	cpi	r24, 0xF3	; 243
    4212:	29 f4       	brne	.+10     	; 0x421e <mousekey_on+0x34>
    4214:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    4218:	80 93 c2 01 	sts	0x01C2, r24
    421c:	08 95       	ret
    else if (code == KC_MS_WH_UP)    mouse_report.v = wheel_unit();
    421e:	89 3f       	cpi	r24, 0xF9	; 249
    4220:	19 f4       	brne	.+6      	; 0x4228 <mousekey_on+0x3e>
    4222:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    4226:	05 c0       	rjmp	.+10     	; 0x4232 <mousekey_on+0x48>
    else if (code == KC_MS_WH_DOWN)  mouse_report.v = wheel_unit() * -1;
    4228:	8a 3f       	cpi	r24, 0xFA	; 250
    422a:	31 f4       	brne	.+12     	; 0x4238 <mousekey_on+0x4e>
    422c:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    4230:	81 95       	neg	r24
    4232:	80 93 c4 01 	sts	0x01C4, r24
    4236:	08 95       	ret
    else if (code == KC_MS_WH_LEFT)  mouse_report.h = wheel_unit() * -1;
    4238:	8b 3f       	cpi	r24, 0xFB	; 251
    423a:	21 f4       	brne	.+8      	; 0x4244 <mousekey_on+0x5a>
    423c:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    4240:	81 95       	neg	r24
    4242:	04 c0       	rjmp	.+8      	; 0x424c <mousekey_on+0x62>
    else if (code == KC_MS_WH_RIGHT) mouse_report.h = wheel_unit();
    4244:	8c 3f       	cpi	r24, 0xFC	; 252
    4246:	29 f4       	brne	.+10     	; 0x4252 <mousekey_on+0x68>
    4248:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    424c:	80 93 c5 01 	sts	0x01C5, r24
    4250:	08 95       	ret
    else if (code == KC_MS_BTN1)     mouse_report.buttons |= MOUSE_BTN1;
    4252:	84 3f       	cpi	r24, 0xF4	; 244
    4254:	21 f4       	brne	.+8      	; 0x425e <mousekey_on+0x74>
    4256:	80 91 c1 01 	lds	r24, 0x01C1
    425a:	81 60       	ori	r24, 0x01	; 1
    425c:	17 c0       	rjmp	.+46     	; 0x428c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN2)     mouse_report.buttons |= MOUSE_BTN2;
    425e:	85 3f       	cpi	r24, 0xF5	; 245
    4260:	21 f4       	brne	.+8      	; 0x426a <mousekey_on+0x80>
    4262:	80 91 c1 01 	lds	r24, 0x01C1
    4266:	82 60       	ori	r24, 0x02	; 2
    4268:	11 c0       	rjmp	.+34     	; 0x428c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN3)     mouse_report.buttons |= MOUSE_BTN3;
    426a:	86 3f       	cpi	r24, 0xF6	; 246
    426c:	21 f4       	brne	.+8      	; 0x4276 <mousekey_on+0x8c>
    426e:	80 91 c1 01 	lds	r24, 0x01C1
    4272:	84 60       	ori	r24, 0x04	; 4
    4274:	0b c0       	rjmp	.+22     	; 0x428c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN4)     mouse_report.buttons |= MOUSE_BTN4;
    4276:	87 3f       	cpi	r24, 0xF7	; 247
    4278:	21 f4       	brne	.+8      	; 0x4282 <mousekey_on+0x98>
    427a:	80 91 c1 01 	lds	r24, 0x01C1
    427e:	88 60       	ori	r24, 0x08	; 8
    4280:	05 c0       	rjmp	.+10     	; 0x428c <mousekey_on+0xa2>
    else if (code == KC_MS_BTN5)     mouse_report.buttons |= MOUSE_BTN5;
    4282:	88 3f       	cpi	r24, 0xF8	; 248
    4284:	31 f4       	brne	.+12     	; 0x4292 <mousekey_on+0xa8>
    4286:	80 91 c1 01 	lds	r24, 0x01C1
    428a:	80 61       	ori	r24, 0x10	; 16
    428c:	80 93 c1 01 	sts	0x01C1, r24
    4290:	08 95       	ret
    else if (code == KC_MS_ACCEL0)   mousekey_accel |= (1<<0);
    4292:	8d 3f       	cpi	r24, 0xFD	; 253
    4294:	21 f4       	brne	.+8      	; 0x429e <mousekey_on+0xb4>
    4296:	80 91 bf 01 	lds	r24, 0x01BF
    429a:	81 60       	ori	r24, 0x01	; 1
    429c:	0b c0       	rjmp	.+22     	; 0x42b4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL1)   mousekey_accel |= (1<<1);
    429e:	8e 3f       	cpi	r24, 0xFE	; 254
    42a0:	21 f4       	brne	.+8      	; 0x42aa <mousekey_on+0xc0>
    42a2:	80 91 bf 01 	lds	r24, 0x01BF
    42a6:	82 60       	ori	r24, 0x02	; 2
    42a8:	05 c0       	rjmp	.+10     	; 0x42b4 <mousekey_on+0xca>
    else if (code == KC_MS_ACCEL2)   mousekey_accel |= (1<<2);
    42aa:	8f 3f       	cpi	r24, 0xFF	; 255
    42ac:	29 f4       	brne	.+10     	; 0x42b8 <mousekey_on+0xce>
    42ae:	80 91 bf 01 	lds	r24, 0x01BF
    42b2:	84 60       	ori	r24, 0x04	; 4
    42b4:	80 93 bf 01 	sts	0x01BF, r24
    42b8:	08 95       	ret

000042ba <mousekey_off>:
}

void mousekey_off(uint8_t code)
{
    if      (code == KC_MS_UP       && mouse_report.y < 0) mouse_report.y = 0;
    42ba:	80 3f       	cpi	r24, 0xF0	; 240
    42bc:	39 f4       	brne	.+14     	; 0x42cc <mousekey_off+0x12>
    42be:	80 91 c3 01 	lds	r24, 0x01C3
    42c2:	87 ff       	sbrs	r24, 7
    42c4:	6c c0       	rjmp	.+216    	; 0x439e <mousekey_off+0xe4>
    42c6:	10 92 c3 01 	sts	0x01C3, r1
    42ca:	69 c0       	rjmp	.+210    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_DOWN     && mouse_report.y > 0) mouse_report.y = 0;
    42cc:	81 3f       	cpi	r24, 0xF1	; 241
    42ce:	29 f4       	brne	.+10     	; 0x42da <mousekey_off+0x20>
    42d0:	80 91 c3 01 	lds	r24, 0x01C3
    42d4:	18 16       	cp	r1, r24
    42d6:	bc f3       	brlt	.-18     	; 0x42c6 <mousekey_off+0xc>
    42d8:	62 c0       	rjmp	.+196    	; 0x439e <mousekey_off+0xe4>
    42da:	90 91 c2 01 	lds	r25, 0x01C2
    else if (code == KC_MS_LEFT     && mouse_report.x < 0) mouse_report.x = 0;
    42de:	82 3f       	cpi	r24, 0xF2	; 242
    42e0:	29 f4       	brne	.+10     	; 0x42ec <mousekey_off+0x32>
    42e2:	97 ff       	sbrs	r25, 7
    42e4:	5c c0       	rjmp	.+184    	; 0x439e <mousekey_off+0xe4>
    42e6:	10 92 c2 01 	sts	0x01C2, r1
    42ea:	59 c0       	rjmp	.+178    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_RIGHT    && mouse_report.x > 0) mouse_report.x = 0;
    42ec:	83 3f       	cpi	r24, 0xF3	; 243
    42ee:	19 f4       	brne	.+6      	; 0x42f6 <mousekey_off+0x3c>
    42f0:	19 16       	cp	r1, r25
    42f2:	cc f3       	brlt	.-14     	; 0x42e6 <mousekey_off+0x2c>
    42f4:	54 c0       	rjmp	.+168    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_UP    && mouse_report.v > 0) mouse_report.v = 0;
    42f6:	89 3f       	cpi	r24, 0xF9	; 249
    42f8:	41 f4       	brne	.+16     	; 0x430a <mousekey_off+0x50>
    42fa:	80 91 c4 01 	lds	r24, 0x01C4
    42fe:	18 16       	cp	r1, r24
    4300:	0c f0       	brlt	.+2      	; 0x4304 <mousekey_off+0x4a>
    4302:	4d c0       	rjmp	.+154    	; 0x439e <mousekey_off+0xe4>
    4304:	10 92 c4 01 	sts	0x01C4, r1
    4308:	4a c0       	rjmp	.+148    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_DOWN  && mouse_report.v < 0) mouse_report.v = 0;
    430a:	8a 3f       	cpi	r24, 0xFA	; 250
    430c:	29 f4       	brne	.+10     	; 0x4318 <mousekey_off+0x5e>
    430e:	80 91 c4 01 	lds	r24, 0x01C4
    4312:	87 ff       	sbrs	r24, 7
    4314:	44 c0       	rjmp	.+136    	; 0x439e <mousekey_off+0xe4>
    4316:	f6 cf       	rjmp	.-20     	; 0x4304 <mousekey_off+0x4a>
    else if (code == KC_MS_WH_LEFT  && mouse_report.h < 0) mouse_report.h = 0;
    4318:	8b 3f       	cpi	r24, 0xFB	; 251
    431a:	39 f4       	brne	.+14     	; 0x432a <mousekey_off+0x70>
    431c:	80 91 c5 01 	lds	r24, 0x01C5
    4320:	87 ff       	sbrs	r24, 7
    4322:	3d c0       	rjmp	.+122    	; 0x439e <mousekey_off+0xe4>
    4324:	10 92 c5 01 	sts	0x01C5, r1
    4328:	3a c0       	rjmp	.+116    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_WH_RIGHT && mouse_report.h > 0) mouse_report.h = 0;
    432a:	8c 3f       	cpi	r24, 0xFC	; 252
    432c:	29 f4       	brne	.+10     	; 0x4338 <mousekey_off+0x7e>
    432e:	80 91 c5 01 	lds	r24, 0x01C5
    4332:	18 16       	cp	r1, r24
    4334:	bc f3       	brlt	.-18     	; 0x4324 <mousekey_off+0x6a>
    4336:	33 c0       	rjmp	.+102    	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_BTN1) mouse_report.buttons &= ~MOUSE_BTN1;
    4338:	84 3f       	cpi	r24, 0xF4	; 244
    433a:	21 f4       	brne	.+8      	; 0x4344 <mousekey_off+0x8a>
    433c:	80 91 c1 01 	lds	r24, 0x01C1
    4340:	8e 7f       	andi	r24, 0xFE	; 254
    4342:	17 c0       	rjmp	.+46     	; 0x4372 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN2) mouse_report.buttons &= ~MOUSE_BTN2;
    4344:	85 3f       	cpi	r24, 0xF5	; 245
    4346:	21 f4       	brne	.+8      	; 0x4350 <mousekey_off+0x96>
    4348:	80 91 c1 01 	lds	r24, 0x01C1
    434c:	8d 7f       	andi	r24, 0xFD	; 253
    434e:	11 c0       	rjmp	.+34     	; 0x4372 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN3) mouse_report.buttons &= ~MOUSE_BTN3;
    4350:	86 3f       	cpi	r24, 0xF6	; 246
    4352:	21 f4       	brne	.+8      	; 0x435c <mousekey_off+0xa2>
    4354:	80 91 c1 01 	lds	r24, 0x01C1
    4358:	8b 7f       	andi	r24, 0xFB	; 251
    435a:	0b c0       	rjmp	.+22     	; 0x4372 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN4) mouse_report.buttons &= ~MOUSE_BTN4;
    435c:	87 3f       	cpi	r24, 0xF7	; 247
    435e:	21 f4       	brne	.+8      	; 0x4368 <mousekey_off+0xae>
    4360:	80 91 c1 01 	lds	r24, 0x01C1
    4364:	87 7f       	andi	r24, 0xF7	; 247
    4366:	05 c0       	rjmp	.+10     	; 0x4372 <mousekey_off+0xb8>
    else if (code == KC_MS_BTN5) mouse_report.buttons &= ~MOUSE_BTN5;
    4368:	88 3f       	cpi	r24, 0xF8	; 248
    436a:	31 f4       	brne	.+12     	; 0x4378 <mousekey_off+0xbe>
    436c:	80 91 c1 01 	lds	r24, 0x01C1
    4370:	8f 7e       	andi	r24, 0xEF	; 239
    4372:	80 93 c1 01 	sts	0x01C1, r24
    4376:	13 c0       	rjmp	.+38     	; 0x439e <mousekey_off+0xe4>
    else if (code == KC_MS_ACCEL0) mousekey_accel &= ~(1<<0);
    4378:	8d 3f       	cpi	r24, 0xFD	; 253
    437a:	21 f4       	brne	.+8      	; 0x4384 <mousekey_off+0xca>
    437c:	80 91 bf 01 	lds	r24, 0x01BF
    4380:	8e 7f       	andi	r24, 0xFE	; 254
    4382:	0b c0       	rjmp	.+22     	; 0x439a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL1) mousekey_accel &= ~(1<<1);
    4384:	8e 3f       	cpi	r24, 0xFE	; 254
    4386:	21 f4       	brne	.+8      	; 0x4390 <mousekey_off+0xd6>
    4388:	80 91 bf 01 	lds	r24, 0x01BF
    438c:	8d 7f       	andi	r24, 0xFD	; 253
    438e:	05 c0       	rjmp	.+10     	; 0x439a <mousekey_off+0xe0>
    else if (code == KC_MS_ACCEL2) mousekey_accel &= ~(1<<2);
    4390:	8f 3f       	cpi	r24, 0xFF	; 255
    4392:	29 f4       	brne	.+10     	; 0x439e <mousekey_off+0xe4>
    4394:	80 91 bf 01 	lds	r24, 0x01BF
    4398:	8b 7f       	andi	r24, 0xFB	; 251
    439a:	80 93 bf 01 	sts	0x01BF, r24

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    439e:	80 91 c2 01 	lds	r24, 0x01C2
    43a2:	81 11       	cpse	r24, r1
    43a4:	0e c0       	rjmp	.+28     	; 0x43c2 <mousekey_off+0x108>
    43a6:	80 91 c3 01 	lds	r24, 0x01C3
    43aa:	81 11       	cpse	r24, r1
    43ac:	0a c0       	rjmp	.+20     	; 0x43c2 <mousekey_off+0x108>
    43ae:	80 91 c4 01 	lds	r24, 0x01C4
    43b2:	81 11       	cpse	r24, r1
    43b4:	06 c0       	rjmp	.+12     	; 0x43c2 <mousekey_off+0x108>
    43b6:	80 91 c5 01 	lds	r24, 0x01C5
    43ba:	81 11       	cpse	r24, r1
    43bc:	02 c0       	rjmp	.+4      	; 0x43c2 <mousekey_off+0x108>
        mousekey_repeat = 0;
    43be:	10 92 c0 01 	sts	0x01C0, r1
    43c2:	08 95       	ret

000043c4 <mousekey_send>:
    mousekey_accel = 0;
}

static void mousekey_debug(void)
{
    if (!debug_mouse) return;
    43c4:	80 91 b7 01 	lds	r24, 0x01B7
    43c8:	83 ff       	sbrs	r24, 3
    43ca:	7e c0       	rjmp	.+252    	; 0x44c8 <mousekey_send+0x104>
    print("mousekey [btn|x y v h](rep/acl): [");
    43cc:	85 e2       	ldi	r24, 0x25	; 37
    43ce:	94 e0       	ldi	r25, 0x04	; 4
    43d0:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    phex(mouse_report.buttons); print("|");
    43d4:	80 91 c1 01 	lds	r24, 0x01C1
    43d8:	1f 92       	push	r1
    43da:	8f 93       	push	r24
    43dc:	80 e2       	ldi	r24, 0x20	; 32
    43de:	94 e0       	ldi	r25, 0x04	; 4
    43e0:	9f 93       	push	r25
    43e2:	8f 93       	push	r24
    43e4:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    43e8:	8e e1       	ldi	r24, 0x1E	; 30
    43ea:	94 e0       	ldi	r25, 0x04	; 4
    43ec:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_decs(mouse_report.x); print(" ");
    43f0:	80 91 c2 01 	lds	r24, 0x01C2
    43f4:	28 2f       	mov	r18, r24
    43f6:	08 2e       	mov	r0, r24
    43f8:	00 0c       	add	r0, r0
    43fa:	33 0b       	sbc	r19, r19
    43fc:	3f 93       	push	r19
    43fe:	8f 93       	push	r24
    4400:	8b e1       	ldi	r24, 0x1B	; 27
    4402:	94 e0       	ldi	r25, 0x04	; 4
    4404:	9f 93       	push	r25
    4406:	8f 93       	push	r24
    4408:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    440c:	89 e1       	ldi	r24, 0x19	; 25
    440e:	94 e0       	ldi	r25, 0x04	; 4
    4410:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_decs(mouse_report.y); print(" ");
    4414:	80 91 c3 01 	lds	r24, 0x01C3
    4418:	28 2f       	mov	r18, r24
    441a:	08 2e       	mov	r0, r24
    441c:	00 0c       	add	r0, r0
    441e:	33 0b       	sbc	r19, r19
    4420:	3f 93       	push	r19
    4422:	8f 93       	push	r24
    4424:	86 e1       	ldi	r24, 0x16	; 22
    4426:	94 e0       	ldi	r25, 0x04	; 4
    4428:	9f 93       	push	r25
    442a:	8f 93       	push	r24
    442c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4430:	84 e1       	ldi	r24, 0x14	; 20
    4432:	94 e0       	ldi	r25, 0x04	; 4
    4434:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_decs(mouse_report.v); print(" ");
    4438:	80 91 c4 01 	lds	r24, 0x01C4
    443c:	28 2f       	mov	r18, r24
    443e:	08 2e       	mov	r0, r24
    4440:	00 0c       	add	r0, r0
    4442:	33 0b       	sbc	r19, r19
    4444:	3f 93       	push	r19
    4446:	8f 93       	push	r24
    4448:	81 e1       	ldi	r24, 0x11	; 17
    444a:	94 e0       	ldi	r25, 0x04	; 4
    444c:	9f 93       	push	r25
    444e:	8f 93       	push	r24
    4450:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4454:	8f e0       	ldi	r24, 0x0F	; 15
    4456:	94 e0       	ldi	r25, 0x04	; 4
    4458:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_decs(mouse_report.h); print("](");
    445c:	80 91 c5 01 	lds	r24, 0x01C5
    4460:	28 2f       	mov	r18, r24
    4462:	08 2e       	mov	r0, r24
    4464:	00 0c       	add	r0, r0
    4466:	33 0b       	sbc	r19, r19
    4468:	3f 93       	push	r19
    446a:	8f 93       	push	r24
    446c:	8c e0       	ldi	r24, 0x0C	; 12
    446e:	94 e0       	ldi	r25, 0x04	; 4
    4470:	9f 93       	push	r25
    4472:	8f 93       	push	r24
    4474:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4478:	89 e0       	ldi	r24, 0x09	; 9
    447a:	94 e0       	ldi	r25, 0x04	; 4
    447c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_dec(mousekey_repeat); print("/");
    4480:	80 91 c0 01 	lds	r24, 0x01C0
    4484:	1f 92       	push	r1
    4486:	8f 93       	push	r24
    4488:	86 e0       	ldi	r24, 0x06	; 6
    448a:	94 e0       	ldi	r25, 0x04	; 4
    448c:	9f 93       	push	r25
    448e:	8f 93       	push	r24
    4490:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4494:	84 e0       	ldi	r24, 0x04	; 4
    4496:	94 e0       	ldi	r25, 0x04	; 4
    4498:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print_dec(mousekey_accel); print(")\n");
    449c:	80 91 bf 01 	lds	r24, 0x01BF
    44a0:	1f 92       	push	r1
    44a2:	8f 93       	push	r24
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	94 e0       	ldi	r25, 0x04	; 4
    44a8:	9f 93       	push	r25
    44aa:	8f 93       	push	r24
    44ac:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    44b0:	8e ef       	ldi	r24, 0xFE	; 254
    44b2:	93 e0       	ldi	r25, 0x03	; 3
    44b4:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    44b8:	8d b7       	in	r24, 0x3d	; 61
    44ba:	9e b7       	in	r25, 0x3e	; 62
    44bc:	4c 96       	adiw	r24, 0x1c	; 28
    44be:	0f b6       	in	r0, 0x3f	; 63
    44c0:	f8 94       	cli
    44c2:	9e bf       	out	0x3e, r25	; 62
    44c4:	0f be       	out	0x3f, r0	; 63
    44c6:	8d bf       	out	0x3d, r24	; 61
}

void mousekey_send(void)
{
    mousekey_debug();
    host_mouse_send(&mouse_report);
    44c8:	81 ec       	ldi	r24, 0xC1	; 193
    44ca:	91 e0       	ldi	r25, 0x01	; 1
    44cc:	0e 94 b4 10 	call	0x2168	; 0x2168 <host_mouse_send>
    last_timer = timer_read();
    44d0:	0e 94 d3 1c 	call	0x39a6	; 0x39a6 <timer_read>
    44d4:	90 93 be 01 	sts	0x01BE, r25
    44d8:	80 93 bd 01 	sts	0x01BD, r24
    44dc:	08 95       	ret

000044de <mousekey_task>:
    }
    return (unit > MOUSEKEY_WHEEL_MAX ? MOUSEKEY_WHEEL_MAX : (unit == 0 ? 1 : unit));
}

void mousekey_task(void)
{
    44de:	1f 93       	push	r17
    44e0:	cf 93       	push	r28
    44e2:	df 93       	push	r29
    if (timer_elapsed(last_timer) < (mousekey_repeat ? mk_interval : mk_delay*10))
    44e4:	80 91 bd 01 	lds	r24, 0x01BD
    44e8:	90 91 be 01 	lds	r25, 0x01BE
    44ec:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <timer_elapsed>
    44f0:	ac 01       	movw	r20, r24
    44f2:	90 91 c0 01 	lds	r25, 0x01C0
    44f6:	99 23       	and	r25, r25
    44f8:	21 f0       	breq	.+8      	; 0x4502 <mousekey_task+0x24>
    44fa:	20 91 12 01 	lds	r18, 0x0112
    44fe:	30 e0       	ldi	r19, 0x00	; 0
    4500:	06 c0       	rjmp	.+12     	; 0x450e <mousekey_task+0x30>
    4502:	20 91 13 01 	lds	r18, 0x0113
    4506:	8a e0       	ldi	r24, 0x0A	; 10
    4508:	28 9f       	mul	r18, r24
    450a:	90 01       	movw	r18, r0
    450c:	11 24       	eor	r1, r1
    450e:	42 17       	cp	r20, r18
    4510:	53 07       	cpc	r21, r19
    4512:	08 f4       	brcc	.+2      	; 0x4516 <mousekey_task+0x38>
    4514:	85 c0       	rjmp	.+266    	; 0x4620 <mousekey_task+0x142>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
    4516:	80 91 c2 01 	lds	r24, 0x01C2
    451a:	c0 91 c3 01 	lds	r28, 0x01C3
    451e:	d0 91 c4 01 	lds	r29, 0x01C4
    4522:	10 91 c5 01 	lds	r17, 0x01C5
    4526:	81 11       	cpse	r24, r1
    4528:	07 c0       	rjmp	.+14     	; 0x4538 <mousekey_task+0x5a>
    452a:	c1 11       	cpse	r28, r1
    452c:	75 c0       	rjmp	.+234    	; 0x4618 <mousekey_task+0x13a>
    452e:	d1 11       	cpse	r29, r1
    4530:	73 c0       	rjmp	.+230    	; 0x4618 <mousekey_task+0x13a>
    4532:	11 11       	cpse	r17, r1
    4534:	71 c0       	rjmp	.+226    	; 0x4618 <mousekey_task+0x13a>
    4536:	74 c0       	rjmp	.+232    	; 0x4620 <mousekey_task+0x142>
        return;

    if (mousekey_repeat != UINT8_MAX)
    4538:	9f 3f       	cpi	r25, 0xFF	; 255
    453a:	19 f0       	breq	.+6      	; 0x4542 <mousekey_task+0x64>
        mousekey_repeat++;
    453c:	9f 5f       	subi	r25, 0xFF	; 255
    453e:	90 93 c0 01 	sts	0x01C0, r25


    if (mouse_report.x > 0) mouse_report.x = move_unit();
    4542:	18 16       	cp	r1, r24
    4544:	24 f4       	brge	.+8      	; 0x454e <mousekey_task+0x70>
    4546:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    454a:	80 93 c2 01 	sts	0x01C2, r24
    if (mouse_report.x < 0) mouse_report.x = move_unit() * -1;
    454e:	80 91 c2 01 	lds	r24, 0x01C2
    4552:	87 ff       	sbrs	r24, 7
    4554:	05 c0       	rjmp	.+10     	; 0x4560 <mousekey_task+0x82>
    4556:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    455a:	81 95       	neg	r24
    455c:	80 93 c2 01 	sts	0x01C2, r24
    if (mouse_report.y > 0) mouse_report.y = move_unit();
    4560:	1c 16       	cp	r1, r28
    4562:	24 f4       	brge	.+8      	; 0x456c <mousekey_task+0x8e>
    4564:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    4568:	80 93 c3 01 	sts	0x01C3, r24
    if (mouse_report.y < 0) mouse_report.y = move_unit() * -1;
    456c:	80 91 c3 01 	lds	r24, 0x01C3
    4570:	87 ff       	sbrs	r24, 7
    4572:	05 c0       	rjmp	.+10     	; 0x457e <mousekey_task+0xa0>
    4574:	0e 94 73 20 	call	0x40e6	; 0x40e6 <move_unit>
    4578:	81 95       	neg	r24
    457a:	80 93 c3 01 	sts	0x01C3, r24

    /* diagonal move [1/sqrt(2) = 0.7] */
    if (mouse_report.x && mouse_report.y) {
    457e:	60 91 c2 01 	lds	r22, 0x01C2
    4582:	66 23       	and	r22, r22
    4584:	31 f1       	breq	.+76     	; 0x45d2 <mousekey_task+0xf4>
    4586:	c0 91 c3 01 	lds	r28, 0x01C3
    458a:	cc 23       	and	r28, r28
    458c:	11 f1       	breq	.+68     	; 0x45d2 <mousekey_task+0xf4>
        mouse_report.x *= 0.7;
    458e:	06 2e       	mov	r0, r22
    4590:	00 0c       	add	r0, r0
    4592:	77 0b       	sbc	r23, r23
    4594:	88 0b       	sbc	r24, r24
    4596:	99 0b       	sbc	r25, r25
    4598:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <__floatsisf>
    459c:	23 e3       	ldi	r18, 0x33	; 51
    459e:	33 e3       	ldi	r19, 0x33	; 51
    45a0:	43 e3       	ldi	r20, 0x33	; 51
    45a2:	5f e3       	ldi	r21, 0x3F	; 63
    45a4:	0e 94 bf 28 	call	0x517e	; 0x517e <__mulsf3>
    45a8:	0e 94 23 28 	call	0x5046	; 0x5046 <__fixsfsi>
    45ac:	60 93 c2 01 	sts	0x01C2, r22
        mouse_report.y *= 0.7;
    45b0:	6c 2f       	mov	r22, r28
    45b2:	cc 0f       	add	r28, r28
    45b4:	77 0b       	sbc	r23, r23
    45b6:	88 0b       	sbc	r24, r24
    45b8:	99 0b       	sbc	r25, r25
    45ba:	0e 94 5b 28 	call	0x50b6	; 0x50b6 <__floatsisf>
    45be:	23 e3       	ldi	r18, 0x33	; 51
    45c0:	33 e3       	ldi	r19, 0x33	; 51
    45c2:	43 e3       	ldi	r20, 0x33	; 51
    45c4:	5f e3       	ldi	r21, 0x3F	; 63
    45c6:	0e 94 bf 28 	call	0x517e	; 0x517e <__mulsf3>
    45ca:	0e 94 23 28 	call	0x5046	; 0x5046 <__fixsfsi>
    45ce:	60 93 c3 01 	sts	0x01C3, r22
    }

    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    45d2:	1d 16       	cp	r1, r29
    45d4:	24 f4       	brge	.+8      	; 0x45de <mousekey_task+0x100>
    45d6:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    45da:	80 93 c4 01 	sts	0x01C4, r24
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    45de:	80 91 c4 01 	lds	r24, 0x01C4
    45e2:	87 ff       	sbrs	r24, 7
    45e4:	05 c0       	rjmp	.+10     	; 0x45f0 <mousekey_task+0x112>
    45e6:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    45ea:	81 95       	neg	r24
    45ec:	80 93 c4 01 	sts	0x01C4, r24
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    45f0:	11 16       	cp	r1, r17
    45f2:	24 f4       	brge	.+8      	; 0x45fc <mousekey_task+0x11e>
    45f4:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    45f8:	80 93 c5 01 	sts	0x01C5, r24
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;
    45fc:	80 91 c5 01 	lds	r24, 0x01C5
    4600:	87 ff       	sbrs	r24, 7
    4602:	05 c0       	rjmp	.+10     	; 0x460e <mousekey_task+0x130>
    4604:	0e 94 bc 20 	call	0x4178	; 0x4178 <wheel_unit>
    4608:	81 95       	neg	r24
    460a:	80 93 c5 01 	sts	0x01C5, r24

    mousekey_send();
}
    460e:	df 91       	pop	r29
    4610:	cf 91       	pop	r28
    4612:	1f 91       	pop	r17
    if (mouse_report.v > 0) mouse_report.v = wheel_unit();
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
    4614:	0c 94 e2 21 	jmp	0x43c4	; 0x43c4 <mousekey_send>
        return;

    if (mouse_report.x == 0 && mouse_report.y == 0 && mouse_report.v == 0 && mouse_report.h == 0)
        return;

    if (mousekey_repeat != UINT8_MAX)
    4618:	9f 3f       	cpi	r25, 0xFF	; 255
    461a:	09 f0       	breq	.+2      	; 0x461e <mousekey_task+0x140>
    461c:	8f cf       	rjmp	.-226    	; 0x453c <mousekey_task+0x5e>
    461e:	97 cf       	rjmp	.-210    	; 0x454e <mousekey_task+0x70>
    if (mouse_report.v < 0) mouse_report.v = wheel_unit() * -1;
    if (mouse_report.h > 0) mouse_report.h = wheel_unit();
    if (mouse_report.h < 0) mouse_report.h = wheel_unit() * -1;

    mousekey_send();
}
    4620:	df 91       	pop	r29
    4622:	cf 91       	pop	r28
    4624:	1f 91       	pop	r17
    4626:	08 95       	ret

00004628 <mousekey_clear>:
    last_timer = timer_read();
}

void mousekey_clear(void)
{
    mouse_report = (report_mouse_t){};
    4628:	e1 ec       	ldi	r30, 0xC1	; 193
    462a:	f1 e0       	ldi	r31, 0x01	; 1
    462c:	85 e0       	ldi	r24, 0x05	; 5
    462e:	df 01       	movw	r26, r30
    4630:	1d 92       	st	X+, r1
    4632:	8a 95       	dec	r24
    4634:	e9 f7       	brne	.-6      	; 0x4630 <mousekey_clear+0x8>
    mousekey_repeat = 0;
    4636:	10 92 c0 01 	sts	0x01C0, r1
    mousekey_accel = 0;
    463a:	10 92 bf 01 	sts	0x01BF, r1
    463e:	08 95       	ret

00004640 <mousekey_console_help>:
    }
}

static void mousekey_console_help(void)
{
    print("\n\t- Mousekey -\n"
    4640:	88 e4       	ldi	r24, 0x48	; 72
    4642:	96 e0       	ldi	r25, 0x06	; 6
    4644:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
          "down:	-1\n"
          "pgup:	+10\n"
          "pgdown:	-10\n"
          "\n"
          "speed = delta * max_speed * (repeat / time_to_max)\n");
    xprintf("where delta: cursor=%d, wheel=%d\n" 
    4648:	1f 92       	push	r1
    464a:	81 e0       	ldi	r24, 0x01	; 1
    464c:	8f 93       	push	r24
    464e:	1f 92       	push	r1
    4650:	85 e0       	ldi	r24, 0x05	; 5
    4652:	8f 93       	push	r24
    4654:	8a ef       	ldi	r24, 0xFA	; 250
    4656:	95 e0       	ldi	r25, 0x05	; 5
    4658:	9f 93       	push	r25
    465a:	8f 93       	push	r24
    465c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4660:	0f 90       	pop	r0
    4662:	0f 90       	pop	r0
    4664:	0f 90       	pop	r0
    4666:	0f 90       	pop	r0
    4668:	0f 90       	pop	r0
    466a:	0f 90       	pop	r0
    466c:	08 95       	ret

0000466e <mousekey_param_inc>:

//#define PRINT_SET_VAL(v)  print(#v " = "); print_dec(v); print("\n");
#define PRINT_SET_VAL(v)  xprintf(#v " = %d\n", (v))
static void mousekey_param_inc(uint8_t param, uint8_t inc)
{
    switch (param) {
    466e:	83 30       	cpi	r24, 0x03	; 3
    4670:	e9 f1       	breq	.+122    	; 0x46ec <mousekey_param_inc+0x7e>
    4672:	28 f4       	brcc	.+10     	; 0x467e <mousekey_param_inc+0x10>
    4674:	81 30       	cpi	r24, 0x01	; 1
    4676:	61 f0       	breq	.+24     	; 0x4690 <mousekey_param_inc+0x22>
    4678:	82 30       	cpi	r24, 0x02	; 2
    467a:	09 f1       	breq	.+66     	; 0x46be <mousekey_param_inc+0x50>
    467c:	08 95       	ret
    467e:	85 30       	cpi	r24, 0x05	; 5
    4680:	09 f4       	brne	.+2      	; 0x4684 <mousekey_param_inc+0x16>
    4682:	62 c0       	rjmp	.+196    	; 0x4748 <mousekey_param_inc+0xda>
    4684:	08 f4       	brcc	.+2      	; 0x4688 <mousekey_param_inc+0x1a>
    4686:	49 c0       	rjmp	.+146    	; 0x471a <mousekey_param_inc+0xac>
    4688:	86 30       	cpi	r24, 0x06	; 6
    468a:	09 f4       	brne	.+2      	; 0x468e <mousekey_param_inc+0x20>
    468c:	74 c0       	rjmp	.+232    	; 0x4776 <mousekey_param_inc+0x108>
    468e:	08 95       	ret
        case 1:
            if (mk_delay + inc < UINT8_MAX)
    4690:	80 91 13 01 	lds	r24, 0x0113
    4694:	26 2f       	mov	r18, r22
    4696:	30 e0       	ldi	r19, 0x00	; 0
    4698:	28 0f       	add	r18, r24
    469a:	31 1d       	adc	r19, r1
    469c:	2f 3f       	cpi	r18, 0xFF	; 255
    469e:	31 05       	cpc	r19, r1
    46a0:	24 f4       	brge	.+8      	; 0x46aa <mousekey_param_inc+0x3c>
                mk_delay += inc;
    46a2:	68 0f       	add	r22, r24
    46a4:	60 93 13 01 	sts	0x0113, r22
    46a8:	03 c0       	rjmp	.+6      	; 0x46b0 <mousekey_param_inc+0x42>
            else
                mk_delay = UINT8_MAX;
    46aa:	8f ef       	ldi	r24, 0xFF	; 255
    46ac:	80 93 13 01 	sts	0x0113, r24
            PRINT_SET_VAL(mk_delay);
    46b0:	80 91 13 01 	lds	r24, 0x0113
    46b4:	1f 92       	push	r1
    46b6:	8f 93       	push	r24
    46b8:	83 e3       	ldi	r24, 0x33	; 51
    46ba:	95 e0       	ldi	r25, 0x05	; 5
    46bc:	72 c0       	rjmp	.+228    	; 0x47a2 <mousekey_param_inc+0x134>
            break;
        case 2:
            if (mk_interval + inc < UINT8_MAX)
    46be:	80 91 12 01 	lds	r24, 0x0112
    46c2:	26 2f       	mov	r18, r22
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    46c6:	28 0f       	add	r18, r24
    46c8:	31 1d       	adc	r19, r1
    46ca:	2f 3f       	cpi	r18, 0xFF	; 255
    46cc:	31 05       	cpc	r19, r1
    46ce:	24 f4       	brge	.+8      	; 0x46d8 <mousekey_param_inc+0x6a>
                mk_interval += inc;
    46d0:	68 0f       	add	r22, r24
    46d2:	60 93 12 01 	sts	0x0112, r22
    46d6:	03 c0       	rjmp	.+6      	; 0x46de <mousekey_param_inc+0x70>
            else
                mk_interval = UINT8_MAX;
    46d8:	8f ef       	ldi	r24, 0xFF	; 255
    46da:	80 93 12 01 	sts	0x0112, r24
            PRINT_SET_VAL(mk_interval);
    46de:	80 91 12 01 	lds	r24, 0x0112
    46e2:	1f 92       	push	r1
    46e4:	8f 93       	push	r24
    46e6:	81 e2       	ldi	r24, 0x21	; 33
    46e8:	95 e0       	ldi	r25, 0x05	; 5
    46ea:	5b c0       	rjmp	.+182    	; 0x47a2 <mousekey_param_inc+0x134>
            break;
        case 3:
            if (mk_max_speed + inc < UINT8_MAX)
    46ec:	80 91 11 01 	lds	r24, 0x0111
    46f0:	26 2f       	mov	r18, r22
    46f2:	30 e0       	ldi	r19, 0x00	; 0
    46f4:	28 0f       	add	r18, r24
    46f6:	31 1d       	adc	r19, r1
    46f8:	2f 3f       	cpi	r18, 0xFF	; 255
    46fa:	31 05       	cpc	r19, r1
    46fc:	24 f4       	brge	.+8      	; 0x4706 <mousekey_param_inc+0x98>
                mk_max_speed += inc;
    46fe:	68 0f       	add	r22, r24
    4700:	60 93 11 01 	sts	0x0111, r22
    4704:	03 c0       	rjmp	.+6      	; 0x470c <mousekey_param_inc+0x9e>
            else
                mk_max_speed = UINT8_MAX;
    4706:	8f ef       	ldi	r24, 0xFF	; 255
    4708:	80 93 11 01 	sts	0x0111, r24
            PRINT_SET_VAL(mk_max_speed);
    470c:	80 91 11 01 	lds	r24, 0x0111
    4710:	1f 92       	push	r1
    4712:	8f 93       	push	r24
    4714:	8e e0       	ldi	r24, 0x0E	; 14
    4716:	95 e0       	ldi	r25, 0x05	; 5
    4718:	44 c0       	rjmp	.+136    	; 0x47a2 <mousekey_param_inc+0x134>
            break;
        case 4:
            if (mk_time_to_max + inc < UINT8_MAX)
    471a:	80 91 10 01 	lds	r24, 0x0110
    471e:	26 2f       	mov	r18, r22
    4720:	30 e0       	ldi	r19, 0x00	; 0
    4722:	28 0f       	add	r18, r24
    4724:	31 1d       	adc	r19, r1
    4726:	2f 3f       	cpi	r18, 0xFF	; 255
    4728:	31 05       	cpc	r19, r1
    472a:	24 f4       	brge	.+8      	; 0x4734 <mousekey_param_inc+0xc6>
                mk_time_to_max += inc;
    472c:	68 0f       	add	r22, r24
    472e:	60 93 10 01 	sts	0x0110, r22
    4732:	03 c0       	rjmp	.+6      	; 0x473a <mousekey_param_inc+0xcc>
            else
                mk_time_to_max = UINT8_MAX;
    4734:	8f ef       	ldi	r24, 0xFF	; 255
    4736:	80 93 10 01 	sts	0x0110, r24
            PRINT_SET_VAL(mk_time_to_max);
    473a:	80 91 10 01 	lds	r24, 0x0110
    473e:	1f 92       	push	r1
    4740:	8f 93       	push	r24
    4742:	89 ef       	ldi	r24, 0xF9	; 249
    4744:	94 e0       	ldi	r25, 0x04	; 4
    4746:	2d c0       	rjmp	.+90     	; 0x47a2 <mousekey_param_inc+0x134>
            break;
        case 5:
            if (mk_wheel_max_speed + inc < UINT8_MAX)
    4748:	80 91 0f 01 	lds	r24, 0x010F
    474c:	26 2f       	mov	r18, r22
    474e:	30 e0       	ldi	r19, 0x00	; 0
    4750:	28 0f       	add	r18, r24
    4752:	31 1d       	adc	r19, r1
    4754:	2f 3f       	cpi	r18, 0xFF	; 255
    4756:	31 05       	cpc	r19, r1
    4758:	24 f4       	brge	.+8      	; 0x4762 <mousekey_param_inc+0xf4>
                mk_wheel_max_speed += inc;
    475a:	68 0f       	add	r22, r24
    475c:	60 93 0f 01 	sts	0x010F, r22
    4760:	03 c0       	rjmp	.+6      	; 0x4768 <mousekey_param_inc+0xfa>
            else
                mk_wheel_max_speed = UINT8_MAX;
    4762:	8f ef       	ldi	r24, 0xFF	; 255
    4764:	80 93 0f 01 	sts	0x010F, r24
            PRINT_SET_VAL(mk_wheel_max_speed);
    4768:	80 91 0f 01 	lds	r24, 0x010F
    476c:	1f 92       	push	r1
    476e:	8f 93       	push	r24
    4770:	80 ee       	ldi	r24, 0xE0	; 224
    4772:	94 e0       	ldi	r25, 0x04	; 4
    4774:	16 c0       	rjmp	.+44     	; 0x47a2 <mousekey_param_inc+0x134>
            break;
        case 6:
            if (mk_wheel_time_to_max + inc < UINT8_MAX)
    4776:	80 91 0e 01 	lds	r24, 0x010E
    477a:	26 2f       	mov	r18, r22
    477c:	30 e0       	ldi	r19, 0x00	; 0
    477e:	28 0f       	add	r18, r24
    4780:	31 1d       	adc	r19, r1
    4782:	2f 3f       	cpi	r18, 0xFF	; 255
    4784:	31 05       	cpc	r19, r1
    4786:	24 f4       	brge	.+8      	; 0x4790 <mousekey_param_inc+0x122>
                mk_wheel_time_to_max += inc;
    4788:	68 0f       	add	r22, r24
    478a:	60 93 0e 01 	sts	0x010E, r22
    478e:	03 c0       	rjmp	.+6      	; 0x4796 <mousekey_param_inc+0x128>
            else
                mk_wheel_time_to_max = UINT8_MAX;
    4790:	8f ef       	ldi	r24, 0xFF	; 255
    4792:	80 93 0e 01 	sts	0x010E, r24
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4796:	80 91 0e 01 	lds	r24, 0x010E
    479a:	1f 92       	push	r1
    479c:	8f 93       	push	r24
    479e:	85 ec       	ldi	r24, 0xC5	; 197
    47a0:	94 e0       	ldi	r25, 0x04	; 4
    47a2:	9f 93       	push	r25
    47a4:	8f 93       	push	r24
    47a6:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
            break;
    47aa:	0f 90       	pop	r0
    47ac:	0f 90       	pop	r0
    47ae:	0f 90       	pop	r0
    47b0:	0f 90       	pop	r0
    47b2:	08 95       	ret

000047b4 <mousekey_param_dec>:
    }
}

static void mousekey_param_dec(uint8_t param, uint8_t dec)
{
    switch (param) {
    47b4:	83 30       	cpi	r24, 0x03	; 3
    47b6:	81 f1       	breq	.+96     	; 0x4818 <mousekey_param_dec+0x64>
    47b8:	28 f4       	brcc	.+10     	; 0x47c4 <mousekey_param_dec+0x10>
    47ba:	81 30       	cpi	r24, 0x01	; 1
    47bc:	59 f0       	breq	.+22     	; 0x47d4 <mousekey_param_dec+0x20>
    47be:	82 30       	cpi	r24, 0x02	; 2
    47c0:	d1 f0       	breq	.+52     	; 0x47f6 <mousekey_param_dec+0x42>
    47c2:	08 95       	ret
    47c4:	85 30       	cpi	r24, 0x05	; 5
    47c6:	09 f4       	brne	.+2      	; 0x47ca <mousekey_param_dec+0x16>
    47c8:	49 c0       	rjmp	.+146    	; 0x485c <mousekey_param_dec+0xa8>
    47ca:	b8 f1       	brcs	.+110    	; 0x483a <mousekey_param_dec+0x86>
    47cc:	86 30       	cpi	r24, 0x06	; 6
    47ce:	09 f4       	brne	.+2      	; 0x47d2 <mousekey_param_dec+0x1e>
    47d0:	56 c0       	rjmp	.+172    	; 0x487e <mousekey_param_dec+0xca>
    47d2:	08 95       	ret
        case 1:
            if (mk_delay > dec)
    47d4:	80 91 13 01 	lds	r24, 0x0113
    47d8:	68 17       	cp	r22, r24
    47da:	20 f4       	brcc	.+8      	; 0x47e4 <mousekey_param_dec+0x30>
                mk_delay -= dec;
    47dc:	86 1b       	sub	r24, r22
    47de:	80 93 13 01 	sts	0x0113, r24
    47e2:	02 c0       	rjmp	.+4      	; 0x47e8 <mousekey_param_dec+0x34>
            else
                mk_delay = 0;
    47e4:	10 92 13 01 	sts	0x0113, r1
            PRINT_SET_VAL(mk_delay);
    47e8:	80 91 13 01 	lds	r24, 0x0113
    47ec:	1f 92       	push	r1
    47ee:	8f 93       	push	r24
    47f0:	86 eb       	ldi	r24, 0xB6	; 182
    47f2:	94 e0       	ldi	r25, 0x04	; 4
    47f4:	54 c0       	rjmp	.+168    	; 0x489e <mousekey_param_dec+0xea>
            break;
        case 2:
            if (mk_interval > dec)
    47f6:	80 91 12 01 	lds	r24, 0x0112
    47fa:	68 17       	cp	r22, r24
    47fc:	20 f4       	brcc	.+8      	; 0x4806 <mousekey_param_dec+0x52>
                mk_interval -= dec;
    47fe:	86 1b       	sub	r24, r22
    4800:	80 93 12 01 	sts	0x0112, r24
    4804:	02 c0       	rjmp	.+4      	; 0x480a <mousekey_param_dec+0x56>
            else
                mk_interval = 0;
    4806:	10 92 12 01 	sts	0x0112, r1
            PRINT_SET_VAL(mk_interval);
    480a:	80 91 12 01 	lds	r24, 0x0112
    480e:	1f 92       	push	r1
    4810:	8f 93       	push	r24
    4812:	84 ea       	ldi	r24, 0xA4	; 164
    4814:	94 e0       	ldi	r25, 0x04	; 4
    4816:	43 c0       	rjmp	.+134    	; 0x489e <mousekey_param_dec+0xea>
            break;
        case 3:
            if (mk_max_speed > dec)
    4818:	80 91 11 01 	lds	r24, 0x0111
    481c:	68 17       	cp	r22, r24
    481e:	20 f4       	brcc	.+8      	; 0x4828 <mousekey_param_dec+0x74>
                mk_max_speed -= dec;
    4820:	86 1b       	sub	r24, r22
    4822:	80 93 11 01 	sts	0x0111, r24
    4826:	02 c0       	rjmp	.+4      	; 0x482c <mousekey_param_dec+0x78>
            else
                mk_max_speed = 0;
    4828:	10 92 11 01 	sts	0x0111, r1
            PRINT_SET_VAL(mk_max_speed);
    482c:	80 91 11 01 	lds	r24, 0x0111
    4830:	1f 92       	push	r1
    4832:	8f 93       	push	r24
    4834:	81 e9       	ldi	r24, 0x91	; 145
    4836:	94 e0       	ldi	r25, 0x04	; 4
    4838:	32 c0       	rjmp	.+100    	; 0x489e <mousekey_param_dec+0xea>
            break;
        case 4:
            if (mk_time_to_max > dec)
    483a:	80 91 10 01 	lds	r24, 0x0110
    483e:	68 17       	cp	r22, r24
    4840:	20 f4       	brcc	.+8      	; 0x484a <mousekey_param_dec+0x96>
                mk_time_to_max -= dec;
    4842:	86 1b       	sub	r24, r22
    4844:	80 93 10 01 	sts	0x0110, r24
    4848:	02 c0       	rjmp	.+4      	; 0x484e <mousekey_param_dec+0x9a>
            else
                mk_time_to_max = 0;
    484a:	10 92 10 01 	sts	0x0110, r1
            PRINT_SET_VAL(mk_time_to_max);
    484e:	80 91 10 01 	lds	r24, 0x0110
    4852:	1f 92       	push	r1
    4854:	8f 93       	push	r24
    4856:	8c e7       	ldi	r24, 0x7C	; 124
    4858:	94 e0       	ldi	r25, 0x04	; 4
    485a:	21 c0       	rjmp	.+66     	; 0x489e <mousekey_param_dec+0xea>
            break;
        case 5:
            if (mk_wheel_max_speed > dec)
    485c:	80 91 0f 01 	lds	r24, 0x010F
    4860:	68 17       	cp	r22, r24
    4862:	20 f4       	brcc	.+8      	; 0x486c <mousekey_param_dec+0xb8>
                mk_wheel_max_speed -= dec;
    4864:	86 1b       	sub	r24, r22
    4866:	80 93 0f 01 	sts	0x010F, r24
    486a:	02 c0       	rjmp	.+4      	; 0x4870 <mousekey_param_dec+0xbc>
            else
                mk_wheel_max_speed = 0;
    486c:	10 92 0f 01 	sts	0x010F, r1
            PRINT_SET_VAL(mk_wheel_max_speed);
    4870:	80 91 0f 01 	lds	r24, 0x010F
    4874:	1f 92       	push	r1
    4876:	8f 93       	push	r24
    4878:	83 e6       	ldi	r24, 0x63	; 99
    487a:	94 e0       	ldi	r25, 0x04	; 4
    487c:	10 c0       	rjmp	.+32     	; 0x489e <mousekey_param_dec+0xea>
            break;
        case 6:
            if (mk_wheel_time_to_max > dec)
    487e:	80 91 0e 01 	lds	r24, 0x010E
    4882:	68 17       	cp	r22, r24
    4884:	20 f4       	brcc	.+8      	; 0x488e <mousekey_param_dec+0xda>
                mk_wheel_time_to_max -= dec;
    4886:	86 1b       	sub	r24, r22
    4888:	80 93 0e 01 	sts	0x010E, r24
    488c:	02 c0       	rjmp	.+4      	; 0x4892 <mousekey_param_dec+0xde>
            else
                mk_wheel_time_to_max = 0;
    488e:	10 92 0e 01 	sts	0x010E, r1
            PRINT_SET_VAL(mk_wheel_time_to_max);
    4892:	80 91 0e 01 	lds	r24, 0x010E
    4896:	1f 92       	push	r1
    4898:	8f 93       	push	r24
    489a:	88 e4       	ldi	r24, 0x48	; 72
    489c:	94 e0       	ldi	r25, 0x04	; 4
    489e:	9f 93       	push	r25
    48a0:	8f 93       	push	r24
    48a2:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
            break;
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	0f 90       	pop	r0
    48ac:	0f 90       	pop	r0
    48ae:	08 95       	ret

000048b0 <switch_default_layer>:
    }
    return 0;
}

static void switch_default_layer(uint8_t layer)
{
    48b0:	cf 93       	push	r28
    48b2:	c8 2f       	mov	r28, r24
    xprintf("L%d\n", layer);
    48b4:	1f 92       	push	r1
    48b6:	8f 93       	push	r24
    48b8:	8d e4       	ldi	r24, 0x4D	; 77
    48ba:	97 e0       	ldi	r25, 0x07	; 7
    48bc:	9f 93       	push	r25
    48be:	8f 93       	push	r24
    48c0:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    default_layer_set(1UL<<layer);
    48c4:	81 e0       	ldi	r24, 0x01	; 1
    48c6:	90 e0       	ldi	r25, 0x00	; 0
    48c8:	a0 e0       	ldi	r26, 0x00	; 0
    48ca:	b0 e0       	ldi	r27, 0x00	; 0
    48cc:	bc 01       	movw	r22, r24
    48ce:	cd 01       	movw	r24, r26
    48d0:	04 c0       	rjmp	.+8      	; 0x48da <switch_default_layer+0x2a>
    48d2:	66 0f       	add	r22, r22
    48d4:	77 1f       	adc	r23, r23
    48d6:	88 1f       	adc	r24, r24
    48d8:	99 1f       	adc	r25, r25
    48da:	ca 95       	dec	r28
    48dc:	d2 f7       	brpl	.-12     	; 0x48d2 <switch_default_layer+0x22>
    48de:	0e 94 45 1a 	call	0x348a	; 0x348a <default_layer_set>
    clear_keyboard();
    48e2:	0f 90       	pop	r0
    48e4:	0f 90       	pop	r0
    48e6:	0f 90       	pop	r0
    48e8:	0f 90       	pop	r0
}
    48ea:	cf 91       	pop	r28

static void switch_default_layer(uint8_t layer)
{
    xprintf("L%d\n", layer);
    default_layer_set(1UL<<layer);
    clear_keyboard();
    48ec:	0c 94 51 16 	jmp	0x2ca2	; 0x2ca2 <clear_keyboard>

000048f0 <command_common>:
#endif
}
#endif

static bool command_common(uint8_t code)
{
    48f0:	cf 93       	push	r28
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    48f2:	87 32       	cpi	r24, 0x27	; 39
    48f4:	b0 f5       	brcc	.+108    	; 0x4962 <command_common+0x72>
    48f6:	8e 31       	cpi	r24, 0x1E	; 30
    48f8:	08 f0       	brcs	.+2      	; 0x48fc <command_common+0xc>
    48fa:	40 c2       	rjmp	.+1152   	; 0x4d7c <command_common+0x48c>
    48fc:	8e 30       	cpi	r24, 0x0E	; 14
    48fe:	09 f4       	brne	.+2      	; 0x4902 <command_common+0x12>
    4900:	be c1       	rjmp	.+892    	; 0x4c7e <command_common+0x38e>
    4902:	00 f5       	brcc	.+64     	; 0x4944 <command_common+0x54>
    4904:	87 30       	cpi	r24, 0x07	; 7
    4906:	09 f4       	brne	.+2      	; 0x490a <command_common+0x1a>
    4908:	8d c1       	rjmp	.+794    	; 0x4c24 <command_common+0x334>
    490a:	a8 f4       	brcc	.+42     	; 0x4936 <command_common+0x46>
    490c:	86 30       	cpi	r24, 0x06	; 6
    490e:	09 f0       	breq	.+2      	; 0x4912 <command_common+0x22>
    4910:	39 c2       	rjmp	.+1138   	; 0x4d84 <command_common+0x494>
        case KC_H:
        case KC_SLASH: /* ? */
            command_common_help();
            break;
        case KC_C:
            debug_matrix   = false;
    4912:	80 91 b7 01 	lds	r24, 0x01B7
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
    4916:	81 7f       	andi	r24, 0xF1	; 241
    4918:	8e 7f       	andi	r24, 0xFE	; 254
    491a:	80 93 b7 01 	sts	0x01B7, r24
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    491e:	82 e5       	ldi	r24, 0x52	; 82
    4920:	97 e0       	ldi	r25, 0x07	; 7
    4922:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            debug_matrix   = false;
            debug_keyboard = false;
            debug_mouse    = false;
            debug_enable   = false;
            command_console_help();
            print("C> ");
    4926:	8a e5       	ldi	r24, 0x5A	; 90
    4928:	9b e0       	ldi	r25, 0x0B	; 11
    492a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            command_state = CONSOLE;
    492e:	81 e0       	ldi	r24, 0x01	; 1
    4930:	80 93 c7 01 	sts	0x01C7, r24
    4934:	75 c1       	rjmp	.+746    	; 0x4c20 <command_common+0x330>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4936:	88 30       	cpi	r24, 0x08	; 8
    4938:	09 f4       	brne	.+2      	; 0x493c <command_common+0x4c>
    493a:	3f c0       	rjmp	.+126    	; 0x49ba <command_common+0xca>
    493c:	8b 30       	cpi	r24, 0x0B	; 11
    493e:	09 f4       	brne	.+2      	; 0x4942 <command_common+0x52>
    4940:	6b c1       	rjmp	.+726    	; 0x4c18 <command_common+0x328>
    4942:	20 c2       	rjmp	.+1088   	; 0x4d84 <command_common+0x494>
    4944:	86 31       	cpi	r24, 0x16	; 22
    4946:	09 f4       	brne	.+2      	; 0x494a <command_common+0x5a>
    4948:	e0 c1       	rjmp	.+960    	; 0x4d0a <command_common+0x41a>
    494a:	20 f4       	brcc	.+8      	; 0x4954 <command_common+0x64>
    494c:	80 31       	cpi	r24, 0x10	; 16
    494e:	09 f4       	brne	.+2      	; 0x4952 <command_common+0x62>
    4950:	aa c1       	rjmp	.+852    	; 0x4ca6 <command_common+0x3b6>
    4952:	18 c2       	rjmp	.+1072   	; 0x4d84 <command_common+0x494>
    4954:	89 31       	cpi	r24, 0x19	; 25
    4956:	09 f4       	brne	.+2      	; 0x495a <command_common+0x6a>
    4958:	c1 c1       	rjmp	.+898    	; 0x4cdc <command_common+0x3ec>
    495a:	8b 31       	cpi	r24, 0x1B	; 27
    495c:	09 f4       	brne	.+2      	; 0x4960 <command_common+0x70>
    495e:	7b c1       	rjmp	.+758    	; 0x4c56 <command_common+0x366>
    4960:	11 c2       	rjmp	.+1058   	; 0x4d84 <command_common+0x494>
    4962:	88 33       	cpi	r24, 0x38	; 56
    4964:	09 f4       	brne	.+2      	; 0x4968 <command_common+0x78>
    4966:	58 c1       	rjmp	.+688    	; 0x4c18 <command_common+0x328>
    4968:	50 f4       	brcc	.+20     	; 0x497e <command_common+0x8e>
    496a:	89 32       	cpi	r24, 0x29	; 41
    496c:	09 f4       	brne	.+2      	; 0x4970 <command_common+0x80>
    496e:	04 c2       	rjmp	.+1032   	; 0x4d78 <command_common+0x488>
    4970:	85 33       	cpi	r24, 0x35	; 53
    4972:	09 f4       	brne	.+2      	; 0x4976 <command_common+0x86>
    4974:	01 c2       	rjmp	.+1026   	; 0x4d78 <command_common+0x488>
    4976:	87 32       	cpi	r24, 0x27	; 39
    4978:	09 f0       	breq	.+2      	; 0x497c <command_common+0x8c>
    497a:	04 c2       	rjmp	.+1032   	; 0x4d84 <command_common+0x494>
    497c:	fd c1       	rjmp	.+1018   	; 0x4d78 <command_common+0x488>
    497e:	83 34       	cpi	r24, 0x43	; 67
    4980:	09 f4       	brne	.+2      	; 0x4984 <command_common+0x94>
    4982:	fa c1       	rjmp	.+1012   	; 0x4d78 <command_common+0x488>
    4984:	28 f4       	brcc	.+10     	; 0x4990 <command_common+0xa0>
    4986:	8a 33       	cpi	r24, 0x3A	; 58
    4988:	08 f4       	brcc	.+2      	; 0x498c <command_common+0x9c>
    498a:	fc c1       	rjmp	.+1016   	; 0x4d84 <command_common+0x494>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    498c:	89 53       	subi	r24, 0x39	; 57
    498e:	f7 c1       	rjmp	.+1006   	; 0x4d7e <command_common+0x48e>
static bool command_common(uint8_t code)
{
#ifdef KEYBOARD_LOCK_ENABLE
    static host_driver_t *host_driver = 0;
#endif
    switch (code) {
    4990:	88 34       	cpi	r24, 0x48	; 72
    4992:	09 f0       	breq	.+2      	; 0x4996 <command_common+0xa6>
    4994:	f7 c1       	rjmp	.+1006   	; 0x4d84 <command_common+0x494>
            command_console_help();
            print("C> ");
            command_state = CONSOLE;
            break;
        case KC_PAUSE:
            clear_keyboard();
    4996:	0e 94 51 16 	call	0x2ca2	; 0x2ca2 <clear_keyboard>
            print("\n\nbootloader... ");
    499a:	89 e4       	ldi	r24, 0x49	; 73
    499c:	9b e0       	ldi	r25, 0x0B	; 11
    499e:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    49a2:	9f ef       	ldi	r25, 0xFF	; 255
    49a4:	23 ed       	ldi	r18, 0xD3	; 211
    49a6:	80 e3       	ldi	r24, 0x30	; 48
    49a8:	91 50       	subi	r25, 0x01	; 1
    49aa:	20 40       	sbci	r18, 0x00	; 0
    49ac:	80 40       	sbci	r24, 0x00	; 0
    49ae:	e1 f7       	brne	.-8      	; 0x49a8 <command_common+0xb8>
    49b0:	00 c0       	rjmp	.+0      	; 0x49b2 <command_common+0xc2>
    49b2:	00 00       	nop
            wait_ms(1000);
            bootloader_jump(); // not return
    49b4:	0e 94 3a 1d 	call	0x3a74	; 0x3a74 <bootloader_jump>
    49b8:	33 c1       	rjmp	.+614    	; 0x4c20 <command_common+0x330>
            led_set(host_keyboard_leds());
            break;
#endif
#ifdef BOOTMAGIC_ENABLE
        case KC_E:
            print("eeconfig:\n");
    49ba:	8e e5       	ldi	r24, 0x5E	; 94
    49bc:	9b e0       	ldi	r25, 0x0B	; 11
    49be:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
}

#ifdef BOOTMAGIC_ENABLE
static void print_eeconfig(void)
{
    print("default_layer: "); print_dec(eeconfig_read_default_layer()); print("\n");
    49c2:	89 e4       	ldi	r24, 0x49	; 73
    49c4:	99 e0       	ldi	r25, 0x09	; 9
    49c6:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    49ca:	0e 94 61 20 	call	0x40c2	; 0x40c2 <eeconfig_read_default_layer>
    49ce:	1f 92       	push	r1
    49d0:	8f 93       	push	r24
    49d2:	86 e4       	ldi	r24, 0x46	; 70
    49d4:	99 e0       	ldi	r25, 0x09	; 9
    49d6:	9f 93       	push	r25
    49d8:	8f 93       	push	r24
    49da:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    49de:	84 e4       	ldi	r24, 0x44	; 68
    49e0:	99 e0       	ldi	r25, 0x09	; 9
    49e2:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>

    debug_config_t dc;
    dc.raw = eeconfig_read_debug();
    49e6:	0e 94 58 20 	call	0x40b0	; 0x40b0 <eeconfig_read_debug>
    49ea:	c8 2f       	mov	r28, r24
    print("debug_config.raw: "); print_hex8(dc.raw); print("\n");
    49ec:	81 e3       	ldi	r24, 0x31	; 49
    49ee:	99 e0       	ldi	r25, 0x09	; 9
    49f0:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    49f4:	1f 92       	push	r1
    49f6:	cf 93       	push	r28
    49f8:	8c e2       	ldi	r24, 0x2C	; 44
    49fa:	99 e0       	ldi	r25, 0x09	; 9
    49fc:	9f 93       	push	r25
    49fe:	8f 93       	push	r24
    4a00:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4a04:	8a e2       	ldi	r24, 0x2A	; 42
    4a06:	99 e0       	ldi	r25, 0x09	; 9
    4a08:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".enable: "); print_dec(dc.enable); print("\n");
    4a0c:	80 e2       	ldi	r24, 0x20	; 32
    4a0e:	99 e0       	ldi	r25, 0x09	; 9
    4a10:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4a14:	8c 2f       	mov	r24, r28
    4a16:	81 70       	andi	r24, 0x01	; 1
    4a18:	1f 92       	push	r1
    4a1a:	8f 93       	push	r24
    4a1c:	8d e1       	ldi	r24, 0x1D	; 29
    4a1e:	99 e0       	ldi	r25, 0x09	; 9
    4a20:	9f 93       	push	r25
    4a22:	8f 93       	push	r24
    4a24:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4a28:	8b e1       	ldi	r24, 0x1B	; 27
    4a2a:	99 e0       	ldi	r25, 0x09	; 9
    4a2c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".matrix: "); print_dec(dc.matrix); print("\n");
    4a30:	81 e1       	ldi	r24, 0x11	; 17
    4a32:	99 e0       	ldi	r25, 0x09	; 9
    4a34:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4a38:	c1 fb       	bst	r28, 1
    4a3a:	88 27       	eor	r24, r24
    4a3c:	80 f9       	bld	r24, 0
    4a3e:	1f 92       	push	r1
    4a40:	8f 93       	push	r24
    4a42:	8e e0       	ldi	r24, 0x0E	; 14
    4a44:	99 e0       	ldi	r25, 0x09	; 9
    4a46:	9f 93       	push	r25
    4a48:	8f 93       	push	r24
    4a4a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4a4e:	8c e0       	ldi	r24, 0x0C	; 12
    4a50:	99 e0       	ldi	r25, 0x09	; 9
    4a52:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".keyboard: "); print_dec(dc.keyboard); print("\n");
    4a56:	80 e0       	ldi	r24, 0x00	; 0
    4a58:	99 e0       	ldi	r25, 0x09	; 9
    4a5a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4a5e:	c2 fb       	bst	r28, 2
    4a60:	88 27       	eor	r24, r24
    4a62:	80 f9       	bld	r24, 0
    4a64:	1f 92       	push	r1
    4a66:	8f 93       	push	r24
    4a68:	8d ef       	ldi	r24, 0xFD	; 253
    4a6a:	98 e0       	ldi	r25, 0x08	; 8
    4a6c:	9f 93       	push	r25
    4a6e:	8f 93       	push	r24
    4a70:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4a74:	8b ef       	ldi	r24, 0xFB	; 251
    4a76:	98 e0       	ldi	r25, 0x08	; 8
    4a78:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".mouse: "); print_dec(dc.mouse); print("\n");
    4a7c:	82 ef       	ldi	r24, 0xF2	; 242
    4a7e:	98 e0       	ldi	r25, 0x08	; 8
    4a80:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4a84:	c3 fb       	bst	r28, 3
    4a86:	cc 27       	eor	r28, r28
    4a88:	c0 f9       	bld	r28, 0
    4a8a:	1f 92       	push	r1
    4a8c:	cf 93       	push	r28
    4a8e:	8f ee       	ldi	r24, 0xEF	; 239
    4a90:	98 e0       	ldi	r25, 0x08	; 8
    4a92:	9f 93       	push	r25
    4a94:	8f 93       	push	r24
    4a96:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4a9a:	8d ee       	ldi	r24, 0xED	; 237
    4a9c:	98 e0       	ldi	r25, 0x08	; 8
    4a9e:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>

    keymap_config_t kc;
    kc.raw = eeconfig_read_keymap();
    4aa2:	0e 94 6a 20 	call	0x40d4	; 0x40d4 <eeconfig_read_keymap>
    4aa6:	c8 2f       	mov	r28, r24
    print("keymap_config.raw: "); print_hex8(kc.raw); print("\n");
    4aa8:	89 ed       	ldi	r24, 0xD9	; 217
    4aaa:	98 e0       	ldi	r25, 0x08	; 8
    4aac:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4ab0:	1f 92       	push	r1
    4ab2:	cf 93       	push	r28
    4ab4:	84 ed       	ldi	r24, 0xD4	; 212
    4ab6:	98 e0       	ldi	r25, 0x08	; 8
    4ab8:	9f 93       	push	r25
    4aba:	8f 93       	push	r24
    4abc:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4ac0:	82 ed       	ldi	r24, 0xD2	; 210
    4ac2:	98 e0       	ldi	r25, 0x08	; 8
    4ac4:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".swap_control_capslock: "); print_dec(kc.swap_control_capslock); print("\n");
    4ac8:	89 eb       	ldi	r24, 0xB9	; 185
    4aca:	98 e0       	ldi	r25, 0x08	; 8
    4acc:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4ad0:	8c 2f       	mov	r24, r28
    4ad2:	81 70       	andi	r24, 0x01	; 1
    4ad4:	1f 92       	push	r1
    4ad6:	8f 93       	push	r24
    4ad8:	86 eb       	ldi	r24, 0xB6	; 182
    4ada:	98 e0       	ldi	r25, 0x08	; 8
    4adc:	9f 93       	push	r25
    4ade:	8f 93       	push	r24
    4ae0:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4ae4:	8d b7       	in	r24, 0x3d	; 61
    4ae6:	9e b7       	in	r25, 0x3e	; 62
    4ae8:	80 96       	adiw	r24, 0x20	; 32
    4aea:	0f b6       	in	r0, 0x3f	; 63
    4aec:	f8 94       	cli
    4aee:	9e bf       	out	0x3e, r25	; 62
    4af0:	0f be       	out	0x3f, r0	; 63
    4af2:	8d bf       	out	0x3d, r24	; 61
    4af4:	84 eb       	ldi	r24, 0xB4	; 180
    4af6:	98 e0       	ldi	r25, 0x08	; 8
    4af8:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".capslock_to_control: "); print_dec(kc.capslock_to_control); print("\n");
    4afc:	8d e9       	ldi	r24, 0x9D	; 157
    4afe:	98 e0       	ldi	r25, 0x08	; 8
    4b00:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4b04:	c1 fb       	bst	r28, 1
    4b06:	88 27       	eor	r24, r24
    4b08:	80 f9       	bld	r24, 0
    4b0a:	1f 92       	push	r1
    4b0c:	8f 93       	push	r24
    4b0e:	8a e9       	ldi	r24, 0x9A	; 154
    4b10:	98 e0       	ldi	r25, 0x08	; 8
    4b12:	9f 93       	push	r25
    4b14:	8f 93       	push	r24
    4b16:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4b1a:	88 e9       	ldi	r24, 0x98	; 152
    4b1c:	98 e0       	ldi	r25, 0x08	; 8
    4b1e:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".swap_lalt_lgui: "); print_dec(kc.swap_lalt_lgui); print("\n");
    4b22:	86 e8       	ldi	r24, 0x86	; 134
    4b24:	98 e0       	ldi	r25, 0x08	; 8
    4b26:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4b2a:	c2 fb       	bst	r28, 2
    4b2c:	88 27       	eor	r24, r24
    4b2e:	80 f9       	bld	r24, 0
    4b30:	1f 92       	push	r1
    4b32:	8f 93       	push	r24
    4b34:	83 e8       	ldi	r24, 0x83	; 131
    4b36:	98 e0       	ldi	r25, 0x08	; 8
    4b38:	9f 93       	push	r25
    4b3a:	8f 93       	push	r24
    4b3c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4b40:	81 e8       	ldi	r24, 0x81	; 129
    4b42:	98 e0       	ldi	r25, 0x08	; 8
    4b44:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".swap_ralt_rgui: "); print_dec(kc.swap_ralt_rgui); print("\n");
    4b48:	8f e6       	ldi	r24, 0x6F	; 111
    4b4a:	98 e0       	ldi	r25, 0x08	; 8
    4b4c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4b50:	c3 fb       	bst	r28, 3
    4b52:	88 27       	eor	r24, r24
    4b54:	80 f9       	bld	r24, 0
    4b56:	1f 92       	push	r1
    4b58:	8f 93       	push	r24
    4b5a:	8c e6       	ldi	r24, 0x6C	; 108
    4b5c:	98 e0       	ldi	r25, 0x08	; 8
    4b5e:	9f 93       	push	r25
    4b60:	8f 93       	push	r24
    4b62:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4b66:	8a e6       	ldi	r24, 0x6A	; 106
    4b68:	98 e0       	ldi	r25, 0x08	; 8
    4b6a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".no_gui: "); print_dec(kc.no_gui); print("\n");
    4b6e:	80 e6       	ldi	r24, 0x60	; 96
    4b70:	98 e0       	ldi	r25, 0x08	; 8
    4b72:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4b76:	c4 fb       	bst	r28, 4
    4b78:	88 27       	eor	r24, r24
    4b7a:	80 f9       	bld	r24, 0
    4b7c:	1f 92       	push	r1
    4b7e:	8f 93       	push	r24
    4b80:	8d e5       	ldi	r24, 0x5D	; 93
    4b82:	98 e0       	ldi	r25, 0x08	; 8
    4b84:	9f 93       	push	r25
    4b86:	8f 93       	push	r24
    4b88:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4b8c:	8b e5       	ldi	r24, 0x5B	; 91
    4b8e:	98 e0       	ldi	r25, 0x08	; 8
    4b90:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".swap_grave_esc: "); print_dec(kc.swap_grave_esc); print("\n");
    4b94:	89 e4       	ldi	r24, 0x49	; 73
    4b96:	98 e0       	ldi	r25, 0x08	; 8
    4b98:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4b9c:	c5 fb       	bst	r28, 5
    4b9e:	88 27       	eor	r24, r24
    4ba0:	80 f9       	bld	r24, 0
    4ba2:	1f 92       	push	r1
    4ba4:	8f 93       	push	r24
    4ba6:	86 e4       	ldi	r24, 0x46	; 70
    4ba8:	98 e0       	ldi	r25, 0x08	; 8
    4baa:	9f 93       	push	r25
    4bac:	8f 93       	push	r24
    4bae:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4bb2:	84 e4       	ldi	r24, 0x44	; 68
    4bb4:	98 e0       	ldi	r25, 0x08	; 8
    4bb6:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".swap_backslash_backspace: "); print_dec(kc.swap_backslash_backspace); print("\n");
    4bba:	88 e2       	ldi	r24, 0x28	; 40
    4bbc:	98 e0       	ldi	r25, 0x08	; 8
    4bbe:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4bc2:	c6 fb       	bst	r28, 6
    4bc4:	88 27       	eor	r24, r24
    4bc6:	80 f9       	bld	r24, 0
    4bc8:	1f 92       	push	r1
    4bca:	8f 93       	push	r24
    4bcc:	85 e2       	ldi	r24, 0x25	; 37
    4bce:	98 e0       	ldi	r25, 0x08	; 8
    4bd0:	9f 93       	push	r25
    4bd2:	8f 93       	push	r24
    4bd4:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4bd8:	83 e2       	ldi	r24, 0x23	; 35
    4bda:	98 e0       	ldi	r25, 0x08	; 8
    4bdc:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print(".nkro: "); print_dec(kc.nkro); print("\n");
    4be0:	8b e1       	ldi	r24, 0x1B	; 27
    4be2:	98 e0       	ldi	r25, 0x08	; 8
    4be4:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4be8:	c7 fb       	bst	r28, 7
    4bea:	cc 27       	eor	r28, r28
    4bec:	c0 f9       	bld	r28, 0
    4bee:	1f 92       	push	r1
    4bf0:	cf 93       	push	r28
    4bf2:	88 e1       	ldi	r24, 0x18	; 24
    4bf4:	98 e0       	ldi	r25, 0x08	; 8
    4bf6:	9f 93       	push	r25
    4bf8:	8f 93       	push	r24
    4bfa:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4bfe:	86 e1       	ldi	r24, 0x16	; 22
    4c00:	98 e0       	ldi	r25, 0x08	; 8
    4c02:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4c06:	8d b7       	in	r24, 0x3d	; 61
    4c08:	9e b7       	in	r25, 0x3e	; 62
    4c0a:	4c 96       	adiw	r24, 0x1c	; 28
    4c0c:	0f b6       	in	r0, 0x3f	; 63
    4c0e:	f8 94       	cli
    4c10:	9e bf       	out	0x3e, r25	; 62
    4c12:	0f be       	out	0x3f, r0	; 63
    4c14:	8d bf       	out	0x3d, r24	; 61
    4c16:	04 c0       	rjmp	.+8      	; 0x4c20 <command_common+0x330>
/***********************************************************
 * Command common
 ***********************************************************/
static void command_common_help(void)
{
    print("\n\t- Magic -\n"
    4c18:	89 e7       	ldi	r24, 0x79	; 121
    4c1a:	97 e0       	ldi	r25, 0x07	; 7
    4c1c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            break;
        default:
            print("?");
            return false;
    }
    return true;
    4c20:	c1 e0       	ldi	r28, 0x01	; 1
    4c22:	b5 c0       	rjmp	.+362    	; 0x4d8e <command_common+0x49e>
            print("\n\nbootloader... ");
            wait_ms(1000);
            bootloader_jump(); // not return
            break;
        case KC_D:
            if (debug_enable) {
    4c24:	80 91 b7 01 	lds	r24, 0x01B7
    4c28:	c8 2f       	mov	r28, r24
    4c2a:	c1 70       	andi	r28, 0x01	; 1
    4c2c:	80 ff       	sbrs	r24, 0
    4c2e:	09 c0       	rjmp	.+18     	; 0x4c42 <command_common+0x352>
                print("\ndebug: off\n");
    4c30:	8c e3       	ldi	r24, 0x3C	; 60
    4c32:	9b e0       	ldi	r25, 0x0B	; 11
    4c34:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
                debug_matrix   = false;
    4c38:	80 91 b7 01 	lds	r24, 0x01B7
                debug_keyboard = false;
                debug_mouse    = false;
                debug_enable   = false;
    4c3c:	81 7f       	andi	r24, 0xF1	; 241
    4c3e:	8e 7f       	andi	r24, 0xFE	; 254
    4c40:	47 c0       	rjmp	.+142    	; 0x4cd0 <command_common+0x3e0>
            } else {
                print("\ndebug: on\n");
    4c42:	80 e3       	ldi	r24, 0x30	; 48
    4c44:	9b e0       	ldi	r25, 0x0B	; 11
    4c46:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
                debug_enable   = true;
    4c4a:	80 91 b7 01 	lds	r24, 0x01B7
    4c4e:	81 60       	ori	r24, 0x01	; 1
    4c50:	80 93 b7 01 	sts	0x01B7, r24
    4c54:	e5 cf       	rjmp	.-54     	; 0x4c20 <command_common+0x330>
            }
            break;
        case KC_X: // debug matrix toggle
            debug_matrix = !debug_matrix;
    4c56:	90 91 b7 01 	lds	r25, 0x01B7
    4c5a:	91 fb       	bst	r25, 1
    4c5c:	cc 27       	eor	r28, r28
    4c5e:	c0 f9       	bld	r28, 0
    4c60:	81 e0       	ldi	r24, 0x01	; 1
    4c62:	c8 27       	eor	r28, r24
    4c64:	89 2f       	mov	r24, r25
    4c66:	c0 fb       	bst	r28, 0
    4c68:	81 f9       	bld	r24, 1
    4c6a:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_matrix) {
    4c6e:	cc 23       	and	r28, r28
    4c70:	19 f0       	breq	.+6      	; 0x4c78 <command_common+0x388>
                print("\nmatrix: on\n");
    4c72:	83 e2       	ldi	r24, 0x23	; 35
    4c74:	9b e0       	ldi	r25, 0x0B	; 11
    4c76:	27 c0       	rjmp	.+78     	; 0x4cc6 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nmatrix: off\n");
    4c78:	85 e1       	ldi	r24, 0x15	; 21
    4c7a:	9b e0       	ldi	r25, 0x0B	; 11
    4c7c:	cf cf       	rjmp	.-98     	; 0x4c1c <command_common+0x32c>
            }
            break;
        case KC_K: // debug keyboard toggle
            debug_keyboard = !debug_keyboard;
    4c7e:	90 91 b7 01 	lds	r25, 0x01B7
    4c82:	92 fb       	bst	r25, 2
    4c84:	cc 27       	eor	r28, r28
    4c86:	c0 f9       	bld	r28, 0
    4c88:	81 e0       	ldi	r24, 0x01	; 1
    4c8a:	c8 27       	eor	r28, r24
    4c8c:	89 2f       	mov	r24, r25
    4c8e:	c0 fb       	bst	r28, 0
    4c90:	82 f9       	bld	r24, 2
    4c92:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_keyboard) {
    4c96:	cc 23       	and	r28, r28
    4c98:	19 f0       	breq	.+6      	; 0x4ca0 <command_common+0x3b0>
                print("\nkeyboard: on\n");
    4c9a:	86 e0       	ldi	r24, 0x06	; 6
    4c9c:	9b e0       	ldi	r25, 0x0B	; 11
    4c9e:	13 c0       	rjmp	.+38     	; 0x4cc6 <command_common+0x3d6>
                debug_enable = true;
            } else {
                print("\nkeyboard: off\n");
    4ca0:	86 ef       	ldi	r24, 0xF6	; 246
    4ca2:	9a e0       	ldi	r25, 0x0A	; 10
    4ca4:	bb cf       	rjmp	.-138    	; 0x4c1c <command_common+0x32c>
            }
            break;
        case KC_M: // debug mouse toggle
            debug_mouse = !debug_mouse;
    4ca6:	90 91 b7 01 	lds	r25, 0x01B7
    4caa:	93 fb       	bst	r25, 3
    4cac:	cc 27       	eor	r28, r28
    4cae:	c0 f9       	bld	r28, 0
    4cb0:	81 e0       	ldi	r24, 0x01	; 1
    4cb2:	c8 27       	eor	r28, r24
    4cb4:	89 2f       	mov	r24, r25
    4cb6:	c0 fb       	bst	r28, 0
    4cb8:	83 f9       	bld	r24, 3
    4cba:	80 93 b7 01 	sts	0x01B7, r24
            if (debug_mouse) {
    4cbe:	cc 23       	and	r28, r28
    4cc0:	51 f0       	breq	.+20     	; 0x4cd6 <command_common+0x3e6>
                print("\nmouse: on\n");
    4cc2:	8a ee       	ldi	r24, 0xEA	; 234
    4cc4:	9a e0       	ldi	r25, 0x0A	; 10
    4cc6:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
                debug_enable = true;
    4cca:	80 91 b7 01 	lds	r24, 0x01B7
    4cce:	81 60       	ori	r24, 0x01	; 1
    4cd0:	80 93 b7 01 	sts	0x01B7, r24
    4cd4:	5c c0       	rjmp	.+184    	; 0x4d8e <command_common+0x49e>
            } else {
                print("\nmouse: off\n");
    4cd6:	8d ed       	ldi	r24, 0xDD	; 221
    4cd8:	9a e0       	ldi	r25, 0x0A	; 10
    4cda:	a0 cf       	rjmp	.-192    	; 0x4c1c <command_common+0x32c>
            }
            break;
        case KC_V: // print version & information
            print("\n\t- Version -\n");
    4cdc:	8e ec       	ldi	r24, 0xCE	; 206
    4cde:	9a e0       	ldi	r25, 0x0A	; 10
    4ce0:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            print("DESC: " STR(DESCRIPTION) "\n");
    4ce4:	8b e9       	ldi	r24, 0x9B	; 155
    4ce6:	9a e0       	ldi	r25, 0x0A	; 10
    4ce8:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            print("VID: " STR(VENDOR_ID) "(" STR(MANUFACTURER) ") "
    4cec:	89 e5       	ldi	r24, 0x59	; 89
    4cee:	9a e0       	ldi	r25, 0x0A	; 10
    4cf0:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
                  "PID: " STR(PRODUCT_ID) "(" STR(PRODUCT) ") "
                  "VER: " STR(DEVICE_VER) "\n");
            print("BUILD: " STR(VERSION) " (" __TIME__ " " __DATE__ ")\n");
    4cf4:	82 e3       	ldi	r24, 0x32	; 50
    4cf6:	9a e0       	ldi	r25, 0x0A	; 10
    4cf8:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            /* build options */
            print("OPTIONS:"
    4cfc:	82 ef       	ldi	r24, 0xF2	; 242
    4cfe:	99 e0       	ldi	r25, 0x09	; 9
    4d00:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
#ifdef KEYMAP_SECTION_ENABLE
            " KEYMAP_SECTION"
#endif
            " " STR(BOOTLOADER_SIZE) "\n");

            print("GCC: " STR(__GNUC__) "." STR(__GNUC_MINOR__) "." STR(__GNUC_PATCHLEVEL__)
    4d04:	84 ec       	ldi	r24, 0xC4	; 196
    4d06:	99 e0       	ldi	r25, 0x09	; 9
    4d08:	89 cf       	rjmp	.-238    	; 0x4c1c <command_common+0x32c>
            // TODO
            );
#endif
            break;
        case KC_S:
            print("\n\t- Status -\n");
    4d0a:	86 eb       	ldi	r24, 0xB6	; 182
    4d0c:	99 e0       	ldi	r25, 0x09	; 9
    4d0e:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            print_val_hex8(host_keyboard_leds());
    4d12:	0e 94 5f 10 	call	0x20be	; 0x20be <host_keyboard_leds>
    4d16:	1f 92       	push	r1
    4d18:	8f 93       	push	r24
    4d1a:	8c e9       	ldi	r24, 0x9C	; 156
    4d1c:	99 e0       	ldi	r25, 0x09	; 9
    4d1e:	9f 93       	push	r25
    4d20:	8f 93       	push	r24
    4d22:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
            print_val_hex8(keyboard_protocol);
    4d26:	80 91 0b 01 	lds	r24, 0x010B
    4d2a:	1f 92       	push	r1
    4d2c:	8f 93       	push	r24
    4d2e:	85 e8       	ldi	r24, 0x85	; 133
    4d30:	99 e0       	ldi	r25, 0x09	; 9
    4d32:	9f 93       	push	r25
    4d34:	8f 93       	push	r24
    4d36:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
            print_val_hex8(keyboard_idle);
    4d3a:	80 91 58 01 	lds	r24, 0x0158
    4d3e:	1f 92       	push	r1
    4d40:	8f 93       	push	r24
    4d42:	82 e7       	ldi	r24, 0x72	; 114
    4d44:	99 e0       	ldi	r25, 0x09	; 9
    4d46:	9f 93       	push	r25
    4d48:	8f 93       	push	r24
    4d4a:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
#ifdef NKRO_ENABLE
            print_val_hex8(keyboard_nkro);
#endif
            print_val_hex32(timer_read32());
    4d4e:	0e 94 df 1c 	call	0x39be	; 0x39be <timer_read32>
    4d52:	9f 93       	push	r25
    4d54:	8f 93       	push	r24
    4d56:	7f 93       	push	r23
    4d58:	6f 93       	push	r22
    4d5a:	8b e5       	ldi	r24, 0x5B	; 91
    4d5c:	99 e0       	ldi	r25, 0x09	; 9
    4d5e:	9f 93       	push	r25
    4d60:	8f 93       	push	r24
    4d62:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
#ifdef PROTOCOL_PJRC
#   if USB_COUNT_SOF
            print_val_hex8(usbSofCount);
#   endif
#endif
            break;
    4d66:	8d b7       	in	r24, 0x3d	; 61
    4d68:	9e b7       	in	r25, 0x3e	; 62
    4d6a:	42 96       	adiw	r24, 0x12	; 18
    4d6c:	0f b6       	in	r0, 0x3f	; 63
    4d6e:	f8 94       	cli
    4d70:	9e bf       	out	0x3e, r25	; 62
    4d72:	0f be       	out	0x3f, r0	; 63
    4d74:	8d bf       	out	0x3d, r24	; 61
    4d76:	54 cf       	rjmp	.-344    	; 0x4c20 <command_common+0x330>
#endif
        case KC_ESC:
        case KC_GRV:
        case KC_0:
        case KC_F10:
            switch_default_layer(0);
    4d78:	80 e0       	ldi	r24, 0x00	; 0
    4d7a:	01 c0       	rjmp	.+2      	; 0x4d7e <command_common+0x48e>
            break;
        case KC_1 ... KC_9:
            switch_default_layer((code - KC_1) + 1);
    4d7c:	8d 51       	subi	r24, 0x1D	; 29
            break;
        case KC_F1 ... KC_F9:
            switch_default_layer((code - KC_F1) + 1);
    4d7e:	0e 94 58 24 	call	0x48b0	; 0x48b0 <switch_default_layer>
    4d82:	4e cf       	rjmp	.-356    	; 0x4c20 <command_common+0x330>
            break;
        default:
            print("?");
    4d84:	89 e5       	ldi	r24, 0x59	; 89
    4d86:	99 e0       	ldi	r25, 0x09	; 9
    4d88:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            return false;
    4d8c:	c0 e0       	ldi	r28, 0x00	; 0
    }
    return true;
}
    4d8e:	8c 2f       	mov	r24, r28
    4d90:	cf 91       	pop	r28
    4d92:	08 95       	ret

00004d94 <command_extra>:
bool command_extra(uint8_t code) __attribute__ ((weak));
bool command_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4d94:	80 e0       	ldi	r24, 0x00	; 0
    4d96:	08 95       	ret

00004d98 <command_console_extra>:
bool command_console_extra(uint8_t code) __attribute__ ((weak));
bool command_console_extra(uint8_t code)
{
    (void)code;
    return false;
}
    4d98:	80 e0       	ldi	r24, 0x00	; 0
    4d9a:	08 95       	ret

00004d9c <command_proc>:

command_state_t command_state = ONESHOT;


bool command_proc(uint8_t code)
{
    4d9c:	cf 93       	push	r28
    4d9e:	c8 2f       	mov	r28, r24
    switch (command_state) {
    4da0:	80 91 c7 01 	lds	r24, 0x01C7
    4da4:	81 30       	cpi	r24, 0x01	; 1
    4da6:	71 f0       	breq	.+28     	; 0x4dc4 <command_proc+0x28>
    4da8:	20 f0       	brcs	.+8      	; 0x4db2 <command_proc+0x16>
    4daa:	82 30       	cpi	r24, 0x02	; 2
    4dac:	09 f4       	brne	.+2      	; 0x4db0 <command_proc+0x14>
    4dae:	4b c0       	rjmp	.+150    	; 0x4e46 <command_proc+0xaa>
    4db0:	42 c1       	rjmp	.+644    	; 0x5036 <command_proc+0x29a>
        case ONESHOT:
            if (!IS_COMMAND())
    4db2:	e0 91 0c 01 	lds	r30, 0x010C
    4db6:	f0 91 0d 01 	lds	r31, 0x010D
    4dba:	80 81       	ld	r24, Z
    4dbc:	82 32       	cpi	r24, 0x22	; 34
    4dbe:	09 f0       	breq	.+2      	; 0x4dc2 <command_proc+0x26>
    4dc0:	3c c1       	rjmp	.+632    	; 0x503a <command_proc+0x29e>
    4dc2:	07 c0       	rjmp	.+14     	; 0x4dd2 <command_proc+0x36>
                return false;
            return (command_extra(code) || command_common(code));
            break;
        case CONSOLE:
            if (IS_COMMAND())
    4dc4:	e0 91 0c 01 	lds	r30, 0x010C
    4dc8:	f0 91 0d 01 	lds	r31, 0x010D
    4dcc:	80 81       	ld	r24, Z
    4dce:	82 32       	cpi	r24, 0x22	; 34
    4dd0:	61 f4       	brne	.+24     	; 0x4dea <command_proc+0x4e>
                return (command_extra(code) || command_common(code));
    4dd2:	8c 2f       	mov	r24, r28
    4dd4:	0e 94 ca 26 	call	0x4d94	; 0x4d94 <command_extra>
    4dd8:	81 11       	cpse	r24, r1
    4dda:	04 c0       	rjmp	.+8      	; 0x4de4 <command_proc+0x48>
    4ddc:	8c 2f       	mov	r24, r28
    4dde:	0e 94 78 24 	call	0x48f0	; 0x48f0 <command_common>
    4de2:	2f c0       	rjmp	.+94     	; 0x4e42 <command_proc+0xa6>
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	90 e0       	ldi	r25, 0x00	; 0
    4de8:	2c c0       	rjmp	.+88     	; 0x4e42 <command_proc+0xa6>
            else
                return (command_console_extra(code) || command_console(code));
    4dea:	8c 2f       	mov	r24, r28
    4dec:	0e 94 cc 26 	call	0x4d98	; 0x4d98 <command_console_extra>
    4df0:	81 11       	cpse	r24, r1
    4df2:	26 c0       	rjmp	.+76     	; 0x4e40 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4df4:	c4 31       	cpi	r28, 0x14	; 20
    4df6:	e1 f0       	breq	.+56     	; 0x4e30 <command_proc+0x94>
    4df8:	70 f4       	brcc	.+28     	; 0x4e16 <command_proc+0x7a>
    4dfa:	cb 30       	cpi	r28, 0x0B	; 11
    4dfc:	81 f0       	breq	.+32     	; 0x4e1e <command_proc+0x82>
    4dfe:	c0 31       	cpi	r28, 0x10	; 16
    4e00:	d1 f4       	brne	.+52     	; 0x4e36 <command_proc+0x9a>
        case KC_ESC:
            command_state = ONESHOT;
            return false;
#ifdef MOUSEKEY_ENABLE
        case KC_M:
            mousekey_console_help();
    4e02:	0e 94 20 23 	call	0x4640	; 0x4640 <mousekey_console_help>
            print("M> ");
    4e06:	85 e4       	ldi	r24, 0x45	; 69
    4e08:	97 e0       	ldi	r25, 0x07	; 7
    4e0a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
            command_state = MOUSEKEY;
    4e0e:	82 e0       	ldi	r24, 0x02	; 2
    4e10:	80 93 c7 01 	sts	0x01C7, r24
    4e14:	15 c0       	rjmp	.+42     	; 0x4e40 <command_proc+0xa4>
    );
}

static bool command_console(uint8_t code)
{
    switch (code) {
    4e16:	c9 32       	cpi	r28, 0x29	; 41
    4e18:	59 f0       	breq	.+22     	; 0x4e30 <command_proc+0x94>
    4e1a:	c8 33       	cpi	r28, 0x38	; 56
    4e1c:	61 f4       	brne	.+24     	; 0x4e36 <command_proc+0x9a>
/***********************************************************
 * Command console
 ***********************************************************/
static void command_console_help(void)
{
    print("\n\t- Console -\n"
    4e1e:	82 e5       	ldi	r24, 0x52	; 82
    4e20:	97 e0       	ldi	r25, 0x07	; 7
    4e22:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
#endif
        default:
            print("?");
            return false;
    }
    print("C> ");
    4e26:	89 e4       	ldi	r24, 0x49	; 73
    4e28:	97 e0       	ldi	r25, 0x07	; 7
    4e2a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4e2e:	08 c0       	rjmp	.+16     	; 0x4e40 <command_proc+0xa4>
        case KC_SLASH: /* ? */
            command_console_help();
            break;
        case KC_Q:
        case KC_ESC:
            command_state = ONESHOT;
    4e30:	10 92 c7 01 	sts	0x01C7, r1
    4e34:	04 c1       	rjmp	.+520    	; 0x503e <command_proc+0x2a2>
            print("M> ");
            command_state = MOUSEKEY;
            return true;
#endif
        default:
            print("?");
    4e36:	83 e4       	ldi	r24, 0x43	; 67
    4e38:	97 e0       	ldi	r25, 0x07	; 7
    4e3a:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4e3e:	ff c0       	rjmp	.+510    	; 0x503e <command_proc+0x2a2>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    4e40:	81 e0       	ldi	r24, 0x01	; 1
    4e42:	81 70       	andi	r24, 0x01	; 1
    4e44:	fe c0       	rjmp	.+508    	; 0x5042 <command_proc+0x2a6>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4e46:	c4 32       	cpi	r28, 0x24	; 36
    4e48:	28 f5       	brcc	.+74     	; 0x4e94 <command_proc+0xf8>
    4e4a:	ce 31       	cpi	r28, 0x1E	; 30
    4e4c:	08 f0       	brcs	.+2      	; 0x4e50 <command_proc+0xb4>
    4e4e:	c1 c0       	rjmp	.+386    	; 0x4fd2 <command_proc+0x236>
    4e50:	cb 30       	cpi	r28, 0x0B	; 11
    4e52:	a1 f1       	breq	.+104    	; 0x4ebc <command_proc+0x120>
    4e54:	d0 f4       	brcc	.+52     	; 0x4e8a <command_proc+0xee>
    4e56:	c7 30       	cpi	r28, 0x07	; 7
    4e58:	09 f0       	breq	.+2      	; 0x4e5c <command_proc+0xc0>
    4e5a:	d3 c0       	rjmp	.+422    	; 0x5002 <command_proc+0x266>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
            break;
        case KC_D:
            mk_delay = MOUSEKEY_DELAY/10;
    4e5c:	8e e1       	ldi	r24, 0x1E	; 30
    4e5e:	80 93 13 01 	sts	0x0113, r24
            mk_interval = MOUSEKEY_INTERVAL;
    4e62:	82 e3       	ldi	r24, 0x32	; 50
    4e64:	80 93 12 01 	sts	0x0112, r24
            mk_max_speed = MOUSEKEY_MAX_SPEED;
    4e68:	8a e0       	ldi	r24, 0x0A	; 10
    4e6a:	80 93 11 01 	sts	0x0111, r24
            mk_time_to_max = MOUSEKEY_TIME_TO_MAX;
    4e6e:	84 e1       	ldi	r24, 0x14	; 20
    4e70:	80 93 10 01 	sts	0x0110, r24
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
    4e74:	88 e0       	ldi	r24, 0x08	; 8
    4e76:	80 93 0f 01 	sts	0x010F, r24
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
    4e7a:	88 e2       	ldi	r24, 0x28	; 40
    4e7c:	80 93 0e 01 	sts	0x010E, r24
            print("set default\n");
    4e80:	89 ee       	ldi	r24, 0xE9	; 233
    4e82:	95 e0       	ldi	r25, 0x05	; 5
    4e84:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4e88:	bf c0       	rjmp	.+382    	; 0x5008 <command_proc+0x26c>
            "See http://en.wikipedia.org/wiki/Mouse_keys\n", MOUSEKEY_MOVE_DELTA,  MOUSEKEY_WHEEL_DELTA);
}

static bool mousekey_console(uint8_t code)
{
    switch (code) {
    4e8a:	c3 31       	cpi	r28, 0x13	; 19
    4e8c:	49 f1       	breq	.+82     	; 0x4ee0 <command_proc+0x144>
    4e8e:	c4 31       	cpi	r28, 0x14	; 20
    4e90:	c1 f0       	breq	.+48     	; 0x4ec2 <command_proc+0x126>
    4e92:	b7 c0       	rjmp	.+366    	; 0x5002 <command_proc+0x266>
    4e94:	cb 34       	cpi	r28, 0x4B	; 75
    4e96:	09 f4       	brne	.+2      	; 0x4e9a <command_proc+0xfe>
    4e98:	a9 c0       	rjmp	.+338    	; 0x4fec <command_proc+0x250>
    4e9a:	28 f4       	brcc	.+10     	; 0x4ea6 <command_proc+0x10a>
    4e9c:	c9 32       	cpi	r28, 0x29	; 41
    4e9e:	89 f0       	breq	.+34     	; 0x4ec2 <command_proc+0x126>
    4ea0:	c8 33       	cpi	r28, 0x38	; 56
    4ea2:	61 f0       	breq	.+24     	; 0x4ebc <command_proc+0x120>
    4ea4:	ae c0       	rjmp	.+348    	; 0x5002 <command_proc+0x266>
    4ea6:	c1 35       	cpi	r28, 0x51	; 81
    4ea8:	09 f4       	brne	.+2      	; 0x4eac <command_proc+0x110>
    4eaa:	9e c0       	rjmp	.+316    	; 0x4fe8 <command_proc+0x24c>
    4eac:	c2 35       	cpi	r28, 0x52	; 82
    4eae:	09 f4       	brne	.+2      	; 0x4eb2 <command_proc+0x116>
    4eb0:	99 c0       	rjmp	.+306    	; 0x4fe4 <command_proc+0x248>
    4eb2:	ce 34       	cpi	r28, 0x4E	; 78
    4eb4:	09 f0       	breq	.+2      	; 0x4eb8 <command_proc+0x11c>
    4eb6:	a5 c0       	rjmp	.+330    	; 0x5002 <command_proc+0x266>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4eb8:	6a e0       	ldi	r22, 0x0A	; 10
    4eba:	9e c0       	rjmp	.+316    	; 0x4ff8 <command_proc+0x25c>
static bool mousekey_console(uint8_t code)
{
    switch (code) {
        case KC_H:
        case KC_SLASH: /* ? */
            mousekey_console_help();
    4ebc:	0e 94 20 23 	call	0x4640	; 0x4640 <mousekey_console_help>
    4ec0:	a3 c0       	rjmp	.+326    	; 0x5008 <command_proc+0x26c>
            break;
        case KC_Q:
        case KC_ESC:
            if (mousekey_param) {
    4ec2:	80 91 c6 01 	lds	r24, 0x01C6
    4ec6:	88 23       	and	r24, r24
    4ec8:	19 f0       	breq	.+6      	; 0x4ed0 <command_proc+0x134>
                mousekey_param = 0;
    4eca:	10 92 c6 01 	sts	0x01C6, r1
    4ece:	9c c0       	rjmp	.+312    	; 0x5008 <command_proc+0x26c>
            } else {
                print("C> ");
    4ed0:	86 ef       	ldi	r24, 0xF6	; 246
    4ed2:	95 e0       	ldi	r25, 0x05	; 5
    4ed4:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
                command_state = CONSOLE;
    4ed8:	81 e0       	ldi	r24, 0x01	; 1
    4eda:	80 93 c7 01 	sts	0x01C7, r24
    4ede:	b1 c0       	rjmp	.+354    	; 0x5042 <command_proc+0x2a6>
 ***********************************************************/
static uint8_t mousekey_param = 0;

static void mousekey_param_print(void)
{
    print("\n\t- Values -\n");
    4ee0:	80 ed       	ldi	r24, 0xD0	; 208
    4ee2:	95 e0       	ldi	r25, 0x05	; 5
    4ee4:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("1: delay(*10ms): "); pdec(mk_delay); print("\n");
    4ee8:	8e eb       	ldi	r24, 0xBE	; 190
    4eea:	95 e0       	ldi	r25, 0x05	; 5
    4eec:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4ef0:	80 91 13 01 	lds	r24, 0x0113
    4ef4:	1f 92       	push	r1
    4ef6:	8f 93       	push	r24
    4ef8:	8b eb       	ldi	r24, 0xBB	; 187
    4efa:	95 e0       	ldi	r25, 0x05	; 5
    4efc:	9f 93       	push	r25
    4efe:	8f 93       	push	r24
    4f00:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4f04:	89 eb       	ldi	r24, 0xB9	; 185
    4f06:	95 e0       	ldi	r25, 0x05	; 5
    4f08:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("2: interval(ms): "); pdec(mk_interval); print("\n");
    4f0c:	87 ea       	ldi	r24, 0xA7	; 167
    4f0e:	95 e0       	ldi	r25, 0x05	; 5
    4f10:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4f14:	80 91 12 01 	lds	r24, 0x0112
    4f18:	1f 92       	push	r1
    4f1a:	8f 93       	push	r24
    4f1c:	84 ea       	ldi	r24, 0xA4	; 164
    4f1e:	95 e0       	ldi	r25, 0x05	; 5
    4f20:	9f 93       	push	r25
    4f22:	8f 93       	push	r24
    4f24:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4f28:	82 ea       	ldi	r24, 0xA2	; 162
    4f2a:	95 e0       	ldi	r25, 0x05	; 5
    4f2c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("3: max_speed: "); pdec(mk_max_speed); print("\n");
    4f30:	83 e9       	ldi	r24, 0x93	; 147
    4f32:	95 e0       	ldi	r25, 0x05	; 5
    4f34:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4f38:	80 91 11 01 	lds	r24, 0x0111
    4f3c:	1f 92       	push	r1
    4f3e:	8f 93       	push	r24
    4f40:	80 e9       	ldi	r24, 0x90	; 144
    4f42:	95 e0       	ldi	r25, 0x05	; 5
    4f44:	9f 93       	push	r25
    4f46:	8f 93       	push	r24
    4f48:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4f4c:	8e e8       	ldi	r24, 0x8E	; 142
    4f4e:	95 e0       	ldi	r25, 0x05	; 5
    4f50:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("4: time_to_max: "); pdec(mk_time_to_max); print("\n");
    4f54:	8d e7       	ldi	r24, 0x7D	; 125
    4f56:	95 e0       	ldi	r25, 0x05	; 5
    4f58:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4f5c:	80 91 10 01 	lds	r24, 0x0110
    4f60:	1f 92       	push	r1
    4f62:	8f 93       	push	r24
    4f64:	8a e7       	ldi	r24, 0x7A	; 122
    4f66:	95 e0       	ldi	r25, 0x05	; 5
    4f68:	9f 93       	push	r25
    4f6a:	8f 93       	push	r24
    4f6c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4f70:	88 e7       	ldi	r24, 0x78	; 120
    4f72:	95 e0       	ldi	r25, 0x05	; 5
    4f74:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("5: wheel_max_speed: "); pdec(mk_wheel_max_speed); print("\n");
    4f78:	83 e6       	ldi	r24, 0x63	; 99
    4f7a:	95 e0       	ldi	r25, 0x05	; 5
    4f7c:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4f80:	80 91 0f 01 	lds	r24, 0x010F
    4f84:	1f 92       	push	r1
    4f86:	8f 93       	push	r24
    4f88:	80 e6       	ldi	r24, 0x60	; 96
    4f8a:	95 e0       	ldi	r25, 0x05	; 5
    4f8c:	9f 93       	push	r25
    4f8e:	8f 93       	push	r24
    4f90:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4f94:	8e e5       	ldi	r24, 0x5E	; 94
    4f96:	95 e0       	ldi	r25, 0x05	; 5
    4f98:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    print("6: wheel_time_to_max: "); pdec(mk_wheel_time_to_max); print("\n");
    4f9c:	87 e4       	ldi	r24, 0x47	; 71
    4f9e:	95 e0       	ldi	r25, 0x05	; 5
    4fa0:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4fa4:	80 91 0e 01 	lds	r24, 0x010E
    4fa8:	1f 92       	push	r1
    4faa:	8f 93       	push	r24
    4fac:	84 e4       	ldi	r24, 0x44	; 68
    4fae:	95 e0       	ldi	r25, 0x05	; 5
    4fb0:	9f 93       	push	r25
    4fb2:	8f 93       	push	r24
    4fb4:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    4fb8:	82 e4       	ldi	r24, 0x42	; 66
    4fba:	95 e0       	ldi	r25, 0x05	; 5
    4fbc:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
    4fc0:	8d b7       	in	r24, 0x3d	; 61
    4fc2:	9e b7       	in	r25, 0x3e	; 62
    4fc4:	48 96       	adiw	r24, 0x18	; 24
    4fc6:	0f b6       	in	r0, 0x3f	; 63
    4fc8:	f8 94       	cli
    4fca:	9e bf       	out	0x3e, r25	; 62
    4fcc:	0f be       	out	0x3f, r0	; 63
    4fce:	8d bf       	out	0x3d, r24	; 61
    4fd0:	1b c0       	rjmp	.+54     	; 0x5008 <command_proc+0x26c>
    4fd2:	ce 51       	subi	r28, 0x1E	; 30
    4fd4:	ec 2f       	mov	r30, r28
    4fd6:	f0 e0       	ldi	r31, 0x00	; 0
    4fd8:	e8 5d       	subi	r30, 0xD8	; 216
    4fda:	fe 4f       	sbci	r31, 0xFE	; 254
        case KC_2:
        case KC_3:
        case KC_4:
        case KC_5:
        case KC_6:
            mousekey_param = numkey2num(code);
    4fdc:	80 81       	ld	r24, Z
    4fde:	80 93 c6 01 	sts	0x01C6, r24
    4fe2:	12 c0       	rjmp	.+36     	; 0x5008 <command_proc+0x26c>
            break;
        case KC_UP:
            mousekey_param_inc(mousekey_param, 1);
    4fe4:	61 e0       	ldi	r22, 0x01	; 1
    4fe6:	03 c0       	rjmp	.+6      	; 0x4fee <command_proc+0x252>
            break;
        case KC_DOWN:
            mousekey_param_dec(mousekey_param, 1);
    4fe8:	61 e0       	ldi	r22, 0x01	; 1
    4fea:	06 c0       	rjmp	.+12     	; 0x4ff8 <command_proc+0x25c>
            break;
        case KC_PGUP:
            mousekey_param_inc(mousekey_param, 10);
    4fec:	6a e0       	ldi	r22, 0x0A	; 10
    4fee:	80 91 c6 01 	lds	r24, 0x01C6
    4ff2:	0e 94 37 23 	call	0x466e	; 0x466e <mousekey_param_inc>
    4ff6:	08 c0       	rjmp	.+16     	; 0x5008 <command_proc+0x26c>
            break;
        case KC_PGDN:
            mousekey_param_dec(mousekey_param, 10);
    4ff8:	80 91 c6 01 	lds	r24, 0x01C6
    4ffc:	0e 94 da 23 	call	0x47b4	; 0x47b4 <mousekey_param_dec>
    5000:	03 c0       	rjmp	.+6      	; 0x5008 <command_proc+0x26c>
            mk_wheel_max_speed = MOUSEKEY_WHEEL_MAX_SPEED;
            mk_wheel_time_to_max = MOUSEKEY_WHEEL_TIME_TO_MAX;
            print("set default\n");
            break;
        default:
            print("?");
    5002:	87 ee       	ldi	r24, 0xE7	; 231
    5004:	95 e0       	ldi	r25, 0x05	; 5
    5006:	13 c0       	rjmp	.+38     	; 0x502e <command_proc+0x292>
            return false;
    }
    if (mousekey_param) {
    5008:	80 91 c6 01 	lds	r24, 0x01C6
    500c:	88 23       	and	r24, r24
    500e:	69 f0       	breq	.+26     	; 0x502a <command_proc+0x28e>
        xprintf("M%d> ", mousekey_param);
    5010:	1f 92       	push	r1
    5012:	8f 93       	push	r24
    5014:	81 ee       	ldi	r24, 0xE1	; 225
    5016:	95 e0       	ldi	r25, 0x05	; 5
    5018:	9f 93       	push	r25
    501a:	8f 93       	push	r24
    501c:	0e 94 a3 06 	call	0xd46	; 0xd46 <__xprintf>
    5020:	0f 90       	pop	r0
    5022:	0f 90       	pop	r0
    5024:	0f 90       	pop	r0
    5026:	0f 90       	pop	r0
    5028:	04 c0       	rjmp	.+8      	; 0x5032 <command_proc+0x296>
    } else {
        print("M>" );
    502a:	8e ed       	ldi	r24, 0xDE	; 222
    502c:	95 e0       	ldi	r25, 0x05	; 5
    502e:	0e 94 0a 06 	call	0xc14	; 0xc14 <xputs>
#endif
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
    5032:	81 e0       	ldi	r24, 0x01	; 1
    5034:	06 c0       	rjmp	.+12     	; 0x5042 <command_proc+0x2a6>
        case MOUSEKEY:
            mousekey_console(code);
            break;
#endif
        default:
            command_state = ONESHOT;
    5036:	10 92 c7 01 	sts	0x01C7, r1
bool command_proc(uint8_t code)
{
    switch (command_state) {
        case ONESHOT:
            if (!IS_COMMAND())
                return false;
    503a:	80 e0       	ldi	r24, 0x00	; 0
    503c:	02 c0       	rjmp	.+4      	; 0x5042 <command_proc+0x2a6>
            break;
        case CONSOLE:
            if (IS_COMMAND())
                return (command_extra(code) || command_common(code));
            else
                return (command_console_extra(code) || command_console(code));
    503e:	80 e0       	ldi	r24, 0x00	; 0
    5040:	00 cf       	rjmp	.-512    	; 0x4e42 <command_proc+0xa6>
        default:
            command_state = ONESHOT;
            return false;
    }
    return true;
}
    5042:	cf 91       	pop	r28
    5044:	08 95       	ret

00005046 <__fixsfsi>:
    5046:	0e 94 2a 28 	call	0x5054	; 0x5054 <__fixunssfsi>
    504a:	68 94       	set
    504c:	b1 11       	cpse	r27, r1
    504e:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__fp_szero>
    5052:	08 95       	ret

00005054 <__fixunssfsi>:
    5054:	0e 94 9e 28 	call	0x513c	; 0x513c <__fp_splitA>
    5058:	88 f0       	brcs	.+34     	; 0x507c <__fixunssfsi+0x28>
    505a:	9f 57       	subi	r25, 0x7F	; 127
    505c:	98 f0       	brcs	.+38     	; 0x5084 <__fixunssfsi+0x30>
    505e:	b9 2f       	mov	r27, r25
    5060:	99 27       	eor	r25, r25
    5062:	b7 51       	subi	r27, 0x17	; 23
    5064:	b0 f0       	brcs	.+44     	; 0x5092 <__fixunssfsi+0x3e>
    5066:	e1 f0       	breq	.+56     	; 0x50a0 <__fixunssfsi+0x4c>
    5068:	66 0f       	add	r22, r22
    506a:	77 1f       	adc	r23, r23
    506c:	88 1f       	adc	r24, r24
    506e:	99 1f       	adc	r25, r25
    5070:	1a f0       	brmi	.+6      	; 0x5078 <__fixunssfsi+0x24>
    5072:	ba 95       	dec	r27
    5074:	c9 f7       	brne	.-14     	; 0x5068 <__fixunssfsi+0x14>
    5076:	14 c0       	rjmp	.+40     	; 0x50a0 <__fixunssfsi+0x4c>
    5078:	b1 30       	cpi	r27, 0x01	; 1
    507a:	91 f0       	breq	.+36     	; 0x50a0 <__fixunssfsi+0x4c>
    507c:	0e 94 b8 28 	call	0x5170	; 0x5170 <__fp_zero>
    5080:	b1 e0       	ldi	r27, 0x01	; 1
    5082:	08 95       	ret
    5084:	0c 94 b8 28 	jmp	0x5170	; 0x5170 <__fp_zero>
    5088:	67 2f       	mov	r22, r23
    508a:	78 2f       	mov	r23, r24
    508c:	88 27       	eor	r24, r24
    508e:	b8 5f       	subi	r27, 0xF8	; 248
    5090:	39 f0       	breq	.+14     	; 0x50a0 <__fixunssfsi+0x4c>
    5092:	b9 3f       	cpi	r27, 0xF9	; 249
    5094:	cc f3       	brlt	.-14     	; 0x5088 <__fixunssfsi+0x34>
    5096:	86 95       	lsr	r24
    5098:	77 95       	ror	r23
    509a:	67 95       	ror	r22
    509c:	b3 95       	inc	r27
    509e:	d9 f7       	brne	.-10     	; 0x5096 <__fixunssfsi+0x42>
    50a0:	3e f4       	brtc	.+14     	; 0x50b0 <__fixunssfsi+0x5c>
    50a2:	90 95       	com	r25
    50a4:	80 95       	com	r24
    50a6:	70 95       	com	r23
    50a8:	61 95       	neg	r22
    50aa:	7f 4f       	sbci	r23, 0xFF	; 255
    50ac:	8f 4f       	sbci	r24, 0xFF	; 255
    50ae:	9f 4f       	sbci	r25, 0xFF	; 255
    50b0:	08 95       	ret

000050b2 <__floatunsisf>:
    50b2:	e8 94       	clt
    50b4:	09 c0       	rjmp	.+18     	; 0x50c8 <__floatsisf+0x12>

000050b6 <__floatsisf>:
    50b6:	97 fb       	bst	r25, 7
    50b8:	3e f4       	brtc	.+14     	; 0x50c8 <__floatsisf+0x12>
    50ba:	90 95       	com	r25
    50bc:	80 95       	com	r24
    50be:	70 95       	com	r23
    50c0:	61 95       	neg	r22
    50c2:	7f 4f       	sbci	r23, 0xFF	; 255
    50c4:	8f 4f       	sbci	r24, 0xFF	; 255
    50c6:	9f 4f       	sbci	r25, 0xFF	; 255
    50c8:	99 23       	and	r25, r25
    50ca:	a9 f0       	breq	.+42     	; 0x50f6 <__floatsisf+0x40>
    50cc:	f9 2f       	mov	r31, r25
    50ce:	96 e9       	ldi	r25, 0x96	; 150
    50d0:	bb 27       	eor	r27, r27
    50d2:	93 95       	inc	r25
    50d4:	f6 95       	lsr	r31
    50d6:	87 95       	ror	r24
    50d8:	77 95       	ror	r23
    50da:	67 95       	ror	r22
    50dc:	b7 95       	ror	r27
    50de:	f1 11       	cpse	r31, r1
    50e0:	f8 cf       	rjmp	.-16     	; 0x50d2 <__floatsisf+0x1c>
    50e2:	fa f4       	brpl	.+62     	; 0x5122 <__floatsisf+0x6c>
    50e4:	bb 0f       	add	r27, r27
    50e6:	11 f4       	brne	.+4      	; 0x50ec <__floatsisf+0x36>
    50e8:	60 ff       	sbrs	r22, 0
    50ea:	1b c0       	rjmp	.+54     	; 0x5122 <__floatsisf+0x6c>
    50ec:	6f 5f       	subi	r22, 0xFF	; 255
    50ee:	7f 4f       	sbci	r23, 0xFF	; 255
    50f0:	8f 4f       	sbci	r24, 0xFF	; 255
    50f2:	9f 4f       	sbci	r25, 0xFF	; 255
    50f4:	16 c0       	rjmp	.+44     	; 0x5122 <__floatsisf+0x6c>
    50f6:	88 23       	and	r24, r24
    50f8:	11 f0       	breq	.+4      	; 0x50fe <__floatsisf+0x48>
    50fa:	96 e9       	ldi	r25, 0x96	; 150
    50fc:	11 c0       	rjmp	.+34     	; 0x5120 <__floatsisf+0x6a>
    50fe:	77 23       	and	r23, r23
    5100:	21 f0       	breq	.+8      	; 0x510a <__floatsisf+0x54>
    5102:	9e e8       	ldi	r25, 0x8E	; 142
    5104:	87 2f       	mov	r24, r23
    5106:	76 2f       	mov	r23, r22
    5108:	05 c0       	rjmp	.+10     	; 0x5114 <__floatsisf+0x5e>
    510a:	66 23       	and	r22, r22
    510c:	71 f0       	breq	.+28     	; 0x512a <__floatsisf+0x74>
    510e:	96 e8       	ldi	r25, 0x86	; 134
    5110:	86 2f       	mov	r24, r22
    5112:	70 e0       	ldi	r23, 0x00	; 0
    5114:	60 e0       	ldi	r22, 0x00	; 0
    5116:	2a f0       	brmi	.+10     	; 0x5122 <__floatsisf+0x6c>
    5118:	9a 95       	dec	r25
    511a:	66 0f       	add	r22, r22
    511c:	77 1f       	adc	r23, r23
    511e:	88 1f       	adc	r24, r24
    5120:	da f7       	brpl	.-10     	; 0x5118 <__floatsisf+0x62>
    5122:	88 0f       	add	r24, r24
    5124:	96 95       	lsr	r25
    5126:	87 95       	ror	r24
    5128:	97 f9       	bld	r25, 7
    512a:	08 95       	ret

0000512c <__fp_split3>:
    512c:	57 fd       	sbrc	r21, 7
    512e:	90 58       	subi	r25, 0x80	; 128
    5130:	44 0f       	add	r20, r20
    5132:	55 1f       	adc	r21, r21
    5134:	59 f0       	breq	.+22     	; 0x514c <__fp_splitA+0x10>
    5136:	5f 3f       	cpi	r21, 0xFF	; 255
    5138:	71 f0       	breq	.+28     	; 0x5156 <__fp_splitA+0x1a>
    513a:	47 95       	ror	r20

0000513c <__fp_splitA>:
    513c:	88 0f       	add	r24, r24
    513e:	97 fb       	bst	r25, 7
    5140:	99 1f       	adc	r25, r25
    5142:	61 f0       	breq	.+24     	; 0x515c <__fp_splitA+0x20>
    5144:	9f 3f       	cpi	r25, 0xFF	; 255
    5146:	79 f0       	breq	.+30     	; 0x5166 <__fp_splitA+0x2a>
    5148:	87 95       	ror	r24
    514a:	08 95       	ret
    514c:	12 16       	cp	r1, r18
    514e:	13 06       	cpc	r1, r19
    5150:	14 06       	cpc	r1, r20
    5152:	55 1f       	adc	r21, r21
    5154:	f2 cf       	rjmp	.-28     	; 0x513a <__fp_split3+0xe>
    5156:	46 95       	lsr	r20
    5158:	f1 df       	rcall	.-30     	; 0x513c <__fp_splitA>
    515a:	08 c0       	rjmp	.+16     	; 0x516c <__fp_splitA+0x30>
    515c:	16 16       	cp	r1, r22
    515e:	17 06       	cpc	r1, r23
    5160:	18 06       	cpc	r1, r24
    5162:	99 1f       	adc	r25, r25
    5164:	f1 cf       	rjmp	.-30     	; 0x5148 <__fp_splitA+0xc>
    5166:	86 95       	lsr	r24
    5168:	71 05       	cpc	r23, r1
    516a:	61 05       	cpc	r22, r1
    516c:	08 94       	sec
    516e:	08 95       	ret

00005170 <__fp_zero>:
    5170:	e8 94       	clt

00005172 <__fp_szero>:
    5172:	bb 27       	eor	r27, r27
    5174:	66 27       	eor	r22, r22
    5176:	77 27       	eor	r23, r23
    5178:	cb 01       	movw	r24, r22
    517a:	97 f9       	bld	r25, 7
    517c:	08 95       	ret

0000517e <__mulsf3>:
    517e:	0e 94 d2 28 	call	0x51a4	; 0x51a4 <__mulsf3x>
    5182:	0c 94 43 29 	jmp	0x5286	; 0x5286 <__fp_round>
    5186:	0e 94 35 29 	call	0x526a	; 0x526a <__fp_pscA>
    518a:	38 f0       	brcs	.+14     	; 0x519a <__mulsf3+0x1c>
    518c:	0e 94 3c 29 	call	0x5278	; 0x5278 <__fp_pscB>
    5190:	20 f0       	brcs	.+8      	; 0x519a <__mulsf3+0x1c>
    5192:	95 23       	and	r25, r21
    5194:	11 f0       	breq	.+4      	; 0x519a <__mulsf3+0x1c>
    5196:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__fp_inf>
    519a:	0c 94 32 29 	jmp	0x5264	; 0x5264 <__fp_nan>
    519e:	11 24       	eor	r1, r1
    51a0:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__fp_szero>

000051a4 <__mulsf3x>:
    51a4:	0e 94 96 28 	call	0x512c	; 0x512c <__fp_split3>
    51a8:	70 f3       	brcs	.-36     	; 0x5186 <__mulsf3+0x8>

000051aa <__mulsf3_pse>:
    51aa:	95 9f       	mul	r25, r21
    51ac:	c1 f3       	breq	.-16     	; 0x519e <__mulsf3+0x20>
    51ae:	95 0f       	add	r25, r21
    51b0:	50 e0       	ldi	r21, 0x00	; 0
    51b2:	55 1f       	adc	r21, r21
    51b4:	62 9f       	mul	r22, r18
    51b6:	f0 01       	movw	r30, r0
    51b8:	72 9f       	mul	r23, r18
    51ba:	bb 27       	eor	r27, r27
    51bc:	f0 0d       	add	r31, r0
    51be:	b1 1d       	adc	r27, r1
    51c0:	63 9f       	mul	r22, r19
    51c2:	aa 27       	eor	r26, r26
    51c4:	f0 0d       	add	r31, r0
    51c6:	b1 1d       	adc	r27, r1
    51c8:	aa 1f       	adc	r26, r26
    51ca:	64 9f       	mul	r22, r20
    51cc:	66 27       	eor	r22, r22
    51ce:	b0 0d       	add	r27, r0
    51d0:	a1 1d       	adc	r26, r1
    51d2:	66 1f       	adc	r22, r22
    51d4:	82 9f       	mul	r24, r18
    51d6:	22 27       	eor	r18, r18
    51d8:	b0 0d       	add	r27, r0
    51da:	a1 1d       	adc	r26, r1
    51dc:	62 1f       	adc	r22, r18
    51de:	73 9f       	mul	r23, r19
    51e0:	b0 0d       	add	r27, r0
    51e2:	a1 1d       	adc	r26, r1
    51e4:	62 1f       	adc	r22, r18
    51e6:	83 9f       	mul	r24, r19
    51e8:	a0 0d       	add	r26, r0
    51ea:	61 1d       	adc	r22, r1
    51ec:	22 1f       	adc	r18, r18
    51ee:	74 9f       	mul	r23, r20
    51f0:	33 27       	eor	r19, r19
    51f2:	a0 0d       	add	r26, r0
    51f4:	61 1d       	adc	r22, r1
    51f6:	23 1f       	adc	r18, r19
    51f8:	84 9f       	mul	r24, r20
    51fa:	60 0d       	add	r22, r0
    51fc:	21 1d       	adc	r18, r1
    51fe:	82 2f       	mov	r24, r18
    5200:	76 2f       	mov	r23, r22
    5202:	6a 2f       	mov	r22, r26
    5204:	11 24       	eor	r1, r1
    5206:	9f 57       	subi	r25, 0x7F	; 127
    5208:	50 40       	sbci	r21, 0x00	; 0
    520a:	9a f0       	brmi	.+38     	; 0x5232 <__mulsf3_pse+0x88>
    520c:	f1 f0       	breq	.+60     	; 0x524a <__mulsf3_pse+0xa0>
    520e:	88 23       	and	r24, r24
    5210:	4a f0       	brmi	.+18     	; 0x5224 <__mulsf3_pse+0x7a>
    5212:	ee 0f       	add	r30, r30
    5214:	ff 1f       	adc	r31, r31
    5216:	bb 1f       	adc	r27, r27
    5218:	66 1f       	adc	r22, r22
    521a:	77 1f       	adc	r23, r23
    521c:	88 1f       	adc	r24, r24
    521e:	91 50       	subi	r25, 0x01	; 1
    5220:	50 40       	sbci	r21, 0x00	; 0
    5222:	a9 f7       	brne	.-22     	; 0x520e <__mulsf3_pse+0x64>
    5224:	9e 3f       	cpi	r25, 0xFE	; 254
    5226:	51 05       	cpc	r21, r1
    5228:	80 f0       	brcs	.+32     	; 0x524a <__mulsf3_pse+0xa0>
    522a:	0c 94 2c 29 	jmp	0x5258	; 0x5258 <__fp_inf>
    522e:	0c 94 b9 28 	jmp	0x5172	; 0x5172 <__fp_szero>
    5232:	5f 3f       	cpi	r21, 0xFF	; 255
    5234:	e4 f3       	brlt	.-8      	; 0x522e <__mulsf3_pse+0x84>
    5236:	98 3e       	cpi	r25, 0xE8	; 232
    5238:	d4 f3       	brlt	.-12     	; 0x522e <__mulsf3_pse+0x84>
    523a:	86 95       	lsr	r24
    523c:	77 95       	ror	r23
    523e:	67 95       	ror	r22
    5240:	b7 95       	ror	r27
    5242:	f7 95       	ror	r31
    5244:	e7 95       	ror	r30
    5246:	9f 5f       	subi	r25, 0xFF	; 255
    5248:	c1 f7       	brne	.-16     	; 0x523a <__mulsf3_pse+0x90>
    524a:	fe 2b       	or	r31, r30
    524c:	88 0f       	add	r24, r24
    524e:	91 1d       	adc	r25, r1
    5250:	96 95       	lsr	r25
    5252:	87 95       	ror	r24
    5254:	97 f9       	bld	r25, 7
    5256:	08 95       	ret

00005258 <__fp_inf>:
    5258:	97 f9       	bld	r25, 7
    525a:	9f 67       	ori	r25, 0x7F	; 127
    525c:	80 e8       	ldi	r24, 0x80	; 128
    525e:	70 e0       	ldi	r23, 0x00	; 0
    5260:	60 e0       	ldi	r22, 0x00	; 0
    5262:	08 95       	ret

00005264 <__fp_nan>:
    5264:	9f ef       	ldi	r25, 0xFF	; 255
    5266:	80 ec       	ldi	r24, 0xC0	; 192
    5268:	08 95       	ret

0000526a <__fp_pscA>:
    526a:	00 24       	eor	r0, r0
    526c:	0a 94       	dec	r0
    526e:	16 16       	cp	r1, r22
    5270:	17 06       	cpc	r1, r23
    5272:	18 06       	cpc	r1, r24
    5274:	09 06       	cpc	r0, r25
    5276:	08 95       	ret

00005278 <__fp_pscB>:
    5278:	00 24       	eor	r0, r0
    527a:	0a 94       	dec	r0
    527c:	12 16       	cp	r1, r18
    527e:	13 06       	cpc	r1, r19
    5280:	14 06       	cpc	r1, r20
    5282:	05 06       	cpc	r0, r21
    5284:	08 95       	ret

00005286 <__fp_round>:
    5286:	09 2e       	mov	r0, r25
    5288:	03 94       	inc	r0
    528a:	00 0c       	add	r0, r0
    528c:	11 f4       	brne	.+4      	; 0x5292 <__fp_round+0xc>
    528e:	88 23       	and	r24, r24
    5290:	52 f0       	brmi	.+20     	; 0x52a6 <__fp_round+0x20>
    5292:	bb 0f       	add	r27, r27
    5294:	40 f4       	brcc	.+16     	; 0x52a6 <__fp_round+0x20>
    5296:	bf 2b       	or	r27, r31
    5298:	11 f4       	brne	.+4      	; 0x529e <__fp_round+0x18>
    529a:	60 ff       	sbrs	r22, 0
    529c:	04 c0       	rjmp	.+8      	; 0x52a6 <__fp_round+0x20>
    529e:	6f 5f       	subi	r22, 0xFF	; 255
    52a0:	7f 4f       	sbci	r23, 0xFF	; 255
    52a2:	8f 4f       	sbci	r24, 0xFF	; 255
    52a4:	9f 4f       	sbci	r25, 0xFF	; 255
    52a6:	08 95       	ret

000052a8 <__udivmodqi4>:
    52a8:	99 1b       	sub	r25, r25
    52aa:	79 e0       	ldi	r23, 0x09	; 9
    52ac:	04 c0       	rjmp	.+8      	; 0x52b6 <__udivmodqi4_ep>

000052ae <__udivmodqi4_loop>:
    52ae:	99 1f       	adc	r25, r25
    52b0:	96 17       	cp	r25, r22
    52b2:	08 f0       	brcs	.+2      	; 0x52b6 <__udivmodqi4_ep>
    52b4:	96 1b       	sub	r25, r22

000052b6 <__udivmodqi4_ep>:
    52b6:	88 1f       	adc	r24, r24
    52b8:	7a 95       	dec	r23
    52ba:	c9 f7       	brne	.-14     	; 0x52ae <__udivmodqi4_loop>
    52bc:	80 95       	com	r24
    52be:	08 95       	ret

000052c0 <__divmodhi4>:
    52c0:	97 fb       	bst	r25, 7
    52c2:	07 2e       	mov	r0, r23
    52c4:	16 f4       	brtc	.+4      	; 0x52ca <__divmodhi4+0xa>
    52c6:	00 94       	com	r0
    52c8:	07 d0       	rcall	.+14     	; 0x52d8 <__divmodhi4_neg1>
    52ca:	77 fd       	sbrc	r23, 7
    52cc:	09 d0       	rcall	.+18     	; 0x52e0 <__divmodhi4_neg2>
    52ce:	0e 94 7a 29 	call	0x52f4	; 0x52f4 <__udivmodhi4>
    52d2:	07 fc       	sbrc	r0, 7
    52d4:	05 d0       	rcall	.+10     	; 0x52e0 <__divmodhi4_neg2>
    52d6:	3e f4       	brtc	.+14     	; 0x52e6 <__divmodhi4_exit>

000052d8 <__divmodhi4_neg1>:
    52d8:	90 95       	com	r25
    52da:	81 95       	neg	r24
    52dc:	9f 4f       	sbci	r25, 0xFF	; 255
    52de:	08 95       	ret

000052e0 <__divmodhi4_neg2>:
    52e0:	70 95       	com	r23
    52e2:	61 95       	neg	r22
    52e4:	7f 4f       	sbci	r23, 0xFF	; 255

000052e6 <__divmodhi4_exit>:
    52e6:	08 95       	ret

000052e8 <__tablejump2__>:
    52e8:	ee 0f       	add	r30, r30
    52ea:	ff 1f       	adc	r31, r31
    52ec:	05 90       	lpm	r0, Z+
    52ee:	f4 91       	lpm	r31, Z
    52f0:	e0 2d       	mov	r30, r0
    52f2:	09 94       	ijmp

000052f4 <__udivmodhi4>:
    52f4:	aa 1b       	sub	r26, r26
    52f6:	bb 1b       	sub	r27, r27
    52f8:	51 e1       	ldi	r21, 0x11	; 17
    52fa:	07 c0       	rjmp	.+14     	; 0x530a <__udivmodhi4_ep>

000052fc <__udivmodhi4_loop>:
    52fc:	aa 1f       	adc	r26, r26
    52fe:	bb 1f       	adc	r27, r27
    5300:	a6 17       	cp	r26, r22
    5302:	b7 07       	cpc	r27, r23
    5304:	10 f0       	brcs	.+4      	; 0x530a <__udivmodhi4_ep>
    5306:	a6 1b       	sub	r26, r22
    5308:	b7 0b       	sbc	r27, r23

0000530a <__udivmodhi4_ep>:
    530a:	88 1f       	adc	r24, r24
    530c:	99 1f       	adc	r25, r25
    530e:	5a 95       	dec	r21
    5310:	a9 f7       	brne	.-22     	; 0x52fc <__udivmodhi4_loop>
    5312:	80 95       	com	r24
    5314:	90 95       	com	r25
    5316:	bc 01       	movw	r22, r24
    5318:	cd 01       	movw	r24, r26
    531a:	08 95       	ret

0000531c <eeprom_read_byte>:
    531c:	f9 99       	sbic	0x1f, 1	; 31
    531e:	fe cf       	rjmp	.-4      	; 0x531c <eeprom_read_byte>
    5320:	92 bd       	out	0x22, r25	; 34
    5322:	81 bd       	out	0x21, r24	; 33
    5324:	f8 9a       	sbi	0x1f, 0	; 31
    5326:	99 27       	eor	r25, r25
    5328:	80 b5       	in	r24, 0x20	; 32
    532a:	08 95       	ret

0000532c <eeprom_read_word>:
    532c:	a8 e1       	ldi	r26, 0x18	; 24
    532e:	b0 e0       	ldi	r27, 0x00	; 0
    5330:	42 e0       	ldi	r20, 0x02	; 2
    5332:	50 e0       	ldi	r21, 0x00	; 0
    5334:	0c 94 b1 29 	jmp	0x5362	; 0x5362 <eeprom_read_blraw>

00005338 <eeprom_write_byte>:
    5338:	26 2f       	mov	r18, r22

0000533a <eeprom_write_r18>:
    533a:	f9 99       	sbic	0x1f, 1	; 31
    533c:	fe cf       	rjmp	.-4      	; 0x533a <eeprom_write_r18>
    533e:	1f ba       	out	0x1f, r1	; 31
    5340:	92 bd       	out	0x22, r25	; 34
    5342:	81 bd       	out	0x21, r24	; 33
    5344:	20 bd       	out	0x20, r18	; 32
    5346:	0f b6       	in	r0, 0x3f	; 63
    5348:	f8 94       	cli
    534a:	fa 9a       	sbi	0x1f, 2	; 31
    534c:	f9 9a       	sbi	0x1f, 1	; 31
    534e:	0f be       	out	0x3f, r0	; 63
    5350:	01 96       	adiw	r24, 0x01	; 1
    5352:	08 95       	ret

00005354 <eeprom_write_word>:
    5354:	0e 94 9c 29 	call	0x5338	; 0x5338 <eeprom_write_byte>
    5358:	27 2f       	mov	r18, r23
    535a:	0c 94 9d 29 	jmp	0x533a	; 0x533a <eeprom_write_r18>

0000535e <eeprom_read_block>:
    535e:	dc 01       	movw	r26, r24
    5360:	cb 01       	movw	r24, r22

00005362 <eeprom_read_blraw>:
    5362:	fc 01       	movw	r30, r24
    5364:	f9 99       	sbic	0x1f, 1	; 31
    5366:	fe cf       	rjmp	.-4      	; 0x5364 <eeprom_read_blraw+0x2>
    5368:	06 c0       	rjmp	.+12     	; 0x5376 <eeprom_read_blraw+0x14>
    536a:	f2 bd       	out	0x22, r31	; 34
    536c:	e1 bd       	out	0x21, r30	; 33
    536e:	f8 9a       	sbi	0x1f, 0	; 31
    5370:	31 96       	adiw	r30, 0x01	; 1
    5372:	00 b4       	in	r0, 0x20	; 32
    5374:	0d 92       	st	X+, r0
    5376:	41 50       	subi	r20, 0x01	; 1
    5378:	50 40       	sbci	r21, 0x00	; 0
    537a:	b8 f7       	brcc	.-18     	; 0x536a <eeprom_read_blraw+0x8>
    537c:	08 95       	ret

0000537e <_exit>:
    537e:	f8 94       	cli

00005380 <__stop_program>:
    5380:	ff cf       	rjmp	.-2      	; 0x5380 <__stop_program>
